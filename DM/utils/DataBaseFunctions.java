package test.java.ormbframework.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.Reader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Hashtable;

import org.apache.ibatis.jdbc.ScriptRunner;


import oracle.jdbc.pool.OracleDataSource;
import test.java.ormbframework.BaseTest;

public class DataBaseFunctions
{
	
	CommonFunctions CF = new CommonFunctions();
	
	
	boolean checkPriceAssignmentId = true;
	
	public  DataBaseFunctions()
	{
		
	}
	
	public  DataBaseFunctions(boolean checkPriceAssignmentId)
	{
		this.checkPriceAssignmentId = checkPriceAssignmentId;
	}
	
	
	/*'###############################################################
	'Function Name        : FnSetValueInDb
	'Function Description : Set the value in DB
	'Input Parameters     : sQuery - Query to be executed
							sDBName - DB Name
							sDBUserName - user to connect
							sDBPassword - password to be provided
	'Output Parameters    : Returns ipAddress 
	'Written By           : Ajeet P
	'################################################################*/
	public void FnSetValueInDb(String sQuery, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws SQLException 
	{
		PreparedStatement 	ps 		= null;
		Connection 			cn 		= null;
		OracleDataSource    ods		= new OracleDataSource();

		try 
		{
			ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
			cn = ods.getConnection();
			ps = cn.prepareStatement(sQuery);
			System.out.println("INSERT Query : '"+sQuery+"'");
			ps.executeQuery();
			System.out.println("INSERT value was inserted sucessfully");
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}
		finally	
		{
			ps.close();
			cn.close();
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnInsertDivisionCurrencyInDB 
	'Function Description : This function inserts the currency in Division 
	'Input Parameters     : sLogicalDate   	-> Date to be Updated
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnInsertDivisionCurrencyInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnInsertDivisionCurrencyInDB");
		
		try
		{
			String sDiv,sCurrency;
			
			sDiv			=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
			sCurrency		=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
			
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				FnSetValueInDb("INSERT INTO CI_CIS_DIV_INV_CUR (CIS_DIVISION,CURRENCY_CD,VERSION,ENABLED_FLG,RND_TYPE_FLG) VALUES('"+sDiv+"','"+sCurrency+"','1',' ','RDNR')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("Commit",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			}
		}
		catch(Exception e)
		{
			System.out.println("Exception in Application Function ==> FnInsertDivisionCurrencyInDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###############################################################
	'Function Name        : FnUpdateValueInDb
	'Function Description : Execute update and commit
	'Input Parameters  
	'                     : 
	'                     
	'Output Parameters    : Not Applicable
	'################################################################*/	
	public void FnUpdateValueInDb(String sQuery1,String sQuery2, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws SQLException {
		String 				data 	= null;
		PreparedStatement 	ps 		= null;
		PreparedStatement 	ps1		= null;
		Statement 			stmt 	= null;
		Connection 			cn 		= null;
		OracleDataSource 	ods 	= new OracleDataSource();
		System.out.println("data = "+data);
		System.out.println("stmt = "+stmt);
		
		try {
			ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
			cn = ods.getConnection();
			ps = cn.prepareStatement(sQuery1);
			System.out.println("Query : '"+sQuery1+"'");
			ps.executeQuery();
			Thread.sleep(3000);
			
			ps1 = cn.prepareStatement(sQuery2);
			
			System.out.println("Query : '"+sQuery2+"'");
			ps1.executeQuery();
			System.out.println("INSERT value was inserted sucessfully");
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}
		finally
		{
			ps.close();
			ps1.close();
			cn.close();
		}
	}
	
	/*'###############################################################
	'Function Name        : timeDiff
	'Function Description : Calculate the time difference by giving the start date and end date
	'Input Parameters     : sStartDate - Start Date
							sEndDate - End date
	'Output Parameters    : Returns the time difference in seconds 
	'Written By 		  : Ajeet P
	'################################################################*/
	public String timeDiff(String sStartDate, String sEndDate) throws Exception 
	{

		String q = "NoValue";
		SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");  
		Date d1 = null;
		Date d2 = null;
		try 
		{
			d1 = format.parse(sStartDate);
			d2 = format.parse(sEndDate);
			// Get seconds from each, and subtract.
			long diff = d2.getTime() - d1.getTime();
			long diffSeconds = diff / 1000;         
			long diffMinutes = diff / (60 * 1000);         
			long diffHours = diff / (60 * 60 * 1000);                      
			System.out.println("Time in seconds: " + diffSeconds + " seconds."); 
			System.out.println("Time in minutes: " + diffMinutes + " minutes."); 
			System.out.println("Time in hours: " + diffHours + " hours."); 
			q = String.valueOf(diffSeconds);
		} 
		catch (Exception e) 
		{
			System.out.println("Common Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
		}
		return q;
	}
	
	/*'###############################################################
	'Function Name        : FnGetDBColumnValue
	'Function Description : Getting Column Value form DB
	'Input Parameters     : sQuery - Query to be executed
							sDBName - DB Name
							sDBUserName - user to connect
							sDBPassword - password to be provided
	'Output Parameters    : Returns Column name in an string variable 
	'Written By 		  : Ajeet P
	'################################################################*/
	public static String FnGetDBColumnValue(String sQuery, String columnname, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws SQLException 
	{
		String q = "noValue";
		ResultSet rs = null;
		Statement stmt = null;
		Connection cn = null;
		OracleDataSource ods = new OracleDataSource();
		try 
		{
			//step1 load the driver class  
			Class.forName("oracle.jdbc.driver.OracleDriver");  
			ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
			System.out.println(ods.getURL());
			cn = ods.getConnection();
			
			stmt = cn.createStatement();
			rs = stmt.executeQuery(sQuery);

			while ( rs.next() ) 
			{
				q = rs.getString(columnname);
				break;
			} 
		} 
		catch(Exception e) 
		{
			q = "NoValue";
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}
		finally	
		{
			rs.close();
			stmt.close();
			cn.close();
		}
		if (q == null || q == "" || q == " ")
			q = "NoValue";
		q=q.trim();
		return q;
	}
	
	/*'###############################################################
	'Function Name        : FnGetDBColumnValueInArray
	'Function Description : Getting Column Values form DB
	'Input Parameters     : sQuery - Query to be executed
							sDBName - DB Name
							sDBUserName - user to connect
							sDBPassword - password to be provided
	'Output Parameters    : Returns Column name in an array 
	'Written By 		  : Ajeet P
	'################################################################*/
	public String[] FnGetDBColumnValueInArray(String sQuery, String columnname, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws SQLException 
	{
		ArrayList<String> q = new ArrayList<String>();
		ResultSet rs = null;
		Statement stmt = null;
		Connection cn = null;
		
		OracleDataSource ods = new OracleDataSource();
		try 
		{
			ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
			cn 		= ods.getConnection();
			stmt 	= cn.prepareStatement(sQuery);
			rs 		= stmt.executeQuery(sQuery);
			while ( rs.next() ) 
			{
				q.add(rs.getString(columnname));
			} 
			
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}
		finally	
		{
			rs.close();
			stmt.close();
			cn.close();
		}
		return (String[]) q.toArray(new String[q.size()]);
	}
	
	/*'########################################################################################################
	'Function Name        : fnGetAllValuefromDB
	'Function Description : To get all value from database for provided SQL query
	'Written By           : Sanjeev Acharya
	'Input Parameters     : strQuery      -> SQL query for which data to be fetched
	'					  : sDbName       -> database instance name 
	'                     : sDbUserName   -> User ID
	'					  : sDbPassword   -> Password 
	'                     : sDbMachineIP  -> Database IP Address 
	'					  : sDbPort       -> Database port 
	'Output Parameters    :Array list which is having database column and value pair
	'#########################################################################################################*/
	public ArrayList<Hashtable<String, Object>> fnGetAllValuefromDB(String sQuery) throws Exception 
	{
		String Error = "NO";
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		// Statement stmt = null
		ResultSetMetaData metadata = null;
		Connection cn = null;
		ArrayList<Hashtable<String, Object>> AL = new ArrayList<Hashtable<String, Object>>();
		int columnCount = 0;
		Class.forName("oracle.jdbc.driver.OracleDriver");

		try
		{
			// create the connection object
			cn = DriverManager.getConnection("jdbc:oracle:thin:" + System.getProperty("dbUserName") + "/" + System.getProperty("dbPassword") + "@//" + System.getProperty("dbMachineIP") + ":" + System.getProperty("dbPort") + "/" + System.getProperty("dbName"));

			// create the statement object
			pstmt = cn.prepareStatement(sQuery);

			// execute query
			rs = pstmt.executeQuery(sQuery);

			// If record not available in databse for provided query
			if (!rs.next()) 
			{
				Error = "YES";
				BaseTest.eFlgFound = "false";
				String sResult = "cf =fnGetAllValuefromDB - Fail - Record Not available in DB for Query ->" + sQuery;
				System.out.println("sResult---->" + sResult);
				CF.FnTestCaseStatusReport("Fail", sResult);
			}
			
			// If record available in databse for provided query then get column count
			if (Error.equals("NO")) 
			{
				metadata = rs.getMetaData();
				columnCount = metadata.getColumnCount();
			}
		} 
		catch (SQLException e) 
		{
			System.out.println("cf =fnGetAllValuefromDB---> SQL Excception encountered.");
			System.out.print("cf =fnGetAllValuefromDB---> Stack Trace : ");
			e.printStackTrace();
			System.exit(0);
		}
		// If values are available in DB for provided query
		if (Error.equals("NO")) 
		{
			try 
			{
				int iRowCount = 0;
				// To store database coulmn - value pair in Arraylist hash table
				do 
				{
					Hashtable<String, Object> valueTable = new Hashtable<String, Object>();
					for (int i = 1; i <= columnCount; i++) 
					{
						String strColumnName = metadata.getColumnName(i);
						String strTempValue = rs.getString(i);
						System.out.println(i + ") " + strColumnName + " = " + strTempValue);

						if (strTempValue == null)
						{
							strTempValue = "NULL";
						}

						valueTable.put(strColumnName, strTempValue);

					}
					AL.add(valueTable);

					System.out.println("AL---->" + AL);
					iRowCount = iRowCount + 1;
					System.out.println("cf =fnGetAllValuefromDB---> Connection Successful!");
					System.out.println("cf =fnGetAllValuefromDB---> Rows Fetched from database for provided query: "
							+ iRowCount + "\n");
				} while (rs.next());
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			} 
			finally 
			{
				rs.close();
				pstmt.close();
				cn.close();
			}
			System.out.println("** cf =fnGetAllValuefromDB---> complete **\n");
			rs.close();
			pstmt.close();
			cn.close();
		}
		return AL;
	}

	/*'###############################################################
	'Function Name        : FnGetValueFromDb
	'Function Description : Get value from Database for given SQL statement
	'Input Parameters     : sQuery 			-> SQL statement
	'					  : sDbName 		-> Database name
	'					  : sDbUserName 	-> Database user name
	'					  : sDbPassword 	-> Database Password
	'					  : sDbMachineIP 	-> Database machine IP address
	'					  : sDbPort 		-> Database Porn Number
	'Output Parameters    : Returns the value selected by given SQL statement
	'Written By 		  : Ajeet P
	'################################################################*/
	public String FnGetValueFromDb(String sQuery, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws SQLException
	{
		String data = "NoValue";
		ResultSet rs = null;
		Statement stmt = null;
		Connection cn = null;
		OracleDataSource ods = new OracleDataSource();
		try 
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");  
			ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
			cn = ods.getConnection();
			stmt = cn.createStatement();
			rs = stmt.executeQuery(sQuery);
			while ( rs.next() ) 
			{
				data=(String)rs.getString(1);
				break;
			}
			System.out.println("Oracle DB connection done. Required Query result >> '"+data+"'");
		}
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}
		finally	
		{
			rs.close();
			stmt.close();
			cn.close();
		}
		return data;
	}
		
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetToDoIdFromDB
	'Function Description : To Get To Do ID from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnGetToDoIdFromDB (int sStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound  = "true";
	    String sToDoId="";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
	    	{
	    		System.out.println("FnGetToDoIdFromDB-->");
	    		
	    		String sNoOfExpIds, sID;
	    		int iNoOfExpIds;
	                
	    		sNoOfExpIds 	= CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sID       		= CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		
	    		iNoOfExpIds = Integer.parseInt(sNoOfExpIds);
	    		
	    		if(iNoOfExpIds==1)
	    		{       
	    			sToDoId       = (String) FnGetDBColumnValue("SELECT TD_ENTRY_ID FROM CI_TD_DRLKEY  WHERE KEY_VALUE = '"+sID+"'"+"AND TD_ENTRY_ID IN (SELECT TD_ENTRY_ID FROM CI_TD_ENTRY WHERE ENTRY_STATUS_FLG = 'O')", "TD_ENTRY_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			CF.FnWriteCellValue(sStartingRow,3, sToDoId, sSheetName, sWorkBook);
	    			System.out.println("To Do Id is-->"+sToDoId);
	                    
	    		}
	    		else
	    		{
	    			String [] sToDoEntityIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT TD_ENTRY_ID FROM CI_TD_DRLKEY  WHERE KEY_VALUE = '"+sID+"'"+"AND TD_ENTRY_ID IN (SELECT TD_ENTRY_ID FROM CI_TD_ENTRY WHERE ENTRY_STATUS_FLG = 'O')", "TD_ENTRY_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			int sStartingCol = 3;
	    			int sToDoEntityIDlen = sToDoEntityIDArr.length;
	    			for(int k=0;k<sToDoEntityIDlen;k++,sStartingCol++)
	    			{					
	    				sToDoId = sToDoEntityIDArr[k];
	    				CF.FnWriteCellValue(sStartingRow, sStartingCol, sToDoId, sSheetName, sWorkBook);
	                }
	            }
	        }
	    } 
	    catch (Exception e) 
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	    return sToDoId;
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetToDoIdFromDB
	'Function Description : To Get To Do ID from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetFtIdFromDB (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound  = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
	    	{
	    		System.out.println("FnGetFtIdFromDB-->");
	    		
	    		String sContractID,sRowCount,sFtId,sExpBillSegmentCount;
				int iRowCount,iCounter,iExpBillSegmentCount;
			
				System.out.println("Get FT ID on each contract");
				
				//Get FT_ID from each contracts
				sContractID				=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sExpBillSegmentCount 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkBook).toString().trim();
				iExpBillSegmentCount 	=   Integer.parseInt(sExpBillSegmentCount);
				
				//Get FT_ID on contract from CI_FT Table
				sRowCount            =      (String)FnGetDBColumnValue("SELECT COUNT(*) FROM CI_FT WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iRowCount            =      Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				Thread.sleep(2000);
				if (iRowCount==iExpBillSegmentCount)
				{
					String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"' ORDER BY FT_ID","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);

					iCounter = 0;
					int sFTIDlen = sFTIDArr.length;
					for(int k=0;k<sFTIDlen;k++,iCounter++)
					{					
						sFtId = sFTIDArr[k];
						CF.FnWriteCellValue((iStartingRow+iCounter),3, sFtId, sSheetName, sWorkBook);
						System.out.println("FT id is:"+sFtId);
						CF.FnTestCaseStatusReport("Pass","FT's  Count matched on contract "+sContractID);
					}
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","FT ID NOT present on contract "+sContractID);
				}
	        }
	    } 
	    catch (Exception e) 
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'###################################################################################################
	'Function Name        : FnVerifyCI_FT_GL_EXT_TableForDivAmountCurrencyAndExchgRate
	'Function Description : This Function to verify divsion amount ,div currency and exchange rate
	'Input Parameters  
	'#####################################################################################################*/	
	public void FnVerifyCI_FT_GL_EXT_TableForDivAmountCurrencyAndExchgRate(int iStartingRow,String sSheetName,String sWorkbook) throws Exception 
	{
		System.out.println("----->>>>FnVerifyCI_FT_GL_EXT_TableForDivAmountCurrencyAndExchgRate");
		try 
		{
			String FTId,GLSeqNbr,eDivisionAmt,eDivisionCurcyCd,eExchangeRt,sDivisionAmt,sDivisionCurcyCd,sExChangeRt;
			
		
			System.out.println("Verifying the entries in FT_GL_EXT TABLE for FTs generated on Bill Segments for Account");
			FTId 			  = CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
			GLSeqNbr 		  = CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
			eDivisionAmt 	  = CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim();
			eDivisionCurcyCd  = CF.FnGetCellValue(iStartingRow, 4, sSheetName, sWorkbook).toString().trim();
			eExchangeRt		  = CF.FnGetCellValue(iStartingRow, 5, sSheetName, sWorkbook).toString().trim();
			Thread.sleep(1000);
			sDivisionAmt  	  = (String) FnGetDBColumnValue("select DIVISION_AMT from CI_FT_GL_EXT where FT_ID = '"+FTId+"' and GL_SEQ_NBR = '"+GLSeqNbr+"'","DIVISION_AMT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

			Thread.sleep(1000);
			sDivisionCurcyCd  = (String) FnGetDBColumnValue("select DIVISION_CURCY_CD from CI_FT_GL_EXT where FT_ID = '"+FTId+"' and GL_SEQ_NBR = '"+GLSeqNbr+"'","DIVISION_CURCY_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			Thread.sleep(1000);
			sExChangeRt		  = (String) FnGetDBColumnValue("select EXCHRATE from CI_FT_GL_EXT where FT_ID = '"+FTId+"' and GL_SEQ_NBR = '"+GLSeqNbr+"'", "EXCHRATE", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			Thread.sleep(2000);

			if(sDivisionAmt.trim().equalsIgnoreCase(eDivisionAmt)) 
				CF.FnTestCaseStatusReport("Pass", "Value MATCHED----> Expected Value: "+eDivisionAmt.replace(",", "'")+" And Actual Value: " +sDivisionAmt.replace(",", "'"));
			else
				CF.FnTestCaseStatusReport("Fail", "Value NOT MATCHED----> Expected Value: "+eDivisionAmt.replace(",", "'")+" And Actual Value: " +sDivisionAmt.replace(",", "'"));
			Thread.sleep(2000);

			if(sDivisionCurcyCd.trim().equalsIgnoreCase(eDivisionCurcyCd)) 
				CF.FnTestCaseStatusReport("Pass", "Value MATCHED----> Expected Value: "+eDivisionCurcyCd.replace(",", "'")+" And Actual Value: " +sDivisionCurcyCd.replace(",", "'"));
			else
				CF.FnTestCaseStatusReport("Fail", "Value NOT MATCHED----> Expected Value: "+eDivisionCurcyCd.replace(",", "'")+" And Actual Value: " +sDivisionCurcyCd.replace(",", "'"));
			Thread.sleep(2000);
			
			if(sExChangeRt.trim().equalsIgnoreCase(eExchangeRt)) 
				CF.FnTestCaseStatusReport("Pass", "Value MATCHED----> Expected Value: "+eExchangeRt.replace(",", "'")+" And Actual Value: " +sExChangeRt.replace(",", "'"));
			else
				CF.FnTestCaseStatusReport("Fail", "Value NOT MATCHED----> Expected Value: "+eExchangeRt.replace(",", "'")+" And Actual Value: " +sExChangeRt.replace(",", "'"));
			}
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("FnVerifyDivAmountCurrencyandExchgRate not working ->"+e.getMessage());
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","Database Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnCompleteToDoIdFromDB
	'Function Description : To Complete To Do ID from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnCompleteToDoIdFromDB (int sStartingRow, int sEndingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnGetToDoIdFromDB-->");
	    		   
	    		String sToDoIdFrmDB,sStatusFlg;
	    		for(int i=sStartingRow;i<=sEndingRow;i++)
	    		{
	    			sToDoIdFrmDB 	= CF.FnGetCellValue(i ,1, sSheetName, sWorkBook).toString().trim();
	    			sStatusFlg     	= CF.FnGetCellValue(i ,2, sSheetName, sWorkBook).toString().trim();
	                    
	    			FnSetValueInDb("Update CI_TD_ENTRY SET ENTRY_STATUS_FLG = '"+sStatusFlg+"', ASSIGNED_DTTM = SYSTIMESTAMP, COMPLETE_DTTM = SYSTIMESTAMP WHERE TD_ENTRY_ID = '"+sToDoIdFrmDB+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			Thread.sleep(2000);
	    			System.out.println(">------------Updated CI_TD_ENTRY------------<");
	    			FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			Thread.sleep(2000);
	    		}
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetToDoIdAndCompleteFromDB
	'Function Description : To Get To Do ID from Database and mark it complete
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetToDoIdAndCompleteFromDB (int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    String sToDoId="";
	    String sKey;
	    String sRowCount;
	    int iCount;
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
	    	{
	    		System.out.println("FnGetToDoIdAndCompleteFromDB-->");
	    		BaseTest.sTestDescription = "To Do Completion from database";
	    		for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    		{
	    			sKey		= CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    			sToDoId		= (String) FnGetDBColumnValue("SELECT TD_ENTRY_ID FROM CI_TD_DRLKEY  WHERE KEY_VALUE = '"+sKey+"'"+"AND TD_ENTRY_ID IN (SELECT TD_ENTRY_ID FROM CI_TD_ENTRY WHERE ENTRY_STATUS_FLG = 'O')", "TD_ENTRY_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	                 
	    			CF.FnWriteCellValue(sStartingRow,2, sToDoId, sSheetName, sWorkbook);
	    			System.out.println("To Do Id is-->"+sToDoId);
	                
	    			sRowCount       = (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TD_ENTRY WHERE TD_ENTRY_ID = '"+sToDoId+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			iCount =  	Integer.parseInt(sRowCount);
	    			if (iCount>0)
	    			{
	    				FnSetValueInDb("Update CI_TD_ENTRY SET ENTRY_STATUS_FLG = 'C' WHERE TD_ENTRY_ID = '"+sToDoId+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    				Thread.sleep(3000);
	    				System.out.println(">------------UPDATED TODO ID GENERATED TO COMPLETE------------<");
	    				FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    				Thread.sleep(3000);
	    				CF.FnTestCaseStatusReport("Pass", "TO DO ID "+sToDoId+" completed for Policy ID "+sKey); 
	    			}
	    		}
	    	}
	    }
	    catch (Exception e) 
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetBOStatusForPolicyFromDB
	'Function Description : To Get To Do ID from Database and mark it complete
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBOStatusForPolicyFromDB (int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
		BaseTest.eFlgFound = "true";
	    String sBOStatusCd="";
	    String sKey;
	    String sExpBOStatusCd="";
	    
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnGetBOStatusForPolicyFromDB-->");
	    		BaseTest.sTestDescription = "Get BO Status For Policy from database";
	    		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    		{
	    			sKey			= CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook).toString().trim();
	    			sBOStatusCd		= (String) FnGetDBColumnValue("SELECT BO_STATUS_CD FROM CI_POLICY WHERE POLICY_ID = '"+sKey+"'", "BO_STATUS_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			
	    			sExpBOStatusCd	= CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook).toString().trim();
	    			System.out.println("Actual BO Status CD is-->"+sBOStatusCd);
	    			System.out.println("Expected BO Status CD is-->"+sExpBOStatusCd);
	                	
	    			if(sBOStatusCd.equalsIgnoreCase(sExpBOStatusCd))
	    			{
	    				Thread.sleep(3000);
	    				CF.FnTestCaseStatusReport("Pass", "BO Status CD for for Policy ID "+sKey+" is "+sBOStatusCd); 
	    			}
	    			else
	    			{
	    				CF.FnTestCaseStatusReport("Fail", "BO Status CD for for Policy ID "+sKey+" is "+sBOStatusCd);
	    			}
	    		}
	    	}
	    }
	    catch (Exception e) 
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetBatchNumberFromDB
	'Function Description : To Get Batch Number From Database
	'Written By           : Sanjeev Acharya
	'Input Parameters     : sAccountID.
	'Output Parameters    : sBatchNo
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnGetBatchNumberFromDB (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		String sBatchNo="";
		String  sBatchNofromBatchTable;
		String  sBatchNoFromTable;
		String  sAccountID;
		String  sBatchCode;
		String  sBillType;
		
		try 
		{
			if(BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				System.out.println("FnGetBatchNumberFromDB-->");
				
				sAccountID	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
				sBatchCode	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
				sBillType	= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
				
				sBatchNofromBatchTable = FnGetDBColumnValue("SELECT MAX(BATCH_NBR) FROM CI_BATCH_RUN WHERE BATCH_CD ='"+sBatchCode+"'","MAX(BATCH_NBR)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("Batch No from Batch Run table is-->"+sBatchNofromBatchTable);
				if(sBillType.equalsIgnoreCase("Trial Bill"))
				{
					sBatchNoFromTable = FnGetDBColumnValue("SElECT BATCH_RUN_NBR FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountID+"'"+"AND BATCH_RUN_NBR IN (SELECT MAX(BATCH_RUN_NBR) FROM CI_TRL_BILL WHERE ACCT_ID='"+sAccountID+"')","BATCH_RUN_NBR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("Batch No from Trial bill table is-->"+sBatchNoFromTable);
				}
				else
				{
					sBatchNoFromTable = FnGetDBColumnValue("SElECT BATCH_RUN_NBR FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"'"+"AND BATCH_RUN_NBR IN (SELECT MAX(BATCH_RUN_NBR) FROM CI_BILL WHERE ACCT_ID='"+sAccountID+"')","BATCH_RUN_NBR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("Batch No from Trial bill table is-->"+sBatchNoFromTable);
				}
				if (sBatchNofromBatchTable.equals(sBatchNoFromTable))
				{
					sBatchNo=sBatchNofromBatchTable;
					CF.FnWriteCellValue(iStartingRow,4, sBatchNo, sSheetName, sWorkBook);
					System.out.println("Batch No is-->"+sBatchNo);
				}
				else
				{
					CF.FnWriteCellValue(iStartingRow,4, "BATCH NUMBERS ARE DIFFERENT", sSheetName, sWorkBook);
					System.out.println("Batch No is-->"+sBatchNo);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
			e.printStackTrace();
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
		return sBatchNo;
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnSetFeatureConfigOptionsInDB 
	'Function Description : Change Feature Configuration Option Values in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnSetFeatureConfigOptionsInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				String sExpectedOptionType="";
				
				//Initailizing Variables 
				String sFeatureConfig		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sOptionType			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
				String sValue				=   CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim(); 
				 
				if(sOptionType.equalsIgnoreCase("Bill Segment Regeneration on Freeze"))
				{
					sExpectedOptionType = "BIRC";
				} 
				else if(sOptionType.equalsIgnoreCase("Billable Charges Date"))
				{
					sExpectedOptionType = "BCDT";
				}
				else if (sOptionType.equalsIgnoreCase("Use Materialized Views"))
				{
					sExpectedOptionType = "VPMV";
				}
				else if (sOptionType.equalsIgnoreCase("Allow Offsetting Across Persons"))
				{
					sExpectedOptionType = "MULP";
				}
				else if (sOptionType.equalsIgnoreCase("Skip Priceitem Contract Type Validation"))
				{
					sExpectedOptionType = "PCVS";
				}
				else
				{
					sExpectedOptionType = sOptionType;
				}
				
				FnUpdateValueInDb("UPDATE CI_WFM_OPT SET WFM_OPT_VAL = '"+sValue+"' WHERE WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sExpectedOptionType+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				String sGetText   = (String) FnGetDBColumnValue("SELECT WFM_OPT_VAL FROM CI_WFM_OPT WHERE WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sExpectedOptionType+"'","WFM_OPT_VAL", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("date format ->"+sGetText); 

				if(sGetText.equalsIgnoreCase(sValue))
				{
					CF.FnTestCaseStatusReport("Pass", "Freature config option for "+sFeatureConfig+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Freature config option for "+sFeatureConfig+" update successfull" +sGetText);
				}				 
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnRemoveFeatureConfigOptionsInDB 
	'Function Description : Remove Feature Configuration Option Values in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnRemoveFeatureConfigOptionsInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
							
				//Initailizing Variables 
				String sFeatureConfig		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sOptionType			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
				
				FnSetValueInDb("DELETE FROM CI_WFM_OPT WHERE WFM_NAME = '"+sFeatureConfig+"' AND WFM_OPT_VAL IN('"+sOptionType+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				CF.FnTestCaseStatusReport("Pass","Remvoed the entries "+sOptionType +" from "+sFeatureConfig); 		 
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnSetBillCycFreezCompleteFlag
	'Function Description : Set bill cycle freeze complete flag in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ujwala
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnSetBillCycFreezCompleteFlag(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{				
	            String sExpectedCheckValue;
				
	            //Initializing variables 
				String sBillCycle                     =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sExpectedAccountingDate        =    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				String sCheckValue	                  =    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();

				if(sCheckValue.equalsIgnoreCase("true"))
				{
					sExpectedCheckValue = "Y";
				} 
				else 
				{
					sExpectedCheckValue = "N";
				}
				
				FnUpdateValueInDb("Update CI_BILL_CYC_SCH SET FREEZE_COMPLETE_SW = '"+sExpectedCheckValue+"' WHERE BILL_CYC_CD = '"+sBillCycle+"' AND ACCOUNTING_DT = TO_DATE('"+sExpectedAccountingDate+"','MM-DD-YYYY')","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sGetText   = (String) FnGetDBColumnValue("SELECT FREEZE_COMPLETE_SW FROM CI_BILL_CYC_SCH WHERE BILL_CYC_CD = '"+sBillCycle+"' AND ACCOUNTING_DT = TO_DATE('"+sExpectedAccountingDate+"','MM-DD-YYYY')","FREEZE_COMPLETE_SW", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sExpectedCheckValue))
				{
					CF.FnTestCaseStatusReport("Pass", "Bill cycle for accounting date "+sExpectedAccountingDate+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update bill cycle for accounting date> "+sExpectedAccountingDate+" "+sGetText);
				}
			}				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnSetBillAfterDateOnBillableCharge
	'Function Description : Set bill cycle freeze complete flag in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ujwala
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnSetBillAfterDateOnBillableCharge(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{				
	            
				
	            //Initializing variables 
				String sBillableChargeId	=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sBillAfterDate		=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				FnUpdateValueInDb("UPDATE CI_BILL_CHG SET BILL_AFTER_DT = TO_DATE('"+sBillAfterDate+"','MM-DD-YYYY') WHERE BILLABLE_CHG_ID = '"+sBillableChargeId+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(BILL_AFTER_DT, 'MM-DD-YYYY') AS BILL_AFTER_DT FROM CI_BILL_CHG WHERE BILLABLE_CHG_ID = '"+sBillableChargeId+"'","BILL_AFTER_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sBillAfterDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Billable Chare for bill after date "+sBillAfterDate+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update Billable Chare for bill after date> "+sBillAfterDate+" "+sGetText);
				}
			}				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnSetendDateOnPersonToPersonRelationship
	'Function Description : Set End Date to the child Person in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ujwala
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnSetendDateOnPersonToPersonRelationship(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{	
				//Initializing variables 
				String sParentPersonId	=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sChildPersonId	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				String sEndDate			=    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				
				FnUpdateValueInDb("UPDATE CI_PER_PER SET END_DT = TO_DATE('"+sEndDate+"','MM-DD-YYYY') WHERE PER_ID1 = '"+sParentPersonId+"' AND PER_ID2 = '"+sChildPersonId+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(END_DT, 'MM-DD-YYYY') AS END_DT FROM CI_PER_PER WHERE PER_ID1 = '"+sParentPersonId+"' AND PER_ID2 = '"+sChildPersonId+"'","END_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sEndDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Person to Person for end date "+sEndDate+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update Person to Person for end date> "+sEndDate+" "+sGetText);
				}
			}				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnSetBillAfterDateOnAccount
	'Function Description : Set Bill After Date on Account through database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ujwala
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnSetBillAfterDateOnAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{				
	            
				
	            //Initializing variables 
				String sAccountId		=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sBillAfterDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				FnUpdateValueInDb("UPDATE CI_ACCT SET BILL_AFTER_DT = TO_DATE('"+sBillAfterDate+"','MM-DD-YYYY') WHERE ACCT_ID = '"+sAccountId+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(BILL_AFTER_DT, 'MM-DD-YYYY') AS BILL_AFTER_DT FROM CI_ACCT WHERE ACCT_ID = '"+sAccountId+"'","BILL_AFTER_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sBillAfterDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Account bill after date "+sBillAfterDate+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update Account for bill after date> "+sBillAfterDate+" "+sGetText);
				}
			}				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnSetAccountingCalendarForGLDivisionInDB
	'Function Description : Set bill cycle freeze complete flag in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ujwala
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnSetAccountingCalendarForGLDivisionInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{				
	            //Initializing variables 
				String sGlDivision                     =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sExpectedAccountingCal          =    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				
				FnUpdateValueInDb("Update CI_GL_DIVISION SET CALENDAR_ID = '"+sExpectedAccountingCal+"' WHERE GL_DIVISION = '"+sGlDivision+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sGetText   = (String) FnGetDBColumnValue("SELECT CALENDAR_ID FROM CI_GL_DIVISION WHERE GL_DIVISION = '"+sGlDivision+"'","CALENDAR_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sExpectedAccountingCal))
				{
					CF.FnTestCaseStatusReport("Pass", "Calendar ID "+sExpectedAccountingCal+" update successfull" +sGetText);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update Calendar ID> "+sExpectedAccountingCal+" "+sGetText);
				}
			}				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnChangeLogicalDate
	'Function Description : This function updates the logical date 
	'Input Parameters     : sLogicalDate   	-> Date to be Updated
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnChangeLogicalDate(String sLogicalDate) throws Exception
	{
		System.out.println("--FnChangeLogicalDate");
		
		String sRowCount;
		int iCount;
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sRowCount  = (String) FnGetDBColumnValue("select count(*) from CI_LOGICAL_DAY","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCount =  	Integer.parseInt(sRowCount);
				if (iCount>0)
				{
					FnSetValueInDb("Update CI_LOGICAL_DAY SET TODAYS_DT= TO_DATE('"+sLogicalDate+"','mm-dd-yyyy')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				    Thread.sleep(2000);
				    System.out.println(">------------Updated CI_LOGICAL_DAY------------<");
				    FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				    Thread.sleep(2000);
				}
				else
				{
					System.out.println(">------------Inserted in CI_LOGICAL_DAY 1------------<");			
				    FnSetValueInDb("Insert into CI_LOGICAL_DAY(TODAYS_DT) Values(TO_DATE('"+sLogicalDate+"','mm-dd-yyyy'))", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				    Thread.sleep(2000);
				    FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				    Thread.sleep(2000);
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Exception in Application Function ==> FnChangeLogicalDate");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentFromDB
	'Function Description : Verify Payment from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyPaymentFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify Payment from DB";	
				
				String sPayAmt,sPaymentId,sPaymentEventId,sAccountID;
				sAccountID= CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				sPayAmt= CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sPaymentId	=(String) FnGetDBColumnValue("SELECT PAY_ID from CI_PAY where ACCT_ID = '"+sAccountID+"' and PAY_AMT= '"+sPayAmt+"'","PAY_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(!sPaymentId.equalsIgnoreCase("NoValue"))
				{
					CF.FnTestCaseStatusReport("Pass"," Payment created as expected: Payment Id:"+sPaymentId);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail"," Payment not created.");
				}

				sPaymentEventId	=(String) FnGetDBColumnValue("select PAY_EVENT_ID from CI_PAY where ACCT_ID = '"+sAccountID+"' and PAY_AMT= '"+sPayAmt+"'","PAY_EVENT_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				CF.FnWriteCellValue(iStartingRow,4, sPaymentEventId, sSheetName, sWorkbook);
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetAlternateBillIdFromDB
	'Function Description : This function gets the Alternate Bill Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetAlternateBillIdFromDB(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnGetAlternateBillIdFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sBillId, sExpectedAltBillId, sTableName;
				
				sBillId					 =	 CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
				sExpectedAltBillId	     =   CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
				sTableName				 =   CF.FnGetCellValue(iStartingRow ,5, sSheetName, sWorkBook).toString().trim();
				
				//Verify entry in table ci_bill table
				String sGetText   = (String) FnGetDBColumnValue("SELECT ALT_BILL_ID FROM "+sTableName+" WHERE BILL_ID = '"+sBillId+"'","ALT_BILL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				sGetText = sGetText.replace("","NoValue").trim();
				System.out.println("ALT BILL ID ---------------" +sGetText);
				
				
				if(sGetText.equalsIgnoreCase(sExpectedAltBillId))
				{
					CF.FnTestCaseStatusReport("Pass", "Expected Value Matched with Actual Value----> Expected Value: "+sExpectedAltBillId+" And Actual Value: " +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Expected Value Matched with Actual Value----> Expected Value: "+sExpectedAltBillId+" And Actual Value: " +sGetText);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name      : FnChangeAccountBillCycleInDB
	'Function Description : This function updates the Account Bill Cycle 
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnChangeAccountBillCycleInDB(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnChangeAccountBillCycleInDB");
		String sRowCount, sAccountID,sBillCycle;
		int iCount;
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sAccountID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sBillCycle  = 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkBook).toString().trim();
				sRowCount   = 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_ACCT WHERE ACCT_ID IN ('"+sAccountID+"')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCount 		=  	Integer.parseInt(sRowCount);
				if(sBillCycle.equalsIgnoreCase("NoValue"))
					sBillCycle = " ";
				
				System.out.println("iCount============================"+iCount);
				if (iCount>0)
				{
					FnSetValueInDb("UPDATE CI_ACCT SET BILL_CYC_CD = '"+sBillCycle+"' WHERE ACCT_ID IN ('"+sAccountID+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					System.out.println(">------------Updated Bill Cycle------------<");
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnChangeAccountBillCycleInDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name      : FnChangeAccountDivisionInDB
	'Function Description : This function updates the division on account 
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnChangeAccountDivisionInDB(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnChangeAccountDivisionInDB");
		String sRowCount, sAccountID,sDivision;
		int iCount;
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sAccountID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sDivision  = 	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkBook).toString().trim();
				sRowCount   = 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_ACCT WHERE ACCT_ID = '"+sAccountID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCount 		=  	Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iCount);
				if (iCount>0)
				{
					FnSetValueInDb("UPDATE CI_ACCT SET CIS_DIVISION = '"+sDivision+"' WHERE ACCT_ID = '"+sAccountID+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					System.out.println(">------------Updated Division------------<");
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnChangeAccountBillCycleInDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetBillIDFormAccount
	'Function Description : To Get Batch Number From Database
	'Input Parameters     : sAccountID.
	'Output Parameters    : sBatchNo
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnGetBillIDFromAccount (int iStartingRow , String sSheetName, String sWorkBook) throws Exception
	{
		BaseTest.eFlgFound = "true";
		String sBillID="";
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				System.out.println("FnGetBillIDFromAccount-->");
				 
				String  sAccountID = CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkBook).toString().trim(); 
				String  Date       = CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim(); 
				
				sBillID  = (String) FnGetDBColumnValue("SELECT Bill_ID FROM CI_BILL WHERE ACCT_ID ='"+sAccountID+"'AND BILL_DT=TO_DATE('"+Date+"','mm-dd-yyyy')","BILL_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println(sBillID);
				CF.FnWriteCellValue(iStartingRow,3, sBillID, sSheetName, sWorkBook);
				
			}
			
		}
		catch (Exception e) {
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
		return sBillID;
	}
	
	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetBatchNumberFromDBForInvoiceConstruct
	'Function Description : To Get Batch Number From Database
	'Input Parameters     : sAccountID.
	'Output Parameters    : sBatchNo
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnGetBatchNumberFromDBForInvoiceConstruct (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		BaseTest.eFlgFound ="true";
		String sBatchNo="";
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				System.out.println("FnGetToDoIdFromDB-->");
				
				String  sAccountID		= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim(); 
				String  BatchCode		= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim(); 

				String  sBatchNofromBatchTable	= (String) FnGetDBColumnValue("select max(Batch_nbr) from CI_BATCH_RUN where BATCH_CD ='"+BatchCode+"'","max(Batch_nbr)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("Batch No from Batch Run table is-->"+sBatchNofromBatchTable);
				
				String  sBatchNoFromTrialBillTable       = (String) FnGetDBColumnValue("select batch_run_nbr from CI_TRL_BILL where ACCT_ID = '"+sAccountID+"'"+"and batch_run_nbr in (select max(batch_run_nbr) from CI_TRL_BILL where acct_id='"+sAccountID+"')","BATCH_RUN_NBR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("Batch No from Trial bill table is-->"+sBatchNoFromTrialBillTable);

				if (sBatchNofromBatchTable.equals(sBatchNoFromTrialBillTable))
				{
					sBatchNo	=	sBatchNofromBatchTable;
					CF.FnWriteCellValue(iStartingRow,2, sBatchNo, sSheetName, sWorkBook);
					System.out.println("Batch No is-->"+sBatchNo);
				}
				else
				{
					String sBatchNumber	=	"0";
					CF.FnWriteCellValue(iStartingRow,2, sBatchNumber, sSheetName, sWorkBook);
					System.out.println("Batch No is-->"+sBatchNumber);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound ="false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
		return sBatchNo;
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnModifyBillPeriodInBillCycle
	'Function Description : To Verify Bill from DB
	'Input Parameters     : None
	'Output Parameters    : None
	'Created By           : Sanjeev Acharya
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnModifyBillPeriodInBillCycle(int iStartingRow,String sSheetName, String sWorkBook) throws Exception
	{
		BaseTest.eFlgFound="true";
		String flag = "false";
		try
		{
			if(BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription = "To Add or Delete Bill Period in Bill Cycle";
				
				String sAction,sBillCycleCode,sStartDt,sEndDt,sAcctDt,FreezeCompleteBoxFlag;
				
				sAction					=  CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkBook).toString().trim();
				sBillCycleCode			=  CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkBook).toString().trim();
				sStartDt				=  CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkBook).toString().trim();
				sEndDt                  =  CF.FnGetCellValue(iStartingRow, 4, sSheetName, sWorkBook).toString().trim();
				sAcctDt					=  CF.FnGetCellValue(iStartingRow, 5, sSheetName, sWorkBook).toString().trim();
				FreezeCompleteBoxFlag	=  CF.FnGetCellValue(iStartingRow, 6, sSheetName, sWorkBook).toString().trim();
				
				if(sAction.equalsIgnoreCase("ADD"))
				{
					FnSetValueInDb("INSERT INTO CI_BILL_CYC_SCH (BILL_CYC_CD,WIN_START_DT,WIN_END_DT,ACCOUNTING_DT,EST_DT,FREEZE_COMPLETE_SW,VERSION) VALUES('"+sBillCycleCode+"','"+sStartDt+"','"+sEndDt+"','"+sAcctDt+"','','"+FreezeCompleteBoxFlag+"','1')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				}
				else
				{
					FnSetValueInDb("DELETE FROM CI_BILL_CYC_SCH WHERE BILL_CYC_CD='"+sBillCycleCode+"' AND WIN_START_DT='"+sStartDt+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				}
			}
		}
		catch (Exception e)
		{
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
		return flag;
	}
	
	/*'######################################################################################
	'Function Name        : FnRemoveDivisionAlgorithmFromDB
	'Function Description : Remove algorithm for given division
	'Input Parameters  	  : iStartingRow to get the data related to Division and Algorithm	
	'Output Parameters    : Not Applicable
	'#######################################################################################*/	
	public void FnRemoveDivisionAlgorithmFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{
		System.out.println(">>>>>>>>>>--FnRemoveDivisionAlgorithmFromDB");
	
		try
		{	
			String sDivisionCode,sAlgorithm;
			
			sDivisionCode				=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
			sAlgorithm		        	=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
		    
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				FnSetValueInDb("DELETE FROM CI_CIS_DIV_ALG WHERE CIS_DIVISION = '"+sDivisionCode+"' AND ALG_CD = '"+sAlgorithm+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				String sGetText = 	(String) FnGetDBColumnValue("SELECT ALG_CD FROM CI_CIS_DIV_ALG WHERE CIS_DIVISION = '"+sDivisionCode+"' AND ALG_CD = '"+sAlgorithm+"'", "ALG_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(sGetText.equalsIgnoreCase("NoValue"))
				{
					CF.FnTestCaseStatusReport("Pass", "ALG_CD :"+sAlgorithm+" Removed Successfully into CI_CIS_DIV_ALG table");
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "ALG_CD :"+sAlgorithm+" Does not Remove from CI_CIS_DIV_ALG table");
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*'######################################################################################
	'Function Name        : FnRemoveDivisionAlgorithmFromDB
	'Function Description : Remove algorithm for given division
	'Input Parameters  	  : iStartingRow to get the data related to Division and Algorithm	
	'Output Parameters    : Not Applicable
	'#######################################################################################*/	
	public void FnUpdateDivisionAlgorithmFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{
		System.out.println(">>>>>>>>>>--FnUpdateDivisionAlgorithmFromDB");
	
		try
		{	
			String sDivisionCode,sDivAlgEntityFlg,sAlgorithm;
			
			sDivisionCode				=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
			sDivAlgEntityFlg			=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
			sAlgorithm		        	=	CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim();
		    
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				FnSetValueInDb("UPDATE CI_CIS_DIV_ALG SET ALG_CD = '"+sAlgorithm+"' WHERE CIS_DIVISION = '"+sDivisionCode+"' AND DIV_ALG_ENTITY_FLG = '"+sDivAlgEntityFlg+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				String sGetText = 	(String) FnGetDBColumnValue("SELECT ALG_CD FROM CI_CIS_DIV_ALG WHERE CIS_DIVISION = '"+sDivisionCode+"' AND DIV_ALG_ENTITY_FLG = '"+sDivAlgEntityFlg+"'", "ALG_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sGetText from  DB= "+sGetText);
				if(sGetText.equalsIgnoreCase(sAlgorithm))
				{
					CF.FnTestCaseStatusReport("Pass", "ALG_CD :"+sAlgorithm+" Updated Successfully into CI_CIS_DIV_ALG table");
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "ALG_CD :"+sAlgorithm+" Not able to update CI_CIS_DIV_ALG table");
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'######################################################################################
	'Function Name        : FnAddDivisionAlgorithmFromDB
	'Function Description : Add algorithm for given division
	'Input Parameters  	  : iStartingRow to get the data related to Division and Algorithm	
	'Output Parameters    : Not Applicable
	'#######################################################################################*/	
	public void FnAddDivisionAlgorithmFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{
		System.out.println(">>>>>>>>>>--FnAddDivisionAlgorithmFromDB");
	
		try
		{	
			String sDiv,sSqNum,sAlg,sVersion,sDivAlgEntFlg;
			
			sDiv			=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
			sSqNum			=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
			sAlg			=	CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim();
		    sVersion		=	CF.FnGetCellValue(iStartingRow, 4, sSheetName, sWorkbook).toString().trim();
		    sDivAlgEntFlg	=	CF.FnGetCellValue(iStartingRow, 5, sSheetName, sWorkbook).toString().trim();
			
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				FnSetValueInDb("INSERT INTO CI_CIS_DIV_ALG (CIS_DIVISION,SEQ_NUM,ALG_CD,VERSION,DIV_ALG_ENTITY_FLG,ENABLED_FLG,PPARM_INFOSTR_ALG_CD) VALUES ('"+sDiv+"','"+sSqNum+"','"+sAlg+"','"+sVersion+"','"+sDivAlgEntFlg+"',' ',' ')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				String sGetText = 	(String) FnGetDBColumnValue("SELECT ALG_CD FROM CI_CIS_DIV_ALG WHERE CIS_DIVISION = '"+sDiv+"' AND DIV_ALG_ENTITY_FLG = '"+sDivAlgEntFlg+"'", "ALG_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(!sGetText.equalsIgnoreCase("NoValue"))
				{
					CF.FnTestCaseStatusReport("Pass", "ALG_CD :"+sAlg+" Inserted Successfully into CI_CIS_DIV_ALG table");
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "ALG_CD :"+sAlg+" Does not Inserted into CI_CIS_DIV_ALG table");
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyBillAmount
	'Function Description : To verify Bill Amount on the accounts after running billing batches 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyBillAmount(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillAmount");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sAcctid, sBillAmt, sWinStartDt, sBillId, sQuery;
					
					sAcctid		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					sWinStartDt =	(String)CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook);
					
									
					if(!sWinStartDt.equalsIgnoreCase("NoValue"))
					{
						//Get Bill Id from CI_BILL Table for the billing in Pending Status
						sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID = '"+sAcctid+"' AND WIN_START_DT = TO_DATE('"+sWinStartDt+"','MM/DD/YYYY'","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println(sBillId);
						CF.FnWriteCellValue(sStartingRow,4, sBillId, sSheetName, sWorkbook);
						sQuery = "select sum(calc_amt) from ci_bseg_calc where bseg_id in (select bseg_id from ci_bseg where bill_id in (select bill_id from ci_bill where acct_id = "+sAcctid+" and win_start_dt = to_date('"+sWinStartDt+"','mm/dd/yyyy')))";
					}
					else
					{
						//Get Bill Id from CI_BILL Table for the billing in Pending Status
						sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID = '"+sAcctid+"' AND BILL_STAT_FLG = 'P'","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println(sBillId);
						CF.FnWriteCellValue(sStartingRow,4, sBillId, sSheetName, sWorkbook);
						sQuery = "select sum(calc_amt) from ci_bseg_calc where bseg_id in (select bseg_id from ci_bseg where bill_id = "+sBillId+")";
					}
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL"))
						{
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Account ID "+sAcctid);
					
						if (sbillAmount.trim().equalsIgnoreCase(sBillAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount for Account Id -> " + sAcctid + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount for Account Id -> " + sAcctid + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> No Bill found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillGeneration
	'Function Description : Verification of Regular/Trial Bill Generation
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillGeneration(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillGeneration");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountID,sExpBillCount,sRowCount,sBillId;
				int iExpBillCount,iRowCount;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Regular Bill Generation";
					//Verification of Regular Bill details on account
					System.out.println("Verify if the Regular Bill is generated");
					sAccountID		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillCount  	= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					iExpBillCount	=  	Integer.parseInt(sExpBillCount);

					//Verify count of Regular Bill generated
					sRowCount		= 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount		=  	Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);
					if (iRowCount==iExpBillCount)
					{
						sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"'","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println(sBillId);
						CF.FnWriteCellValue(iStartingRow,3, sBillId, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Regular Bill generated on the account "+sAccountID);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Regular Bill NOT generated on the account "+sAccountID);
					}
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Bill Generation";
					//Verification of Trial Bill details on account
					System.out.println("Verify if the Trial Bill is generated");

					sAccountID		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					iExpBillCount   = 	Integer.parseInt(sExpBillCount);

					//Verify count of Trial Bill generated
	   			 	sRowCount		=	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	   			 	iRowCount       =   Integer.parseInt(sRowCount);
	   			 	System.out.println("iCount============================"+iRowCount);
	   			 
	   			 	if (iRowCount==iExpBillCount)
	   			 	{
	   			 		sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountID+"'","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	   			 		System.out.println(sBillId);
	   			 		CF.FnWriteCellValue(iStartingRow,3, sBillId, sSheetName, sWorkbook);
	   			 		CF.FnTestCaseStatusReport("Pass","Trial Bill generated on the account "+sAccountID);
	   			 	}
	   			 	else 
	   			 	{
	   			 		CF.FnTestCaseStatusReport("Fail","Trial Bill NOT generated on the account "+sAccountID);
	   			 	}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillGeneration");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}

	/*'#######################################################################################################
	'Function Name        : FnVerifyBillSegment
	'Function Description : Verification of Regular/Trial Bill Segment Generation
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillSegment(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
    {
          System.out.println(">>>>>>>>>>--FnVerifyBillSegment");
          try 
          {
                 if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                 {
                       String sContractID,sExpBillSegmentCount,sRowCount,sBSegId,sStatus,sExpStatus;
                       int iExpBillSegmentCount,iRowCount;
                       
                        if(sBillType.equalsIgnoreCase("Regular"))
                       {
                              BaseTest.sTestDescription ="Verification of Regular Bill Segments generated";
                              //Verify count of Regular Bill Segments generated
                              sContractID          =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
                              sExpBillSegmentCount =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
                              iExpBillSegmentCount =   Integer.parseInt(sExpBillSegmentCount);

                              sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BSEG WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                              iRowCount            =   Integer.parseInt(sRowCount);
                       System.out.println("iCount============================"+iRowCount);
                              if (iRowCount==iExpBillSegmentCount)
                              {
                                    String [] sBillSegIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' ORDER BY BSEG_STAT_FLG","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                                    int   iCounter = 0;
                                    int sBillSegIDlen = sBillSegIDArr.length;
                                    for(int k=0;k<sBillSegIDlen;k++,iCounter++)
                                    {
                                           sBSegId = sBillSegIDArr[k];
                                           CF.FnWriteCellValue((iStartingRow+iCounter),3, sBSegId, sSheetName, sWorkbook);
                                           CF.FnTestCaseStatusReport("Pass","Regular Bill Segments Count matched on contract "+sContractID);
                                           sExpStatus = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
                                           if(!sExpStatus.equalsIgnoreCase("NoValue"))
                                           {
                                                  if(sExpStatus.equalsIgnoreCase("Incomplete"))
                                                        sExpStatus = "10";
                                                  if(sExpStatus.equalsIgnoreCase("Error"))
                                                        sExpStatus = "20";
                                                  if(sExpStatus.equalsIgnoreCase("Freezable"))
                                                        sExpStatus = "30";
                                                  if(sExpStatus.equalsIgnoreCase("Frozen"))
                                                        sExpStatus = "50";
                                                  if(sExpStatus.equalsIgnoreCase("Canceled"))
                                                        sExpStatus = "60";
                                                 
                                                 sStatus = (String) FnGetDBColumnValue("SELECT BSEG_STAT_FLG FROM CI_BSEG WHERE BSEG_ID = '"+sBSegId+"'ORDER BY BSEG_STAT_FLG","BSEG_STAT_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                                           
                                                 if (sStatus.equalsIgnoreCase(sExpStatus))
                                                 {
                                                        CF.FnTestCaseStatusReport("Pass","Regular Bill Segments Status matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
                                                 }
                                                 else 
                                                 {
                                                        CF.FnTestCaseStatusReport("Fail","Regular Bill Segments Status not matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
                                                 }
                                           }
                                    }
                              }
                              else 
                              {
                                     CF.FnTestCaseStatusReport("Fail","Regular Bill Segments Count NOT matched on contract "+sContractID);
                              }
                       }
                       
                        if(sBillType.equalsIgnoreCase("Trial"))
                       {
                              BaseTest.sTestDescription ="Verification of Trial Bill Segments generated";
                              //Verify count of Trial Bill Segments generated
                              sContractID                      =       (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
                               sExpBillSegmentCount      =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
                      iExpBillSegmentCount =   Integer.parseInt(sExpBillSegmentCount);
                          
                      //Verify count of Trial Bill generated
                      sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                      iRowCount            =      Integer.parseInt(sRowCount);
                      System.out.println("iCount============================"+iRowCount);
                      if (iRowCount==iExpBillSegmentCount)
                      {
                                    String [] sBillSegIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' ORDER BY BSEG_STAT_FLG","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                                    int   iCounter = 0;
                                    int sBillSegIDlen = sBillSegIDArr.length;
                                    for(int k=0;k<sBillSegIDlen;k++,iCounter++)
                                    {
                                           sBSegId = sBillSegIDArr[k];
                                           CF.FnWriteCellValue((iStartingRow+iCounter),3, sBSegId, sSheetName, sWorkbook);
                                           CF.FnTestCaseStatusReport("Pass","Trial Bill Segments Count matched on contract "+sContractID);
                                           
                                           sExpStatus = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
                                           if(!sExpStatus.equalsIgnoreCase("NoValue"))
                                           {
                                                  if(sExpStatus.equalsIgnoreCase("Incomplete"))
                                                        sExpStatus = "10";
                                                  if(sExpStatus.equalsIgnoreCase("Error"))
                                                        sExpStatus = "20";
                                                  if(sExpStatus.equalsIgnoreCase("Freezable"))
                                                        sExpStatus = "30";
                                                  if(sExpStatus.equalsIgnoreCase("Frozen"))
                                                        sExpStatus = "50";
                                                  if(sExpStatus.equalsIgnoreCase("Canceled"))
                                                        sExpStatus = "60";
                                                 
                                                 sStatus = (String) FnGetDBColumnValue("SELECT BSEG_STAT_FLG FROM CI_TRL_BSEG WHERE BSEG_ID = '"+sBSegId+"' ORDER BY BSEG_STAT_FLG","BSEG_STAT_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                                                 if (sStatus.equalsIgnoreCase(sExpStatus))
                                                 {
                                                        CF.FnTestCaseStatusReport("Pass","Trial Bill Segments Status matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
                                                 }
                                                 else 
                                                 {
                                                        CF.FnTestCaseStatusReport("Fail","Trial Bill Segments Status not matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
                                                  }
                                           }
                                    }
                              }
                      else 
                      {
                             CF.FnTestCaseStatusReport("Fail","Trial Bill Segments Count NOT matched on contract "+sContractID);
                      }
                       }
                 }
          }
          catch (Exception e) 
          {
                 System.out.println("Exception in Application Function ==> FnVerifyBillSegment");
                 e.printStackTrace();
                 BaseTest.eFlgFound = "false";
                 CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
          }
    }

	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillCalcAmt
	'Function Description : Verification of Regular/Trial Bill Calc amount
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillCalcAmt(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillCalcAmt");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpCalcAmt,sCalcAmt;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Regular Bill Calc Amount";
					sContractID          =      (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpCalcAmt          =      (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

					String [] sCalcAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT CALC_AMT FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY CALC_AMT","CALC_AMT" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ----"+sExpCalcAmt);

					sCalcAmt = (String) Arrays.toString(sCalcAmtArr);
					System.out.println("Actual Calc Amount = "+sCalcAmt);

					if (sCalcAmt.contains(sExpCalcAmt))
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","CALC_AMT ="+sCalcAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT NOT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","CALC_AMT "+sCalcAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
					}
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Bill Calc Amount";
					sContractID          =      (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpCalcAmt          =      (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

					String [] sCalcAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT CALC_AMT FROM CI_TRL_BSCALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY CALC_AMT","CALC_AMT" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ----"+sExpCalcAmt);

					sCalcAmt = (String) Arrays.toString(sCalcAmtArr);
					System.out.println("Actual Calc Amount = "+sCalcAmt);

					if (sCalcAmt.contains(sExpCalcAmt))
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","CALC_AMT ="+sCalcAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT NOT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","CALC_AMT "+sCalcAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillCalcAmt");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}		

	/*'#######################################################################################################
	'Function Name        : FnVerifyInvoiceConstruct
	'Function Description : Verification of Construct id, Usage id and price item for invoice and trial construct
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyInvoiceConstruct(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyInvoiceConstruct");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sConstructid,sExpConstructid,sUsageacctid,sExpUsageacctid,sPriceItem,sExpPriceItem,sPriceAssignmentID,sExpPriceAssignmentID;
				int iCounter,iConstructidlen,iUsageacctidlen,iPriceItemlen,iPriceAssignmentIDlen;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Invoice Construct";
					
					sContractID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					// Verify CONSTRUCT ID
					String [] sConstructidArr =  (String[]) FnGetDBColumnValueInArray("SELECT CONSTRUCT_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY CONSTRUCT_ID","CONSTRUCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
					iCounter = 0;
					iConstructidlen = sConstructidArr.length;
					System.out.println("Length of Array = "+iConstructidlen);
					
					for(int k=0;k<iConstructidlen;k++,iCounter++)
					{					
						if (sConstructidArr[k].contains(" "))
							sConstructid = "NoValue";
						else
							sConstructid = sConstructidArr[k];

						sExpConstructid = (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
						if (sConstructid.equalsIgnoreCase(sExpConstructid))
						{
							CF.FnTestCaseStatusReport("Pass","Construct id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Construct id not matched on contract "+sContractID);
						}
					}
					
					//Verify Usage Account ID
					String [] sUsageacctidArr =  (String[]) FnGetDBColumnValueInArray("SELECT USAGE_ACCT_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY USAGE_ACCT_ID","USAGE_ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iUsageacctidlen = sUsageacctidArr.length;
					for(int k=0;k<iUsageacctidlen;k++,iCounter++)
					{				
						if (sUsageacctidArr[k].contains(" "))
							sUsageacctid = "NoValue";
						else
							sUsageacctid = sUsageacctidArr[k];

						sExpUsageacctid = (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
						if (sUsageacctid.equalsIgnoreCase(sExpUsageacctid))
						{
							CF.FnTestCaseStatusReport("Pass","Usage account id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Usage account id not matched on contract "+sContractID);
						}
					}
					
					//Verify PRICE ITEM
					String [] sPriceItemArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICEITEM_CD FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY PRICEITEM_CD","PRICEITEM_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iPriceItemlen = sPriceItemArr.length;
					for(int k=0;k<iPriceItemlen;k++,iCounter++)
					{	
						if (sPriceItemArr[k]==null)
							sPriceItem = "NoValue";
						else					
						sPriceItem = sPriceItemArr[k];

						sExpPriceItem = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
						if (sPriceItem.trim().equalsIgnoreCase(sExpPriceItem))
						{
							CF.FnTestCaseStatusReport("Pass","Price item matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Price item  not matched on contract "+sContractID);
						}
					}
					
					// Verify Price Assignment ID
					
					if(checkPriceAssignmentId)
					{	
					
						String [] sPriceAssignmentIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICE_ASGN_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY PRICE_ASGN_ID","PRICE_ASGN_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						
						iCounter = 0;
						iPriceAssignmentIDlen = sPriceAssignmentIDArr.length;
						System.out.println("Length of Array = "+iPriceAssignmentIDlen);
						
						for(int k=0;k<iPriceAssignmentIDlen;k++,iCounter++)
						{					
							if (sPriceAssignmentIDArr[k]==null)
								sPriceAssignmentID = "NoValue";
							else
								sPriceAssignmentID = sPriceAssignmentIDArr[k];
	
							sExpPriceAssignmentID = (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
							if (sPriceAssignmentID.equalsIgnoreCase(sExpPriceAssignmentID))
							{
								CF.FnTestCaseStatusReport("Pass","Price Assignment ID matched on contract "+sContractID);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Price Assignment ID not matched on contract "+sContractID);
							}
						}
					}		
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Construct";

					sContractID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					// Verify CONSTRUCT ID
					String [] sConstructidArr =  (String[]) FnGetDBColumnValueInArray("SELECT CONSTRUCT_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY CONSTRUCT_ID","CONSTRUCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iConstructidlen = sConstructidArr.length;
					for(int k=0;k<iConstructidlen;k++,iCounter++)
					{		
						if (sConstructidArr[k].contains(" "))
							sConstructid = "NoValue";
						else
							sConstructid = sConstructidArr[k];

						sExpConstructid = (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
						if (sConstructid.equalsIgnoreCase(sExpConstructid))
						{
							CF.FnTestCaseStatusReport("Pass","Construct id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Construct id not matched on contract "+sContractID);
						}
					}
					
					//Verify Usage Account ID
					String [] sUsageacctidArr =  (String[]) FnGetDBColumnValueInArray("SELECT USAGE_ACCT_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY USAGE_ACCT_ID","USAGE_ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iUsageacctidlen = sUsageacctidArr.length;
					for(int k=0;k<iUsageacctidlen;k++,iCounter++)
					{					
						if (sUsageacctidArr[k].contains(" "))
							sUsageacctid = "NoValue";
						else
							sUsageacctid = sUsageacctidArr[k];

						sExpUsageacctid = (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
						if (sUsageacctid.equalsIgnoreCase(sExpUsageacctid))
						{
							CF.FnTestCaseStatusReport("Pass","Usage account id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Usage account id not matched on contract "+sContractID);
						}
					}
					
					//Verify PRICE ITEM
					String [] sPriceItemArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICEITEM_CD FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY PRICEITEM_CD","PRICEITEM_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iPriceItemlen = sPriceItemArr.length;
					for(int k=0;k<iPriceItemlen;k++,iCounter++)
					{		
						if (sPriceItemArr[k]==null)
							sPriceItem = "NoValue";
						else	
						sPriceItem = sPriceItemArr[k];

						sExpPriceItem = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
						if (sPriceItem.trim().equalsIgnoreCase(sExpPriceItem))
						{
							CF.FnTestCaseStatusReport("Pass","Price item matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Price item  not matched on contract "+sContractID);
						}
					}
					
					if(checkPriceAssignmentId)
					{
						// Verify Price Assignment ID
						String [] sPriceAssignmentIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICE_ASGN_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"') ORDER BY PRICE_ASGN_ID","PRICE_ASGN_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
						iCounter = 0;
						iPriceAssignmentIDlen = sPriceAssignmentIDArr.length;
						System.out.println("Length of Array = "+iPriceAssignmentIDlen);
						
						for(int k=0;k<iPriceAssignmentIDlen;k++,iCounter++)
						{					
							if (sPriceAssignmentIDArr[k]==null)
								sPriceAssignmentID = "NoValue";
							else
								sPriceAssignmentID = sPriceAssignmentIDArr[k];

							sExpPriceAssignmentID = (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
							if (sPriceAssignmentID.equalsIgnoreCase(sExpPriceAssignmentID))
							{
								CF.FnTestCaseStatusReport("Pass","Price Assignment ID matched on contract "+sContractID);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Price Assignment ID not matched on contract "+sContractID);
							}
						}
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyInvoiceConstruct");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyFTDetails
	'Function Description : Verification of Regular/Trial Bill FT Details
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyFTDetails(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyFTDetails");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpFTCount,sRowCount,sFtId,sExpDstId,sExpFTAmount,sDstID,sFTAmt;
				int iExpFTCount,iRowCount,iCounter;
				
					BaseTest.sTestDescription ="Verification of Regular Bill FT details";
					//Get FT_ID from each contracts
					sContractID				=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpFTCount =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					iExpFTCount  =   Integer.parseInt(sExpFTCount);

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_FT WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpFTCount)
					{
						String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"' ORDER BY FT_ID","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sFTIDlen = sFTIDArr.length;
						for(int k=0;k<sFTIDlen;k++,iCounter++)
						{					
							sFtId = sFTIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sFtId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","FT's Count matched on contract "+sContractID);
						}

						//Verify Distribution Code
						sExpDstId			=	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
						String [] sDstIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT DST_ID FROM CI_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"') ORDER BY DST_ID","DST_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected DST ID ----"+sExpDstId);
						sDstID = (String) Arrays.toString(sDstIDArr);
						System.out.println("Actual DST ID ----"+sDstID);

						if (sDstID.contains(sExpDstId))
						{
							CF.FnTestCaseStatusReport("Pass","DST_ID ="+sDstID.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","DST_ID ="+sDstID.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
						}

						//Verify FT amount
						sExpFTAmount		=	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
						String [] sFTAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT AMOUNT FROM CI_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"') ORDER BY AMOUNT","AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected FT Amount ---- "+sExpFTAmount);
						sFTAmt = (String) Arrays.toString(sFTAmtArr);
						System.out.println("Actual FT Amount ---- "+sFTAmt);

						if (sFTAmt.contains(sExpFTAmount))
						{
							CF.FnTestCaseStatusReport("Pass","FT_AMT ="+sFTAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","FT_AMT ="+sFTAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","FT's Count NOT matched on contract "+sContractID);
					}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyFTDetails");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillGenerationByBillDate
	'Function Description : Verification of Regular/Trial Bill Generation using Bill date
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillGenerationByBillDate(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillGenerationByBillDate");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountID,sExpBillCount,sRowCount,sBillId,sBillDt,sTrlBillDesc;
				int iExpBillCount,iRowCount;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Regular Bill Generation";
					//Verification of Regular Bill details on account
					System.out.println("Verify if the Regular Bill is generated");
					sAccountID		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillCount  	= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillDt  		= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
					iExpBillCount	=  	Integer.parseInt(sExpBillCount);

					//Verify count of Regular Bill generated
					sRowCount		= 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"' AND BILL_DT = TO_DATE('"+sBillDt+"','MM-DD-YYYY')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount		=  	Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);
					if (iRowCount==iExpBillCount)
					{
						sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"' AND BILL_DT = TO_DATE('"+sBillDt+"','MM-DD-YYYY')","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println(sBillId);
						CF.FnWriteCellValue(iStartingRow,3, sBillId, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Regular Bill generated on the account "+sAccountID);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Regular Bill NOT generated on the account "+sAccountID);
					}
				}
				
				if(sBillType.equalsIgnoreCase("Pending"))
				{
					BaseTest.sTestDescription ="Verification of Regular Pending Bill Generation";
					//Verification of Regular Pending Bill details on account
					System.out.println("Verify if the Regular Pending Bill is generated");
					sAccountID		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillCount  	= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillDt  		= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
					iExpBillCount	=  	Integer.parseInt(sExpBillCount);

					//Verify count of Regular Bill generated
					sRowCount		= 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"' AND WIN_START_DT = TO_DATE('"+sBillDt+"','MM-DD-YYYY')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount		=  	Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);
					if (iRowCount==iExpBillCount)
					{
						sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID = '"+sAccountID+"' AND WIN_START_DT = TO_DATE('"+sBillDt+"','MM-DD-YYYY')","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println(sBillId);
						CF.FnWriteCellValue(iStartingRow,3, sBillId, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Regular Pending Bill generated on the account "+sAccountID);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Regular Pending Bill NOT generated on the account "+sAccountID);
					}
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Bill Generation";
					//Verification of Trial Bill details on account
					System.out.println("Verify if the Trial Bill is generated");

					sAccountID		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sTrlBillDesc  	= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
					iExpBillCount   = 	Integer.parseInt(sExpBillCount);

					//Verify count of Trial Bill generated
	   			 	sRowCount		=	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountID+"'AND BILL_DESCR = '"+sTrlBillDesc+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	   			 	iRowCount       =   Integer.parseInt(sRowCount);
	   			 	System.out.println("iCount============================"+iRowCount);
	   			 
	   			 	if (iRowCount==iExpBillCount)
	   			 	{
	   			 		sBillId		=	(String) FnGetDBColumnValue("SELECT BILL_ID FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountID+"'AND BILL_DESCR = '"+sTrlBillDesc+"'","BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	   			 		System.out.println(sBillId);
	   			 		CF.FnWriteCellValue(iStartingRow,3, sBillId, sSheetName, sWorkbook);
	   			 		CF.FnTestCaseStatusReport("Pass","Trial Bill generated on the account "+sAccountID);
	   			 	}
	   			 	else 
	   			 	{
	   			 		CF.FnTestCaseStatusReport("Fail","Trial Bill NOT generated on the account "+sAccountID);
	   			 	}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillGenerationByBillDate");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillSegmentByBillID
	'Function Description : Verification of Regular/Trial Bill Segment Generation using Bill ID
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillSegmentByBillID(int iStartingRow,String sSheetName, String sWorkbook,String sBillType) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillSegmentByBillID");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpBillSegmentCount,sRowCount,sBSegId,sStatus,sExpStatus,sBillId;
				int iExpBillSegmentCount,iRowCount;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Regular Bill Segments generated";
					//Verify count of Regular Bill Segments generated
					sContractID          =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpBillSegmentCount =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillId 			 =   (String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
					System.out.println("Bill ID ---->"+sBillId);
					iExpBillSegmentCount =   Integer.parseInt(sExpBillSegmentCount);

					sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BSEG WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =   Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);
					if (iRowCount==iExpBillSegmentCount)
					{
						String [] sBillSegIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"' ORDER BY BSEG_ID","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						int   iCounter = 0;
						int sBillSegIDlen = sBillSegIDArr.length;
						for(int k=0;k<sBillSegIDlen;k++,iCounter++)
						{
							sBSegId = sBillSegIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sBSegId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","Regular Bill Segments Count matched on contract "+sContractID);
							sExpStatus = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
							if(!sExpStatus.equalsIgnoreCase("NoValue"))
							{
								if(sExpStatus.equalsIgnoreCase("Incomplete"))
									sExpStatus = "10";
								if(sExpStatus.equalsIgnoreCase("Error"))
									sExpStatus = "20";
								if(sExpStatus.equalsIgnoreCase("Freezable"))
									sExpStatus = "30";
								if(sExpStatus.equalsIgnoreCase("Frozen"))
									sExpStatus = "50";
								if(sExpStatus.equalsIgnoreCase("Canceled"))
									sExpStatus = "60";
								
								sStatus = (String) FnGetDBColumnValue("SELECT BSEG_STAT_FLG FROM CI_BSEG WHERE BSEG_ID = '"+sBSegId+"'ORDER BY BSEG_STAT_FLG","BSEG_STAT_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
							
								if (sStatus.equalsIgnoreCase(sExpStatus))
								{
									CF.FnTestCaseStatusReport("Pass","Regular Bill Segments Status matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
								}
								else 
								{
									CF.FnTestCaseStatusReport("Fail","Regular Bill Segments Status not matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
								}
							}
						}
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Regular Bill Segments Count NOT matched on contract "+sContractID);
					}
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Bill Segments generated";
					//Verify count of Trial Bill Segments generated
					sContractID				=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
	   			 	sExpBillSegmentCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
	   			 	sBillId 			 	=   (String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
		            iExpBillSegmentCount	=   Integer.parseInt(sExpBillSegmentCount);
		                
		            //Verify count of Trial Bill generated
		            sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
		            iRowCount            =      Integer.parseInt(sRowCount);
		            System.out.println("iCount============================"+iRowCount);
		            if (iRowCount==iExpBillSegmentCount)
		            {
						String [] sBillSegIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"' ORDER BY BSEG_ID","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						int   iCounter = 0;
						int sBillSegIDlen = sBillSegIDArr.length;
						for(int k=0;k<sBillSegIDlen;k++,iCounter++)
						{
							sBSegId = sBillSegIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sBSegId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","Trial Bill Segments Count matched on contract "+sContractID);
							
							sExpStatus = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
							if(!sExpStatus.equalsIgnoreCase("NoValue"))
							{
								if(sExpStatus.equalsIgnoreCase("Incomplete"))
									sExpStatus = "10";
								if(sExpStatus.equalsIgnoreCase("Error"))
									sExpStatus = "20";
								if(sExpStatus.equalsIgnoreCase("Freezable"))
									sExpStatus = "30";
								if(sExpStatus.equalsIgnoreCase("Frozen"))
									sExpStatus = "50";
								if(sExpStatus.equalsIgnoreCase("Canceled"))
									sExpStatus = "60";
								
								sStatus = (String) FnGetDBColumnValue("SELECT BSEG_STAT_FLG FROM CI_TRL_BSEG WHERE BSEG_ID = '"+sBSegId+"'ORDER BY BSEG_STAT_FLG","BSEG_STAT_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
								if (sStatus.equalsIgnoreCase(sExpStatus))
								{
									CF.FnTestCaseStatusReport("Pass","Trial Bill Segments Status matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
								}
								else 
								{
									CF.FnTestCaseStatusReport("Fail","Trial Bill Segments Status not matched "+sBSegId+ " Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
								}
							}
						}
					}
		            else 
		            {
		            	CF.FnTestCaseStatusReport("Fail","Trial Bill Segments Count NOT matched on contract "+sContractID);
	                }
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillSegmentByBillID");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillCalcAmtByBillID
	'Function Description : Verification of Regular/Trial Bill Calc amount using Bill ID
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyBillCalcAmtByBillID(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillCalcAmtByBillID");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpCalcAmt,sCalcAmt,sBillId;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Regular Bill Calc Amount";
					sContractID          =      (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpCalcAmt          =      (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillId 	         =      (String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
					System.out.println("Bill ID ---->"+sBillId);
					String [] sCalcAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT CALC_AMT FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY CALC_AMT","CALC_AMT" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ----"+sExpCalcAmt);

					sCalcAmt = (String) Arrays.toString(sCalcAmtArr);
					System.out.println("Actual Calc Amount = "+sCalcAmt);

					if (sCalcAmt.contains(sExpCalcAmt))
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","CALC_AMT ="+sCalcAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT NOT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","CALC_AMT "+sCalcAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
					}  
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Bill Calc Amount";
					sContractID          =      (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpCalcAmt          =      (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillId 	         =      (String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();

					String [] sCalcAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT CALC_AMT FROM CI_TRL_BSCALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY CALC_AMT","CALC_AMT" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ----"+sExpCalcAmt);

					sCalcAmt = (String) Arrays.toString(sCalcAmtArr);
					System.out.println("Actual Calc Amount = "+sCalcAmt);

					if (sCalcAmt.contains(sExpCalcAmt))
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","CALC_AMT ="+sCalcAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow,3, "CALC_AMT NOT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","CALC_AMT "+sCalcAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
					}  
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillCalcAmtByBillID");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}		
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyInvoiceConstructByBillID
	'Function Description : Verification of Construct id, Usage id and price item for invoice and trial construct using Bill ID
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyInvoiceConstructByBillID(int iStartingRow,String sSheetName, String sWorkbook,String sBillType) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyInvoiceConstructByBillID");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sConstructid,sExpConstructid,sUsageacctid,sExpUsageacctid,sPriceItem,sExpPriceItem,sPriceAssignmentID,sExpPriceAssignmentID,sBillId;
				int iCounter,iConstructidlen,iUsageacctidlen,iPriceItemlen,iPriceAssignmentIDlen;
				
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Invoice Construct";
					
					sContractID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sBillId		=	(String)CF.FnGetCellValue(iStartingRow,6,sSheetName, sWorkbook).toString().trim();
					System.out.println("Bill ID ---->"+sBillId);
					// Verify CONSTRUCT ID
					String [] sConstructidArr =  (String[]) FnGetDBColumnValueInArray("SELECT CONSTRUCT_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY CONSTRUCT_ID","CONSTRUCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
					iCounter = 0;
					iConstructidlen = sConstructidArr.length;
					System.out.println("Length of Array = "+iConstructidlen);
					
					for(int k=0;k<iConstructidlen;k++,iCounter++)
					{					
						if (sConstructidArr[k].contains(" "))
							sConstructid = "NoValue";
						else
							sConstructid = sConstructidArr[k];

						sExpConstructid = (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
						if (sConstructid.equalsIgnoreCase(sExpConstructid))
						{
							CF.FnTestCaseStatusReport("Pass","Construct id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Construct id not matched on contract "+sContractID);
						}
					}
					
					//Verify Usage Account ID
					String [] sUsageacctidArr =  (String[]) FnGetDBColumnValueInArray("SELECT USAGE_ACCT_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY USAGE_ACCT_ID","USAGE_ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iUsageacctidlen = sUsageacctidArr.length;
					for(int k=0;k<iUsageacctidlen;k++,iCounter++)
					{				
						if (sUsageacctidArr[k].contains(" "))
							sUsageacctid = "NoValue";
						else
							sUsageacctid = sUsageacctidArr[k];

						sExpUsageacctid = (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
						if (sUsageacctid.equalsIgnoreCase(sExpUsageacctid))
						{
							CF.FnTestCaseStatusReport("Pass","Usage account id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Usage account id not matched on contract "+sContractID);
						}
					}
					
					//Verify PRICE ITEM
					String [] sPriceItemArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICEITEM_CD FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY PRICEITEM_CD","PRICEITEM_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iPriceItemlen = sPriceItemArr.length;
					for(int k=0;k<iPriceItemlen;k++,iCounter++)
					{		
						if (sPriceItemArr[k]==null)
							sPriceItem = "NoValue";
						else
						sPriceItem = sPriceItemArr[k];

						sExpPriceItem = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
						if (sPriceItem.trim().equalsIgnoreCase(sExpPriceItem))
						{
							CF.FnTestCaseStatusReport("Pass","Price item matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Price item  not matched on contract "+sContractID);
						}
					}
					
					//To verify or nat PriceAssignment Id
					if(checkPriceAssignmentId)
					{	
					// Verify Price Assignment ID
					String [] sPriceAssignmentIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICE_ASGN_ID FROM CI_BSEG_EXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY PRICE_ASGN_ID","PRICE_ASGN_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
					iCounter = 0;
					iPriceAssignmentIDlen = sPriceAssignmentIDArr.length;
					System.out.println("Length of Array = "+iPriceAssignmentIDlen);
					
					for(int k=0;k<iPriceAssignmentIDlen;k++,iCounter++)
					{					
						if (sPriceAssignmentIDArr[k]==null)
							sPriceAssignmentID = "NoValue";
						else
							sPriceAssignmentID = sPriceAssignmentIDArr[k];

						sExpPriceAssignmentID = (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
						if (sPriceAssignmentID.equalsIgnoreCase(sExpPriceAssignmentID))
						{
							CF.FnTestCaseStatusReport("Pass","Price Assignment ID matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Price Assignment ID not matched on contract "+sContractID);
							}
						}
					}
				}
				
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Trial Construct";

					sContractID	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sBillId		=	(String)CF.FnGetCellValue(iStartingRow,6,sSheetName, sWorkbook).toString().trim();
					// Verify CONSTRUCT ID
					String [] sConstructidArr =  (String[]) FnGetDBColumnValueInArray("SELECT CONSTRUCT_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY CONSTRUCT_ID","CONSTRUCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iConstructidlen = sConstructidArr.length;
					for(int k=0;k<iConstructidlen;k++,iCounter++)
					{		
						if (sConstructidArr[k].contains(" "))
							sConstructid = "NoValue";
						else
							sConstructid = sConstructidArr[k];

						sExpConstructid = (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
						if (sConstructid.equalsIgnoreCase(sExpConstructid))
						{
							CF.FnTestCaseStatusReport("Pass","Construct id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Construct id not matched on contract "+sContractID);
						}
					}
					
					//Verify Usage Account ID
					String [] sUsageacctidArr =  (String[]) FnGetDBColumnValueInArray("SELECT USAGE_ACCT_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY USAGE_ACCT_ID","USAGE_ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iUsageacctidlen = sUsageacctidArr.length;
					for(int k=0;k<iUsageacctidlen;k++,iCounter++)
					{					
						if (sUsageacctidArr[k].contains(" "))
							sUsageacctid = "NoValue";
						else
							sUsageacctid = sUsageacctidArr[k];

						sExpUsageacctid = (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
						if (sUsageacctid.equalsIgnoreCase(sExpUsageacctid))
						{
							CF.FnTestCaseStatusReport("Pass","Usage account id matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Usage account id not matched on contract "+sContractID);
						}
					}
					
					//Verify PRICE ITEM
					String [] sPriceItemArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICEITEM_CD FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY PRICEITEM_CD","PRICEITEM_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iPriceItemlen = sPriceItemArr.length;
					for(int k=0;k<iPriceItemlen;k++,iCounter++)
					{		
						if (sPriceItemArr[k]==null)
							sPriceItem = "NoValue";
						else
						sPriceItem = sPriceItemArr[k];

						sExpPriceItem = (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
						if (sPriceItem.trim().equalsIgnoreCase(sExpPriceItem))
						{
							CF.FnTestCaseStatusReport("Pass","Price item matched on contract "+sContractID);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Price item  not matched on contract "+sContractID);
						}
					}
					
					//To verify or not PriceAssignment Id
					if(checkPriceAssignmentId)
					{	
						// Verify Price Assignment ID
						String [] sPriceAssignmentIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT PRICE_ASGN_ID FROM CI_TRL_BSEXT WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_TRL_BSEG WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"') ORDER BY PRICE_ASGN_ID","PRICE_ASGN_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
						iCounter = 0;
						iPriceAssignmentIDlen = sPriceAssignmentIDArr.length;
						System.out.println("Length of Array = "+iPriceAssignmentIDlen);
					
						for(int k=0;k<iPriceAssignmentIDlen;k++,iCounter++)
						{					
							if (sPriceAssignmentIDArr[k]==null)
								sPriceAssignmentID = "NoValue";
							else
								sPriceAssignmentID = sPriceAssignmentIDArr[k];

							sExpPriceAssignmentID = (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
							if (sPriceAssignmentID.equalsIgnoreCase(sExpPriceAssignmentID))
							{
								CF.FnTestCaseStatusReport("Pass","Price Assignment ID matched on contract "+sContractID);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Price Assignment ID not matched on contract "+sContractID);
							}
						}
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyInvoiceConstructByBillID");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyFTDetailsByBillID
	'Function Description : Verification of Regular/Trial Bill FT Details using Bill ID
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyFTDetailsByBillID(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyFTDetailsByBillID");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpFTCount,sRowCount,sFtId,sExpDstId,sExpFTAmount,sDstID,sFTAmt,sBillId;
				int iExpFTCount,iRowCount,iCounter;
				
					BaseTest.sTestDescription ="Verification of Regular Bill FT details";
					//Get FT_ID from each contracts
					sContractID		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpFTCount 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					sBillId 		=   (String)CF.FnGetCellValue(iStartingRow,6,sSheetName, sWorkbook).toString().trim();
					System.out.println("Bill ID ---->"+sBillId);
					iExpFTCount  	=   Integer.parseInt(sExpFTCount);

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_FT WHERE SA_ID = '"+sContractID+"' AND BILL_ID = '"+sBillId+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpFTCount)
					{
						String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"' ORDER BY FT_ID","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sFTIDlen = sFTIDArr.length;
						for(int k=0;k<sFTIDlen;k++,iCounter++)
						{					
							sFtId = sFTIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sFtId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","FT's Count matched on contract "+sContractID);
						}

						//Verify Distribution Code
						sExpDstId			=	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
						String [] sDstIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT DST_ID FROM CI_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"') ORDER BY DST_ID","DST_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected DST ID ----"+sExpDstId);
						sDstID = (String) Arrays.toString(sDstIDArr);
						System.out.println("Actual DST ID ----"+sDstID);

						if (sDstID.contains(sExpDstId))
						{
							CF.FnTestCaseStatusReport("Pass","DST_ID ="+sDstID+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","DST_ID ="+sDstID+" NOT matched on contract "+sContractID+" for Regular Bill");
						}

						//Verify FT amount
						sExpFTAmount		=	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
						String [] sFTAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT AMOUNT FROM CI_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"'AND BILL_ID = '"+sBillId+"') ORDER BY AMOUNT","AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected FT Amount ---- "+sExpFTAmount);
						sFTAmt = (String) Arrays.toString(sFTAmtArr);
						System.out.println("Actual FT Amount ---- "+sFTAmt);

						if (sFTAmt.contains(sExpFTAmount))
						{
							CF.FnTestCaseStatusReport("Pass","FT_AMT ="+sFTAmt+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","FT_AMT ="+sFTAmt+" NOT matched on contract "+sContractID+" for Regular Bill");
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","FT's Count NOT matched on contract "+sContractID);
					}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyFTDetailsByBillID");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyAdjustments
	'Function Description : Verification of Adjustment
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	
	'#########################################################################################################*/
	public void FnVerifyAdjustments(int iStartingRow,String sSheetName, String sWorkbook,String sBillType ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyAdjustments");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sAdjAMT,sExpAmount;
					
		
				if(sBillType.equalsIgnoreCase("Trial"))
				{
					BaseTest.sTestDescription ="Verification of Adjustments";
					//VerifyAdjustment
					sContractID          =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpAmount  = CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
						
					String [] sAdjustmentArr =  (String[]) FnGetDBColumnValueInArray("SELECT ADJ_AMT FROM CI_ADJ WHERE SA_ID = '"+sContractID+"' ORDER BY ADJ_AMT","ADJ_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ---->"+sExpAmount);				
						
					sAdjAMT = (String) Arrays.toString(sAdjustmentArr);
					System.out.println("Actual Adj Amount = "+sAdjAMT);
						
					if (sAdjAMT.contains(sExpAmount))
					{
						CF.FnWriteCellValue(iStartingRow,3, "ADJ_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","ADJ_AMT ="+sAdjAMT.replace(",", "")+" matched on contract "+sContractID+" for Trial Bill");
					}
					else 
					{
						CF.FnWriteCellValue(iStartingRow,3, "ADJ_AMT NotMatched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","ADJ_AMT ="+sAdjAMT.replace(",", "")+" matched on contract "+sContractID+" for Trial Bill");
					}
				}
					
				if(sBillType.equalsIgnoreCase("Regular"))
				{
					BaseTest.sTestDescription ="Verification of Adjustments";
					//VerifyAdjustment
					sContractID          =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpAmount  = CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
					
					String [] sAdjustmentArr =  (String[]) FnGetDBColumnValueInArray("SELECT ADJ_AMT FROM CI_ADJ WHERE SA_ID = '"+sContractID+"' ORDER BY ADJ_AMT","ADJ_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("EXpected amount ----"+sExpAmount);
						
					sAdjAMT = (String) Arrays.toString(sAdjustmentArr);
					System.out.println("Actual Adj Amount = "+sAdjAMT);
						
					if (sAdjAMT.contains(sExpAmount))
					{
						CF.FnWriteCellValue(iStartingRow,3, "ADJ_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","ADJ_AMT ="+sAdjAMT.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
					else 
					{
						CF.FnWriteCellValue(iStartingRow,3, "ADJ_AMT Matched", sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail","ADJ_AMT ="+sAdjAMT.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
					}
				}
			}		
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyOffSetAdjustments
	'Function Description : Verification of Offset Adjustments generated after Offset Submit/Unapply
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyOffSetAdjustments(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyOffSetAdjustments");
		try 
		{
			String sQuery1;
			String sOffSetId,sOffSetDtlId,sOffSetAdjtId,sExpFrmBillId,sExpToBillId,sExpOffsetAmt,sOffSetFrmBillId,sOffSetToBillId,sOffSetAmt,sRowCount,sCountFlg = "F";
			String [] sOffSetDtlDArr,sOffSetAdjtIdDArr,sOffSetFrmBillIdArr,sOffSetToBillIdArr,sOffSetAmountArr;
			
			int iCounter,iOffSetDtlIdlen,iOffSetAdjtIdlen,iOffSetFrmBillIdlen,iOffSetToBillIdlen,iOffSetAmtlen;
			
			sOffSetId	=   (String)CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
			sRowCount  	=	(String)CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT";
			
			sCountFlg = FnGetTxnRowCount(sRowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
			
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				//Get OffSet Details Ids
				sOffSetDtlDArr =  (String[]) FnGetDBColumnValueInArray("SELECT O.OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT","OFFSET_DTL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iOffSetDtlIdlen = sOffSetDtlDArr.length;
				System.out.println("Length of Array = "+iOffSetDtlIdlen);
				
				for(int k=0;k<iOffSetDtlIdlen;k++,iCounter++)
				{					
					sOffSetDtlId = sOffSetDtlDArr[k];
					CF.FnWriteCellValue(iStartingRow+iCounter, 3, sOffSetDtlId, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Offset Detail Id present in C1_OFFSET_REQ_DTLS "+sOffSetDtlDArr[k]);
				}
				
				//Get Adjustment Ids
				sOffSetAdjtIdDArr =  (String[]) FnGetDBColumnValueInArray("SELECT A.XFER_ADJ_ID FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT","XFER_ADJ_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iOffSetAdjtIdlen = sOffSetAdjtIdDArr.length;
				System.out.println("Length of Array = "+iOffSetAdjtIdlen);
				
				for(int k=0;k<iOffSetAdjtIdlen;k++,iCounter++)
				{					
					sOffSetAdjtId = sOffSetAdjtIdDArr[k];
					CF.FnWriteCellValue(iStartingRow+iCounter, 4, sOffSetAdjtId, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Offset Adjustment present in C1_OFFSET_REQ_ADJ "+sOffSetAdjtId);
				}
				
				//Get From Bill Id
				sOffSetFrmBillIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT A.FROM_BILL_ID FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT","FROM_BILL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iOffSetFrmBillIdlen = sOffSetFrmBillIdArr.length;
				System.out.println("Length of Array = "+iOffSetFrmBillIdlen);
				
				for(int k=0;k<iOffSetFrmBillIdlen;k++,iCounter++)
				{					
					sOffSetFrmBillId = sOffSetFrmBillIdArr[k];
					sExpFrmBillId	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
					if(sExpFrmBillId.equalsIgnoreCase(sOffSetFrmBillId))
						CF.FnTestCaseStatusReport("Pass","From Bill Id matched C1_OFFSET_REQ_ADJ "+sOffSetFrmBillId);
					else
						CF.FnTestCaseStatusReport("Fail","From Bill Id NOT matched C1_OFFSET_REQ_ADJ "+sOffSetFrmBillId);
				}
				
				//Get To Bill Id
				sOffSetToBillIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT A.TO_BILL_ID FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT","TO_BILL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iOffSetToBillIdlen = sOffSetToBillIdArr.length;
				System.out.println("Length of Array = "+iOffSetToBillIdlen);
				
				for(int k=0;k<iOffSetToBillIdlen;k++,iCounter++)
				{					
					sOffSetToBillId = sOffSetToBillIdArr[k];
					sExpToBillId	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
					if(sExpToBillId.equalsIgnoreCase(sOffSetToBillId))
						CF.FnTestCaseStatusReport("Pass","To Bill Id matched C1_OFFSET_REQ_ADJ "+sOffSetToBillId);
					else
						CF.FnTestCaseStatusReport("Fail","To Bill Id NOT matched C1_OFFSET_REQ_ADJ "+sOffSetToBillId);
				}
				
				//Get Offset Amount
				sOffSetAmountArr =  (String[]) FnGetDBColumnValueInArray("SELECT O.OFFSET_AMOUNT FROM C1_OFFSET_REQ_DTLS O, C1_OFFSET_REQ_ADJ A WHERE O.OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') AND O.OFFSET_DTL_ID = A.OFFSET_DTL_ID ORDER BY OFFSET_AMOUNT","OFFSET_AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iOffSetAmtlen = sOffSetAmountArr.length;
				System.out.println("Length of Array = "+iOffSetAmtlen);
				
				for(int k=0;k<iOffSetAmtlen;k++,iCounter++)
				{					
					sOffSetAmt = sOffSetAmountArr[k];
					sExpOffsetAmt	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,7,sSheetName, sWorkbook).toString().trim();
					if(sExpOffsetAmt.equalsIgnoreCase(sOffSetAmt))
						CF.FnTestCaseStatusReport("Pass","OffSet Amount matched C1_OFFSET_REQ_ADJ "+sOffSetAmt);
					else
						CF.FnTestCaseStatusReport("Fail","OffSet Amount NOT matched C1_OFFSET_REQ_ADJ "+sOffSetAmt);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOffSetAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyAdjustmentsOnOffSet
	'Function Description : Verification of Offset Adjustments generated after Offset Submit/Unapply
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyAdjustmentsOnOffSet(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyAdjustmentsOnOffSet");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sOffSetId,sExpCount,sRowCount,sOffSetDtlId,sOffSetAdjtId,sExpAdjtAmount,sAdjtAmt;
				int iExpCount,iRowCount,iCounter;
				
					BaseTest.sTestDescription ="Verification of Regular Bill FT details";
					//Get OFFSET_DTL_ID from each OFFSET_ID
					sOffSetId		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpCount 		=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					
					iExpCount  	=   Integer.parseInt(sExpCount);

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM C1_OFFSET_REQ_ADJ WHERE OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') ORDER BY OFFSET_DTL_ID","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpCount)
					{
						String [] sOffSetDtlArr =  (String[]) FnGetDBColumnValueInArray("SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_ADJ WHERE OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') ORDER BY OFFSET_DTL_ID","OFFSET_DTL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sOffSetDtllen = sOffSetDtlArr.length;
						for(int k=0;k<sOffSetDtllen;k++,iCounter++)
						{					
							sOffSetDtlId = sOffSetDtlArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sOffSetDtlId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","OffSetDtls Count matched on offset "+sOffSetId);
						}

						//Verify Adjustment Ids
						String [] sAdjtIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT XFER_ADJ_ID FROM C1_OFFSET_REQ_ADJ WHERE OFFSET_DTL_ID IN (SELECT OFFSET_DTL_ID FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"') ORDER BY OFFSET_DTL_ID","XFER_ADJ_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sAdjtIdlen = sAdjtIDArr.length;
						for(int k=0;k<sAdjtIdlen;k++,iCounter++)
						{					
							sOffSetAdjtId = sAdjtIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),4, sOffSetAdjtId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","OffSet Adjustments found on offset "+sOffSetId);
						}

						//Verify FT amount
						sExpAdjtAmount		=	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
						String [] sAdjtAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT OFFSET_AMOUNT FROM C1_OFFSET_REQ_DTLS WHERE OFFSET_REQ_ID = '"+sOffSetId+"' ORDER BY OFFSET_AMOUNT","OFFSET_AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected FT Amount ---- "+sExpAdjtAmount);
						sAdjtAmt = (String) Arrays.toString(sAdjtAmtArr);
						System.out.println("Actual FT Amount ---- "+sAdjtAmt);

						if (sAdjtAmt.contains(sExpAdjtAmount))
						{
							CF.FnTestCaseStatusReport("Pass","XFER_ADJ_AMT ="+sAdjtAmt+" matched on offset "+sOffSetId+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","XFER_ADJ_AMT ="+sAdjtAmt+" NOT matched on offset "+sOffSetId+" for Regular Bill");
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Adjustments Count NOT matched on contract "+sOffSetId);
					}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOffSetAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyMatchEvents
	'Function Description : Verification of Match Events generated after Offset Submit/Unapply
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyMatchEvents(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyMatchEvents");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountId,sExpMatchEvntCount,sExpMatchEventStatus,sExpMatchEventCancelReason,sMatchEvntId,sMatchEvntStatus,sMatchEventCancelReason,sRowCount;
				String [] sMatchEvntDArr;
				int iExpMatchEvntCount,iRowCount,iCounter,iMatchEvntIdlen;
				
				BaseTest.sTestDescription ="Verification of Match Events generated";
				//Verify count of Regular Bill Segments generated
				sAccountId   		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sExpMatchEvntCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				iExpMatchEvntCount =   Integer.parseInt(sExpMatchEvntCount);
				
				sRowCount     =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MATCH_EVT WHERE ACCT_ID IN ('"+sAccountId+"') ORDER BY MEVT_STATUS_FLG","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iRowCount     =   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==iExpMatchEvntCount)
				{
					sMatchEvntDArr =  (String[]) FnGetDBColumnValueInArray("SELECT MATCH_EVT_ID FROM CI_MATCH_EVT WHERE ACCT_ID IN('"+sAccountId+"') ORDER BY MEVT_STATUS_FLG","MATCH_EVT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iCounter = 0;
					iMatchEvntIdlen = sMatchEvntDArr.length;
					for(int k=0;k<iMatchEvntIdlen;k++,iCounter++)
					{
						sMatchEvntId = sMatchEvntDArr[k];
						CF.FnWriteCellValue((iStartingRow+iCounter),3, sMatchEvntId, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Match Event ID present in CI_MATCH_EVT "+sMatchEvntDArr[k]);
						
						//Get Match Event Status
						sExpMatchEventStatus	=  (String) CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
						sMatchEvntStatus 		=  (String) FnGetDBColumnValue("SELECT MEVT_STATUS_FLG FROM CI_MATCH_EVT WHERE MATCH_EVT_ID = '"+sMatchEvntId+"'","MEVT_STATUS_FLG",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						if(sExpMatchEventStatus.equalsIgnoreCase(sMatchEvntStatus))
							CF.FnTestCaseStatusReport("Pass","Match Event Status matched "+sMatchEvntStatus);
						else
							CF.FnTestCaseStatusReport("Fail","Match Event Status NOT matched "+sMatchEvntStatus);
						
						//Get Match Event Cancel Reason
						sExpMatchEventCancelReason	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
						sMatchEventCancelReason =  (String) FnGetDBColumnValue("SELECT MEVT_CAN_RSN_CD FROM CI_MATCH_EVT WHERE MATCH_EVT_ID = '"+sMatchEvntId+"'","MEVT_CAN_RSN_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						if(sExpMatchEventCancelReason.equalsIgnoreCase(sMatchEventCancelReason))
							CF.FnTestCaseStatusReport("Pass","Match Event Cancel Reason matched "+sMatchEventCancelReason);
						else
							CF.FnTestCaseStatusReport("Fail","Match Event Cancel Reason NOT matched "+sMatchEventCancelReason);
					}
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Matche Event Count NOT matched on account ");
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyMatchEvents");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*'#######################################################################################################
	'Function Name        : FnVerifySQDetails
	'Function Description : Verification of SQ Details generated on bill segments after bill is generated
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifySQDetails(int iStartingRow, int sCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifySQDetails");
		try 
		{
			String sQuery1;
			String sBillId,sBillSegId,sSqiCd,sExpSqiCd,sExpInitSq,sInitSq,sBillSq,sExpBillSq,sRowCount,sCountFlg = "F";
			String [] sBillSegIdArr,sSqiCdArr,sInitSqArr,sBillSqArr;
			
			int iCounter,iBillSegIdlen,iSqiCdlen,iInitSqlen,iBillSqlen;
			
			sBillId		=   (String)CF.FnGetCellValue(sCountRow,1, sSheetName, sWorkbook).toString().trim();
			sRowCount  	=	(String)CF.FnGetCellValue(sCountRow,2, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM CI_BSEG_SQ WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BSEG_ID";
			
			sCountFlg = FnGetTxnRowCount(sRowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
			
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				//Get Bill Segment Ids
				BaseTest.sTestDescription = "Verify Bill Segements";
				sBillSegIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BILL_SQ","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iBillSegIdlen = sBillSegIdArr.length;
				System.out.println("Length of Array = "+iBillSegIdlen);
				
				for(int k=0;k<iBillSegIdlen;k++,iCounter++)
				{					
					sBillSegId = sBillSegIdArr[k];
					CF.FnWriteCellValue(iStartingRow+iCounter, 1, "GET"+sBillSegId, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Bill Segment Id present in CI_BSEG_SQ "+sBillSegIdArr[k]);
				}
				
				//Get SQI_CDs
				BaseTest.sTestDescription = "Verify Service Quantity Identifiers";
				sSqiCdArr =  (String[]) FnGetDBColumnValueInArray("SELECT SQI_CD FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BILL_SQ","SQI_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iSqiCdlen = sSqiCdArr.length;
				System.out.println("Length of Array = "+iSqiCdlen);
				
				for(int k=0;k<iSqiCdlen;k++,iCounter++)
				{					
					sSqiCd = sSqiCdArr[k];
					sExpSqiCd	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
					if(sExpSqiCd.equalsIgnoreCase(sSqiCd.trim()))
						CF.FnTestCaseStatusReport("Pass","SQI_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpSqiCd+". Actual Value = "+sSqiCd);
					else
						CF.FnTestCaseStatusReport("Fail","SQI_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpSqiCd+". Actual Value = "+sSqiCd);
				}
				
				//Get INIT_SQ
				BaseTest.sTestDescription = "Verify Init SQs";
				sInitSqArr =  (String[]) FnGetDBColumnValueInArray("SELECT INIT_SQ FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BILL_SQ","INIT_SQ",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iInitSqlen = sInitSqArr.length;
				System.out.println("Length of Array = "+iInitSqlen);
				
				for(int k=0;k<iInitSqlen;k++,iCounter++)
				{					
					sInitSq = sInitSqArr[k];
					sExpInitSq	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					if(sExpInitSq.equalsIgnoreCase(sInitSq))
						CF.FnTestCaseStatusReport("Pass","INIT_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpInitSq+". Actual Value = "+sInitSq);
					else
						CF.FnTestCaseStatusReport("Fail","INIT_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpInitSq+". Actual Value = "+sInitSq);
				}
				
				//Get BILL_SQ
				BaseTest.sTestDescription = "Verify Billable SQs";
				sBillSqArr =  (String[]) FnGetDBColumnValueInArray("SELECT BILL_SQ FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BILL_SQ","BILL_SQ",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iBillSqlen = sBillSqArr.length;
				System.out.println("Length of Array = "+iBillSqlen);
				
				for(int k=0;k<iBillSqlen;k++,iCounter++)
				{					
					sBillSq = sBillSqArr[k];
					sExpBillSq	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					if(sExpBillSq.equalsIgnoreCase(sBillSq))
						CF.FnTestCaseStatusReport("Pass","INIT_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpBillSq+". Actual Value = "+sBillSq);
					else
						CF.FnTestCaseStatusReport("Fail","INIT_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpBillSq+". Actual Value = "+sBillSq);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOffSetAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyErrorSegments
	'Function Description : Verification of Error Messages on the Bill Segments on Bill
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyErrorSegments(int iStartingRow, int sCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyErrorSegments");
		try 
		{
			String sQuery1;
			String sBillId,sBillSegId,sRowCount,sExpMsg,sExcExpMsg,sCountFlg = "F";
			String [] sBillSegIdArr,sExpMsgArr;
			
			int iCounter,iBillSegIdlen,iExpMsglen;
			
			sBillId		=   (String)CF.FnGetCellValue(sCountRow,1, sSheetName, sWorkbook).toString().trim();
			sRowCount  	=	(String)CF.FnGetCellValue(sCountRow,2, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM CI_BSEG_EXCP WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BSEG_ID";
			
			sCountFlg = FnGetTxnRowCount(sRowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
			
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				//Get Bill Segment Ids
				BaseTest.sTestDescription = "Verify Bill Segements";
				sBillSegIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_BSEG_EXCP WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY MESSAGE_NBR","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				
				iBillSegIdlen = sBillSegIdArr.length;
				System.out.println("Length of Array = "+iBillSegIdlen);
				
				for(int k=0;k<iBillSegIdlen;k++,iCounter++)
				{					
					sBillSegId = sBillSegIdArr[k];
					CF.FnWriteCellValue(iStartingRow+iCounter, 1, "GET"+sBillSegId, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Bill Segment Id present in CI_BSEG_SQ "+sBillSegIdArr[k]);
				}
				
				
				//Get Exception Messages on Bill Segments
				BaseTest.sTestDescription = "Verify Error Messages";
				sExpMsgArr =  (String[]) FnGetDBColumnValueInArray("SELECT EXP_MSG FROM CI_BSEG_EXCP WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"') ORDER BY BSEG_ID","EXP_MSG",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;

				iExpMsglen = sExpMsgArr.length;
				System.out.println("Length of Array = "+iExpMsglen);
				///////////////
				for(int k=0;k<iExpMsglen;k++,iCounter++)
				{
					System.out.println("Error message from DB  is = "+sExpMsgArr);
					System.out.println("Value of counter is = "+iCounter);

					sExcExpMsg	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();

					System.out.println("Error message from Excel  is = "+sExpMsgArr);
					for(int tq=0;tq<iExpMsglen;tq++)
					{
						sExpMsg = sExpMsgArr[tq];
						System.out.println("Error message from DB  is = "+sExpMsg.trim());
						if((sExcExpMsg.trim()).equals(sExpMsg.trim())) {
							CF.FnTestCaseStatusReport("Pass","EXP_MSG matched CI_BSEG_EXCP. Expected Value = "+sExcExpMsg+". Actual Value = "+sExpMsg);
							break;
						} 
						else if(tq < (iExpMsglen-1))
						{
							continue;
						} 
						else if(tq >= (iExpMsglen-1))
						{
							CF.FnTestCaseStatusReport("Fail","EXP_MSG NOT matched CI_BSEG_EXCP. Expected Value = "+sExcExpMsg+". Actual Value = "+sExpMsg);
						} 
						else 
						{
							CF.FnTestCaseStatusReport("Fail","EXP_MSG NOT matched CI_BSEG_EXCP. Expected Value = "+sExcExpMsg+". Actual Value = "+sExpMsg);
						}
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOffSetAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnGetTxnRowCount
	'Function Description : To verify Transaction rowCount after running TFM batches
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public String FnGetTxnRowCount(String sRowCount, String sQuery1) throws Exception
	{	
		System.out.println(">>>>>>>>>>--FnGetTxnRowCount");
		
		String sTxnRowCountFlg = "F";
		String sActualTnxcount;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sActualTnxcount	=	(String) FnGetDBColumnValue(sQuery1,"COUNT(*)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sActualTnxcount.equalsIgnoreCase(sRowCount))
				{
					CF.FnTestCaseStatusReport("Pass", "Expected value of Row Count is -> " + sRowCount + " Actual value of Row Count is---->"+sActualTnxcount);
					sTxnRowCountFlg="T";
					System.out.println("sTxnRowCountFlg ======================================"+sTxnRowCountFlg);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Expected value of Row Count is -> " + sRowCount + " Actual value of Row Count is---->"+sActualTnxcount);
					sTxnRowCountFlg="F";
					System.out.println("sTxnRowCountFlg ======================================"+sTxnRowCountFlg);
				}
			}	
		}
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
		
		return sTxnRowCountFlg;
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOTransactionStatus
	'Function Description : To verify Transaction status after running TFM batches for ASO
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyASOTransactionStatus(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionStatus");
		String sTxnid,sTxnStatus, sSTXN_DETAIL_ID, sSBO_STATUS_CD;
		String sQuery;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					sTxnid   		=    (String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook).toString().trim();
					sTxnStatus 		=    (String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook).toString().trim();
	                
	                sQuery = "SELECT TXN_DETAIL_ID,BO_STATUS_CD FROM CI_TXN_DETAIL WHERE TXN_DETAIL_ID = '"+sTxnid+"'";
	    			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	                
	    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    			{
	    				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    			      
	    				// To Get value of corresponding column
	    				sSTXN_DETAIL_ID=(String)temp.get("TXN_DETAIL_ID");
	    				sSBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
	    				
	    				System.out.println("BO_STATUS_CD "+sSBO_STATUS_CD);
	    				System.out.println("TXN_DETAIL_ID "+sSTXN_DETAIL_ID);
	    				System.out.println("sTxnid "+sTxnid);
	    					
	    				if (sSBO_STATUS_CD.trim().equalsIgnoreCase(sTxnStatus.trim()))
	    				{
	    					CF.FnTestCaseStatusReport("Pass", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sSBO_STATUS_CD);
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sSBO_STATUS_CD);
	    				}
	    			}
	    			else
	    				CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> No Transaction found");
	    		}// Starting Row for loop ends
			}	
		}
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOTransactionData
	'Function Description : To Verify transaction data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOTransactionData(int sStartRow,int sEndRow,int iCountRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOTransactionData");
	      
	      
		String sQuery, sQuery1;
		String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSdetail_priceitem_parm_grp_id,sSstart_dt,sSend_dt, sStxn_pritm_status_cd;
		String sSsqi_cd,sSbillable_chg_id;
		String sStxn_dttm,sSprice_srch_dt,sSseq_no,sStxn_rating_criteria,sStxn_calc_id,sSpricing_rule_id,sScurrency_cd,sSrs_cd,sScalc_amt,sSdescr_on_bill,sSaccumulation_sw,sSacct_id,sSheader_seq,sSseqno,sSdst_id,sSprt_sw,sSappinsummSw,sSClcalc_amt;
		String sSexempt_amt,sSbase_amt,sSbill_sq,sSCldescr_on_bill,sSpric_ccy_cd,sSpric_amt,sSexchrate_id,sStot_agg_sq, sSvalue_amt,sScalc_only_sw,sSprecs_calc_amt,sSsa_id,sSbill_after_dt,sSbchg_start_dt,sSbchg_end_dt;
		String sClSeqNo = "10";
		
		String sTXN_HEADER_ID,sTXN_RowCount, sCountFlg = "F";
		int j = 0;
		try 
		{
			sTXN_HEADER_ID   		=        (String)CF.FnGetCellValue(iCountRow,1, sSheetName, sWorkbook).toString().trim();
			sTXN_RowCount   		=        (String)CF.FnGetCellValue(iCountRow,2, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "select COUNT(*)"+
					" from ci_txn_dtl_pritm pm, ci_txn_calc c, ci_txn_calc_ln cl,ci_bill_chg bchg"+
					" where pm.txn_detail_id = c.txn_detail_id and pm.txn_calc_id = cl.txn_calc_id and c.txn_calc_id = cl.txn_calc_id and  pm.billable_chg_id = bchg.billable_chg_id "+
					" and pm.txn_header_id = '"+sTXN_HEADER_ID+"'"; 
			sCountFlg = FnGetTxnRowCount(sTXN_RowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	    	  
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					j = sStartingRow;
					
					System.out.println("sStartingRow"+sStartingRow);
					System.out.println("sSheetName"+sSheetName);
					
					sSTXN_DETAIL_ID				=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook).toString().trim();
					sSinitial_price_item_cd		=	(String)CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook).toString().trim();
					sClSeqNo						=	(String)CF.FnGetCellValue(sStartingRow,22, sSheetName, sWorkbook).toString().trim();
					
					sQuery  = "select pm.txn_detail_id,pm.acct_id,pm.initial_price_item_cd ,pm.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,pm.txn_pritm_status_cd, to_char(pm.txn_dttm,'mm/dd/yyyy') as txn_dttm,to_char(pm.price_srch_dt,'mm/dd/yyyy') as price_srch_dt,pm.seq_no,pm.billable_chg_id,pm.txn_rating_criteria,pm.txn_calc_id,pm.pricing_rule_id, "+
							" to_char(c.start_dt,'mm/dd/yyyy') as start_dt,to_char(c.end_dt,'mm/dd/yyyy') as end_dt,c.currency_cd,c.rs_cd,c.calc_amt,c.descr_on_bill,c.accumulation_sw,c.acct_id,cl.header_seq,cl.seqno,cl.dst_id,cl.prt_sw,cl.app_in_summ_sw,cl.calc_amt AS CL_CLAC_AMT,cl.exempt_amt,cl.base_amt,cl.sqi_cd,cl.bill_sq,cl.descr_on_bill AS CL_DESCR_ON_BILL ,cl.pric_ccy_cd,cl.pric_amt,cl.exchrate_id,cl.tot_agg_sq, "+
							" cl.value_amt,cl.calc_only_sw,cl.precs_calc_amt,bchg.sa_id,to_char(bchg.bill_after_dt,'mm/dd/yyyy') as bill_after_dt, to_char(bchg.start_dt,'mm/dd/yyyy') as bchg_start_dt, to_char(bchg.end_dt,'mm/dd/yyyy') as bchg_end_dt"+
							" from ci_txn_dtl_pritm pm, ci_txn_calc c, ci_txn_calc_ln cl,ci_bill_chg bchg"+
							" where pm.txn_detail_id = c.txn_detail_id and pm.txn_calc_id = cl.txn_calc_id and c.txn_calc_id = cl.txn_calc_id and  pm.billable_chg_id = bchg.billable_chg_id "+
							" and pm.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and pm.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and cl.seqno = '"+sClSeqNo+"'"; 
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
                  
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						
						for(int i=0;i<AL.size();i++)
						{    	
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
							
							// To Get value of corresponding column
							
							String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
							String sACCT_ID =(String)temp.get("ACCT_ID");
							String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
							String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
							String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
							String stxn_dttm =(String)temp.get("TXN_DTTM");
							String sprice_srch_dt =(String)temp.get("PRICE_SRCH_DT");
							String sseq_no =(String)temp.get("SEQ_NO");
							String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
							if (sbillable_chg_id.equalsIgnoreCase("          "))
							{
								sbillable_chg_id = "NOVAL";
							}		
							else
							{
								sbillable_chg_id = "GET"+sbillable_chg_id;
							}
							String stxn_rating_criteria=(String)temp.get("TXN_RATING_CRITERIA");
							String stxn_calc_id=(String)temp.get("TXN_CALC_ID");
							if (stxn_calc_id.equalsIgnoreCase("          "))
							{
								stxn_calc_id = "NOVAL";
							}	
							else
							{
								stxn_calc_id = "GET"+stxn_calc_id;
							}
							String spricing_rule_id =(String)temp.get("PRICING_RULE_ID");
							String sstart_dt =(String)temp.get("START_DT");
							String send_dt =(String)temp.get("END_DT");
							String scurrency_cd =(String)temp.get("CURRENCY_CD");
							String srs_cd =(String)temp.get("RS_CD");
							String scalc_amt =(String)temp.get("CALC_AMT");
							String sdescr_on_bill =(String)temp.get("DESCR_ON_BILL");
							String saccumulation_sw =(String)temp.get("ACCUMULATION_SW");
							String sacct_id =(String)temp.get("ACCT_ID");
							String sheader_seq =(String)temp.get("HEADER_SEQ");
							String sseqno =(String)temp.get("SEQNO");
							String sdst_id =(String)temp.get("DST_ID");
							if(sdst_id.equalsIgnoreCase("          "))
							{
								sdst_id="NOVAL";
							}
							String sprt_sw =(String)temp.get("PRT_SW");
							String sappinsummSw=(String)temp.get("APP_IN_SUMM_SW");
							String sClcalc_amt =(String)temp.get("CL_CLAC_AMT");
							String sexempt_amt =(String)temp.get("EXEMPT_AMT");
							String sbase_amt =(String)temp.get("BASE_AMT");
							String ssqi_cd =(String)temp.get("SQI_CD");
							if(ssqi_cd.equalsIgnoreCase("        "))
							{
								ssqi_cd="NOVAL";
							}
	                              
							String sbill_sq =(String)temp.get("BILL_SQ");
							String sCldescr_on_bill =(String)temp.get("CL_DESCR_ON_BILL");
							String spric_ccy_cd =(String)temp.get("PRIC_CCY_CD");
							String spric_amt =(String)temp.get("PRIC_AMT");
							String sexchrate_id =(String)temp.get("EXCHRATE_ID");
							String stot_agg_sq =(String)temp.get("TOT_AGG_SQ");
							String svalue_amt =(String)temp.get("VALUE_AMT");
							String scalc_only_sw =(String)temp.get("CALC_ONLY_SW");
							String sprecs_calc_amt =(String)temp.get("PRECS_CALC_AMT");
							String ssa_id =(String)temp.get("SA_ID");
							String sbill_after_dt =(String)temp.get("BILL_AFTER_DT");
							if(sbill_after_dt.equalsIgnoreCase("        ")||sbill_after_dt=="NULL")
							{
								sbill_after_dt="NOVAL";
							}
							String sbchg_start_dt =(String)temp.get("BCHG_START_DT");
							String sbchg_end_dt =(String)temp.get("BCHG_END_DT");
							
							System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+sdetail_priceitem_parm_grp_id+stxn_pritm_status_cd+stxn_dttm+sprice_srch_dt+sseq_no+sbillable_chg_id+stxn_rating_criteria+stxn_calc_id);
							
							System.out.println("DB Data->"+spricing_rule_id+sstart_dt+send_dt+scurrency_cd+srs_cd+scalc_amt+sdescr_on_bill+saccumulation_sw+sacct_id+sheader_seq+sseqno+sdst_id+sprt_sw+sappinsummSw+sClcalc_amt+sexempt_amt+sbase_amt+ssqi_cd);
							
							System.out.println("DB Data->"+sbill_sq+sCldescr_on_bill+spric_ccy_cd+spric_amt+sexchrate_id+stot_agg_sq+svalue_amt+scalc_only_sw+sprecs_calc_amt+ssa_id+sbill_after_dt+sbchg_start_dt+sbchg_end_dt);
							
							// Getting data from data sheet
							sSTXN_DETAIL_ID						=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
							sSACCT_ID							=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
							sSinitial_price_item_cd				=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
							sSdetail_priceitem_parm_grp_id		=  	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
							sStxn_pritm_status_cd				=   (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
							sStxn_dttm							=   (String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
							sSprice_srch_dt						= 	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
							sSseq_no							=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
							sSbillable_chg_id					=	 (String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
							sStxn_rating_criteria				=	(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
							sStxn_calc_id						=	(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
							sSpricing_rule_id					=	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
							sSstart_dt							=	(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
							sSend_dt							=	(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
							sScurrency_cd						=	(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
							sSrs_cd								=	(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
							sScalc_amt							= 	(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
							sSdescr_on_bill						=	(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
							sSaccumulation_sw					=	(String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
                        	sSacct_id							=	(String)CF.FnGetCellValue(sStartingRow ,20, sSheetName, sWorkbook).toString().trim();
                        	sSheader_seq						=	(String)CF.FnGetCellValue(sStartingRow ,21, sSheetName, sWorkbook).toString().trim();
                        	sSseqno								=	(String)CF.FnGetCellValue(sStartingRow ,22, sSheetName, sWorkbook).toString().trim();
                        	sSdst_id							=	(String)CF.FnGetCellValue(sStartingRow ,23, sSheetName, sWorkbook).toString().trim();
                        	sSprt_sw							=	(String)CF.FnGetCellValue(sStartingRow ,24, sSheetName, sWorkbook).toString().trim();
                        	sSappinsummSw						=	(String)CF.FnGetCellValue(sStartingRow, 25, sSheetName, sWorkbook).toString().trim();
                        	sSClcalc_amt						=	(String)CF.FnGetCellValue(sStartingRow ,26, sSheetName, sWorkbook).toString().trim();
                        	sSexempt_amt						=	(String)CF.FnGetCellValue(sStartingRow ,27, sSheetName, sWorkbook).toString().trim();
                        	sSbase_amt							=	(String)CF.FnGetCellValue(sStartingRow ,28, sSheetName, sWorkbook).toString().trim();
                        	sSsqi_cd							=	(String)CF.FnGetCellValue(sStartingRow ,29, sSheetName, sWorkbook).toString().trim();
                        	sSbill_sq							=	(String)CF.FnGetCellValue(sStartingRow ,30, sSheetName, sWorkbook).toString().trim();
                        	sSCldescr_on_bill					=	(String)CF.FnGetCellValue(sStartingRow ,31, sSheetName, sWorkbook).toString().trim();
                        	sSpric_ccy_cd						=	(String)CF.FnGetCellValue(sStartingRow ,32, sSheetName, sWorkbook).toString().trim();
                        	sSpric_amt							=	(String)CF.FnGetCellValue(sStartingRow ,33, sSheetName, sWorkbook).toString().trim();;
                        	sSexchrate_id						=	(String)CF.FnGetCellValue(sStartingRow ,34, sSheetName, sWorkbook).toString().trim();
                        	sStot_agg_sq						=	(String)CF.FnGetCellValue(sStartingRow ,35, sSheetName, sWorkbook).toString().trim();
                        	sSvalue_amt							=	(String)CF.FnGetCellValue(sStartingRow ,36, sSheetName, sWorkbook).toString().trim();
                        	sScalc_only_sw						=	(String)CF.FnGetCellValue(sStartingRow ,37, sSheetName, sWorkbook).toString().trim();
                        	sSprecs_calc_amt					=	(String)CF.FnGetCellValue(sStartingRow ,38, sSheetName, sWorkbook).toString().trim();
                        	sSsa_id								=	(String)CF.FnGetCellValue(sStartingRow ,39, sSheetName, sWorkbook).toString().trim();
                        	sSbill_after_dt						=	(String)CF.FnGetCellValue(sStartingRow ,40, sSheetName, sWorkbook).toString().trim();
                        	sSbchg_start_dt						=	(String)CF.FnGetCellValue(sStartingRow ,41, sSheetName, sWorkbook).toString().trim();
                        	sSbchg_end_dt						=	(String)CF.FnGetCellValue(sStartingRow ,42, sSheetName, sWorkbook).toString().trim();
                              
                        	// Data sheet data
                             
                        	System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSdetail_priceitem_parm_grp_id+sStxn_pritm_status_cd+sStxn_dttm+sSprice_srch_dt+sSseq_no+sSbillable_chg_id+sStxn_rating_criteria+sStxn_calc_id);
                        	
                        	System.out.println("Datasheet Data->"+sSpricing_rule_id+sSstart_dt+sSend_dt+sScurrency_cd+sSrs_cd+sScalc_amt+sSdescr_on_bill+sSaccumulation_sw+sSacct_id+sSheader_seq+sSseqno+sSdst_id+sSprt_sw+sSappinsummSw+sSClcalc_amt+sSexempt_amt+sSbase_amt+sSsqi_cd);
                              
                        	System.out.println("Datasheet Data->"+sSbill_sq+sSCldescr_on_bill+sSpric_ccy_cd+sSpric_amt+sSexchrate_id+sStot_agg_sq+sSvalue_amt+sScalc_only_sw+sSprecs_calc_amt+sSsa_id+sSbill_after_dt);
                        	
                        	if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
                                    
                        		if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
                        		{
                        			CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
                        		}
                        		else
                        		{
                        			CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
                        		}
                        		if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim()))
                        		{
                        			CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item CD -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
                        		}
                        		else
                        		{
                        			CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item CD -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
                        		}
                        		if (sdetail_priceitem_parm_grp_id.trim().equalsIgnoreCase(sSdetail_priceitem_parm_grp_id.trim()))
                        		{
                        			CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
                        		}
                        		else
                        		{
                        			CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
                        		}
                        		if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim()))
                        		{
                        			CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item param status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
                                }
                        		else
                        		{
                        			CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item param status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
                                }
                                if (stxn_dttm.trim().equalsIgnoreCase(sStxn_dttm.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Date Time -> Expected->" + sStxn_dttm + "  Actual->"+stxn_dttm);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Date Time -> Expected->" + sStxn_dttm + "  Actual->"+stxn_dttm);
                                }
                                if (sprice_srch_dt.trim().equalsIgnoreCase(sSprice_srch_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Search Date -> Expected->" + sSprice_srch_dt + "  Actual->"+sprice_srch_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Search Date -> Expected->" + sSprice_srch_dt + "  Actual->"+sprice_srch_dt);
                                }
                                if (sseq_no.trim().equalsIgnoreCase(sSseq_no.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Sequence -> Expected->" + sSseq_no + "  Actual->"+sseq_no);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Sequence -> Expected->" + sSseq_no + "  Actual->"+sseq_no);
                                }
                                if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2)))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
                                }
                                if (stxn_rating_criteria.trim().equalsIgnoreCase(sStxn_rating_criteria.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Rating Criteria -> Expected->" + sStxn_rating_criteria + "  Actual->"+stxn_rating_criteria);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Rating Criteria -> Expected->" + sStxn_rating_criteria + "  Actual->"+stxn_rating_criteria);
                                }
                                
                                if (stxn_calc_id.trim().substring(0,2).equalsIgnoreCase(sStxn_calc_id.trim().substring(0,2)))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Calculation ID -> Expected->" + sStxn_calc_id + "  Actual->"+stxn_calc_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Calculation ID -> Expected->" + sStxn_calc_id + "  Actual->"+stxn_calc_id);
                                }
                               
                                if (spricing_rule_id.trim().equalsIgnoreCase(sSpricing_rule_id.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Rule ID -> Expected->" + sSpricing_rule_id + "  Actual->"+spricing_rule_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Rule ID -> Expected->" + sSpricing_rule_id + "  Actual->"+spricing_rule_id);
                                }
                                if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Start date   -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Start date  -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
                                }
                                if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> End date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> End date  -> Expected->" + sSend_dt + "  Actual->"+send_dt);
                                }
                               
                                if (scurrency_cd.trim().equalsIgnoreCase(sScurrency_cd.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Currency Code -> Expected->" + sScurrency_cd + "  Actual->"+scurrency_cd);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Currency Code -> Expected->" + sScurrency_cd + "  Actual->"+scurrency_cd);
                                }
                                if (srs_cd.trim().equalsIgnoreCase(sSrs_cd.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Rate Schedule -> Expected->" + sSrs_cd + "  Actual->"+srs_cd);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Rate Schedule -> Expected->" + sSrs_cd + "  Actual->"+srs_cd);
                                }
                                if (scalc_amt.trim().equalsIgnoreCase(sScalc_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Calculated Amount in ci_txn_calc table -> Expected->" + sScalc_amt + "  Actual->"+scalc_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Calculated Amount in ci_txn_calc table -> Expected->" + sScalc_amt + "  Actual->"+scalc_amt);
                                }
                                if (sdescr_on_bill.trim().equalsIgnoreCase(sSdescr_on_bill.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Description on Bill -> Expected->" + sSdescr_on_bill + "  Actual->"+sdescr_on_bill);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Description on Bill -> Expected->" + sSdescr_on_bill + "  Actual->"+sdescr_on_bill);
                                }
                                                                 
                                if (saccumulation_sw.trim().equalsIgnoreCase(sSaccumulation_sw.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Accumulation Switch -> Expected->" + sSaccumulation_sw + "  Actual->"+saccumulation_sw);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Accumulation Switch -> Expected->" + sSaccumulation_sw + "  Actual->"+saccumulation_sw);
                                }
                                if (sacct_id.trim().equalsIgnoreCase(sSacct_id.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account Id  -> Expected->" + sSacct_id + "  Actual->"+sacct_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Account Id  -> Expected->" + sSacct_id + "  Actual->"+sacct_id);
                                }
                                if (sheader_seq.trim().equalsIgnoreCase(sSheader_seq.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Header Sequence -> Expected->" + sSheader_seq + "  Actual->"+sheader_seq);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Header Sequence -> Expected->" + sSheader_seq + "  Actual->"+sheader_seq);
                                }
                                
                                if (sseqno.trim().equalsIgnoreCase(sSseqno.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Sequence in ci_txn_calc_ln table -> Expected->" + sSseqno + "  Actual->"+sseqno);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Sequence in ci_txn_calc_ln table -> Expected->" + sSseqno + "  Actual->"+sseqno);
                                }
                                
                                if (sdst_id.trim().equalsIgnoreCase(sSdst_id.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Distribution Code -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Distribution Code -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
                                }
                                if (sprt_sw.trim().equalsIgnoreCase(sSprt_sw.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Print Switch -> Expected->" + sSprt_sw + "  Actual->"+sprt_sw);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Print Switch -> Expected->" + sSprt_sw + "  Actual->"+sprt_sw);
                                }
                                
                                if (sappinsummSw.trim().equalsIgnoreCase(sSappinsummSw.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Appears in Summary -> Expected->" + sSappinsummSw + "  Actual->"+sappinsummSw);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Appears in Summary -> Expected->" + sSappinsummSw + "  Actual->"+sappinsummSw);
                                }
                                if (sClcalc_amt.trim().equalsIgnoreCase(sSClcalc_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Calculated amount in  ci_txn_calc_ln table  -> Expected->" + sSClcalc_amt + "  Actual->"+sClcalc_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Calculated amount in  ci_txn_calc_ln table  -> Expected->" + sSClcalc_amt + "  Actual->"+sClcalc_amt);
                                }
                                
                                if (sexempt_amt.trim().equalsIgnoreCase(sSexempt_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Exempt Amount in  ci_txn_calc_ln table  -> Expected->" + sSexempt_amt + "  Actual->"+sexempt_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Exempt Amount in  ci_txn_calc_ln table  -> Expected->" + sSexempt_amt + "  Actual->"+sexempt_amt);
                                }
                                if (sbase_amt.trim().equalsIgnoreCase(sSbase_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Base Amount in  ci_txn_calc_ln table  -> Expected->" + sSbase_amt + "  Actual->"+sbase_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Base Amount in  ci_txn_calc_ln table  -> Expected->" + sSbase_amt + "  Actual->"+sbase_amt);
                                }
                                                                   
                                if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
                                }
                                
                                
                                if (sbill_sq.trim().equalsIgnoreCase(sSbill_sq.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Service Quantity -> Expected->" + sSbill_sq + "  Actual->"+sbill_sq);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Service Quantity -> Expected->" + sSbill_sq + "  Actual->"+sbill_sq);
                                }
                                if (sCldescr_on_bill.trim().equalsIgnoreCase(sSCldescr_on_bill.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Description on Bill in ci_txn_calc_ln table  -> Expected->" + sSCldescr_on_bill + "  Actual->"+sCldescr_on_bill);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Description on Bill in ci_txn_calc_ln table -> Expected->" + sSCldescr_on_bill + "  Actual->"+sCldescr_on_bill);
                                }
                                
                                if (spric_ccy_cd.trim().equalsIgnoreCase(sSpric_ccy_cd.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Currency Code -> Expected->" + sSpric_ccy_cd + "  Actual->"+spric_ccy_cd);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Currency Code -> Expected->" + sSpric_ccy_cd + "  Actual->"+spric_ccy_cd);
                                }
                                if (spric_amt.trim().equalsIgnoreCase(sSpric_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Amount -> Expected->" + sSpric_amt + "  Actual->"+spric_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Amount -> Expected->" + sSpric_amt + "  Actual->"+spric_amt);
                                }
                                
                                if (sexchrate_id.trim().equalsIgnoreCase(sSexchrate_id.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Exchange Rate Id -> Expected->" + sSexchrate_id + "  Actual->"+sexchrate_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Exchange Rate Id -> Expected->" + sSexchrate_id + "  Actual->"+sexchrate_id);
                                }
                                if (stot_agg_sq.trim().equalsIgnoreCase(sStot_agg_sq.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Aggregated SQ -> Expected->" + sStot_agg_sq + "  Actual->"+stot_agg_sq);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Aggregated SQ -> Expected->" + sStot_agg_sq + "  Actual->"+stot_agg_sq);
                                }
                                if (svalue_amt.trim().equalsIgnoreCase(sSvalue_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Rate Value -> Expected->" + sSvalue_amt + "  Actual->"+svalue_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Rate Value -> Expected->" + sSvalue_amt + "  Actual->"+svalue_amt);
                                }
                                if (scalc_only_sw.trim().equalsIgnoreCase(sScalc_only_sw.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> For Calculation Purposes Only -> Expected->" + sScalc_only_sw + "  Actual->"+scalc_only_sw);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> For Calculation Purposes Only -> Expected->" + sScalc_only_sw + "  Actual->"+scalc_only_sw);
                                }
                                
                                
                                if (sprecs_calc_amt.trim().equalsIgnoreCase(sSprecs_calc_amt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Precise Calculated Amount -> Expected->" + sSprecs_calc_amt + "  Actual->"+sprecs_calc_amt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Precise Calculated Amount -> Expected->" + sSprecs_calc_amt + "  Actual->"+sprecs_calc_amt);
                                }
                                if (ssa_id.trim().equalsIgnoreCase(sSsa_id.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Contract ID  -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Contract ID -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
                                }
                                if (sbill_after_dt.trim().equalsIgnoreCase(sSbill_after_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Bill after date  -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Bill after date -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
                                }
                                
                                if (sbchg_start_dt.trim().equalsIgnoreCase(sSbchg_start_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable charge start date  -> Expected->" + sSbchg_start_dt + "  Actual->"+sbchg_start_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable charge start date -> Expected->" + sSbchg_start_dt + "  Actual->"+sbchg_start_dt);
                                }
                                
                                if (sbchg_end_dt.trim().equalsIgnoreCase(sSbchg_end_dt.trim()))
                                {
                                	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable charge end date  -> Expected->" + sSbchg_end_dt + "  Actual->"+sbchg_end_dt);
                                }
                                else
                                {
                                	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable charge end date -> Expected->" + sSbchg_end_dt + "  Actual->"+sbchg_end_dt);
                                }
                			}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
                        	}
                        }
					}     
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
					}     
                  
				} // end of for loop k
			}//if sCountFlg = T ends      
			else
				CF.FnTestCaseStatusReport("Fail", "TFM Data verification count mismatch"); 
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOTransactionDatawithBG
	'Function Description : To Verify transaction data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOTransactionDatawithBG(int sStartRow,int sEndRow,int iCountRow, String sSheetName,String sWorkbook) throws Exception{
	      
	      System.out.println(">>>>>>>>>>--FnVerifyASOTransactionDatawithBG");
	      
	      
	      
	      String sQuery, sQuery1,sQuery2, sQuery3;
	      String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSdetail_priceitem_parm_grp_id,sSstart_dt,sSend_dt, sStxn_pritm_status_cd;
	      String sSsqi_cd,sSbillable_chg_id;
	      String sStxn_dttm,sSprice_srch_dt,sSseq_no,sStxn_rating_criteria,sStxn_calc_id,sSpricing_rule_id,sScurrency_cd,sSrs_cd,sScalc_amt,sSdescr_on_bill,sSaccumulation_sw,sSacct_id,sSheader_seq,sSseqno,sSdst_id,sSprt_sw,sSappinsummSw,sSClcalc_amt;
	      String sSexempt_amt,sSbase_amt,sSbill_sq,sSCldescr_on_bill,sSpric_ccy_cd,sSpric_amt,sSexchrate_id,sStot_agg_sq, sSvalue_amt,sScalc_only_sw,sSprecs_calc_amt,sSsa_id,sSbill_after_dt,sSbchg_start_dt,sSbchg_end_dt;
	      String sClSeqNo = "10", sdetail_priceitem_parm_grp_parm_str = "",sCount="";
	      
	      String sTXN_HEADER_ID,sTXN_RowCount, sCountFlg = "F", sSdetail_priceitem_parm_grp_parm_str;
	      int j = 0;
	      try 
	      {
	    	  sTXN_HEADER_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
		      sTXN_RowCount   		=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
		      sQuery1 = "select COUNT(*)"+
		      " from ci_txn_dtl_pritm pm, ci_txn_calc c, ci_txn_calc_ln cl,ci_bill_chg bchg"+
		      " where pm.txn_detail_id = c.txn_detail_id and pm.txn_calc_id = cl.txn_calc_id and c.txn_calc_id = cl.txn_calc_id and  pm.billable_chg_id = bchg.billable_chg_id "+
		      " and pm.txn_header_id = '"+sTXN_HEADER_ID+"'"; 
		      sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
		    	  
		      System.out.println("Printing the value if sCountFlg================="+sCountFlg);
		    	  
		      if(sCountFlg.equalsIgnoreCase("T"))
		      {
		    	  for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
		    	  {
		    		  j = sStartingRow;
	                        
		    		  System.out.println("sStartingRow"+sStartingRow);
		    		  System.out.println("sSheetName"+sSheetName);
	                        
		    		  sSTXN_DETAIL_ID   		=   (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
		    		  sSinitial_price_item_cd 	=   (String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
		    		  sClSeqNo 					=   (String)CF.FnGetCellValue(sStartingRow ,22, sSheetName, sWorkbook).toString().trim();
	                        
		    		  sQuery  = "select pm.txn_detail_id,pm.acct_id,pm.initial_price_item_cd ,pm.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,pm.txn_pritm_status_cd, to_char(pm.txn_dttm,'mm/dd/yyyy') as txn_dttm,to_char(pm.price_srch_dt,'mm/dd/yyyy') as price_srch_dt,pm.seq_no,pm.billable_chg_id,pm.txn_rating_criteria,pm.txn_calc_id,pm.pricing_rule_id, "+
	                              " to_char(c.start_dt,'mm/dd/yyyy') as start_dt,to_char(c.end_dt,'mm/dd/yyyy') as end_dt,c.currency_cd,c.rs_cd,c.calc_amt,c.descr_on_bill,c.accumulation_sw,c.acct_id,cl.header_seq,cl.seqno,cl.dst_id,cl.prt_sw,cl.app_in_summ_sw,cl.calc_amt AS CL_CLAC_AMT,cl.exempt_amt,cl.base_amt,cl.sqi_cd,cl.bill_sq,cl.descr_on_bill AS CL_DESCR_ON_BILL ,cl.pric_ccy_cd,cl.pric_amt,cl.exchrate_id,cl.tot_agg_sq, "+
	                              " cl.value_amt,cl.calc_only_sw,cl.precs_calc_amt,bchg.sa_id,to_char(bchg.bill_after_dt,'mm/dd/yyyy') as bill_after_dt, to_char(bchg.start_dt,'mm/dd/yyyy') as bchg_start_dt, to_char(bchg.end_dt,'mm/dd/yyyy') as bchg_end_dt"+
	                              " from ci_txn_dtl_pritm pm, ci_txn_calc c, ci_txn_calc_ln cl,ci_bill_chg bchg"+
	                              " where pm.txn_detail_id = c.txn_detail_id and pm.txn_calc_id = cl.txn_calc_id and c.txn_calc_id = cl.txn_calc_id and  pm.billable_chg_id = bchg.billable_chg_id "+
	                              " and pm.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and pm.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and cl.seqno = '"+sClSeqNo+"'"; 
		    		  
		    		  ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	                  if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	                  {
	                	  java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	                      for(int i=0;i<AL.size();i++)
	                      {
	                    	  Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	                          // To Get value of corresponding column
	                    	  String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
	                          String sACCT_ID =(String)temp.get("ACCT_ID");
	                          String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
	                          
	                          String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
	                          System.out.println("sdetail_priceitem_parm_grp_id================="+sdetail_priceitem_parm_grp_id);
	                          if (sdetail_priceitem_parm_grp_id.equalsIgnoreCase("          "))
	                          {
	                        	  sdetail_priceitem_parm_grp_id = "NOVAL";
	                          }
	                          else
	                          {
	                        	  String sdetail_priceitem_parm_grp_id_str = sdetail_priceitem_parm_grp_id;
	                        	  sdetail_priceitem_parm_grp_id = "GET"+sdetail_priceitem_parm_grp_id;
	                        	  
	                        	  sQuery2  = "SELECT COUNT(*) FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+sdetail_priceitem_parm_grp_id_str+"'";
	                              sCount = (String)	 FnGetDBColumnValue(sQuery2,"COUNT(*)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	                        	  System.out.println("sCount================="+sCount);
	                              if(!sCount.equalsIgnoreCase("0"))
	                              {
	                        		  sQuery3  = "SELECT PARM_STR FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+sdetail_priceitem_parm_grp_id_str+"'";
	                        		  sdetail_priceitem_parm_grp_parm_str = (String) FnGetDBColumnValue(sQuery3,"PARM_STR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	                              }
	                              else
	                              {
	                            	  sdetail_priceitem_parm_grp_parm_str = "NOVAL";
	                              }
	                          }
	                          
	                          String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
	                          String stxn_dttm =(String)temp.get("TXN_DTTM");
	                          String sprice_srch_dt =(String)temp.get("PRICE_SRCH_DT");
	                          String sseq_no =(String)temp.get("SEQ_NO");
	                          String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	                          if (sbillable_chg_id.equalsIgnoreCase("          ")){
	                        	  sbillable_chg_id = "NOVAL";
	                        	  }
	                          else{
	                        	  sbillable_chg_id = "GET"+sbillable_chg_id;
	                        	  }
	                          String stxn_rating_criteria=(String)temp.get("TXN_RATING_CRITERIA");
	                          String stxn_calc_id=(String)temp.get("TXN_CALC_ID");
	                          if (stxn_calc_id.equalsIgnoreCase("          ")){
	                        	  stxn_calc_id = "NOVAL";
	                        	  }
	                          else{
	                        	  stxn_calc_id = "GET"+stxn_calc_id;
	                        	  }
	                          String spricing_rule_id =(String)temp.get("PRICING_RULE_ID");
	                          String sstart_dt =(String)temp.get("START_DT");
	                          String send_dt =(String)temp.get("END_DT");
	                          String scurrency_cd =(String)temp.get("CURRENCY_CD");
	                          String srs_cd =(String)temp.get("RS_CD");
	                          String scalc_amt =(String)temp.get("CALC_AMT");
	                          String sdescr_on_bill =(String)temp.get("DESCR_ON_BILL");
	                          String saccumulation_sw =(String)temp.get("ACCUMULATION_SW");
	                          String sacct_id =(String)temp.get("ACCT_ID");
	                          String sheader_seq =(String)temp.get("HEADER_SEQ");
	                          String sseqno =(String)temp.get("SEQNO");
	                          String sdst_id =(String)temp.get("DST_ID");
	                          if(sdst_id.equalsIgnoreCase("          ")){
	                        	  sdst_id="NOVAL";
	                        	  }
	                          
	                          String sprt_sw =(String)temp.get("PRT_SW");
	                          String sappinsummSw=(String)temp.get("APP_IN_SUMM_SW");
	                          String sClcalc_amt =(String)temp.get("CL_CLAC_AMT");
	                          String sexempt_amt =(String)temp.get("EXEMPT_AMT");
	                          String sbase_amt =(String)temp.get("BASE_AMT");
	                          String ssqi_cd =(String)temp.get("SQI_CD");
	                          if(ssqi_cd.equalsIgnoreCase("        ")){
	                        	  ssqi_cd="NOVAL";
	                        	  }
	                          
	                          String sbill_sq =(String)temp.get("BILL_SQ");
	                          String sCldescr_on_bill =(String)temp.get("CL_DESCR_ON_BILL");
	                          String spric_ccy_cd =(String)temp.get("PRIC_CCY_CD");
	                          String spric_amt =(String)temp.get("PRIC_AMT");
	                          String sexchrate_id =(String)temp.get("EXCHRATE_ID");
	                          String stot_agg_sq =(String)temp.get("TOT_AGG_SQ");
	                          String svalue_amt =(String)temp.get("VALUE_AMT");
	                          String scalc_only_sw =(String)temp.get("CALC_ONLY_SW");
	                          String sprecs_calc_amt =(String)temp.get("PRECS_CALC_AMT");
	                          String ssa_id =(String)temp.get("SA_ID");
	                          String sbill_after_dt =(String)temp.get("BILL_AFTER_DT");
	                          if(sbill_after_dt.equalsIgnoreCase("        ")){
	                        	  sbill_after_dt="NOVAL";
	                        	  }
	                          if(sbill_after_dt=="NULL"){
	                          	sbill_after_dt="NOVAL";
	                          }
	                          
	                          String sbchg_start_dt =(String)temp.get("BCHG_START_DT");
	                          String sbchg_end_dt =(String)temp.get("BCHG_END_DT");
	                                                            
	                          System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+sdetail_priceitem_parm_grp_id+stxn_pritm_status_cd+stxn_dttm+sprice_srch_dt+sseq_no+sbillable_chg_id+stxn_rating_criteria+stxn_calc_id);
	                          System.out.println("DB Data->"+spricing_rule_id+sstart_dt+send_dt+scurrency_cd+srs_cd+scalc_amt+sdescr_on_bill+saccumulation_sw+sacct_id+sheader_seq+sseqno+sdst_id+sprt_sw+sappinsummSw+sClcalc_amt+sexempt_amt+sbase_amt+ssqi_cd);
	                          System.out.println("DB Data->"+sbill_sq+sCldescr_on_bill+spric_ccy_cd+spric_amt+sexchrate_id+stot_agg_sq+svalue_amt+scalc_only_sw+sprecs_calc_amt+ssa_id+sbill_after_dt+sbchg_start_dt+sbchg_end_dt);
	                          
	                          // Getting data from data sheet
	                                                            
	                          sSTXN_DETAIL_ID   =                  (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                          sSACCT_ID =                          (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                          sSinitial_price_item_cd =            (String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                          sSdetail_priceitem_parm_grp_id =     (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                          sStxn_pritm_status_cd =              (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                          sStxn_dttm =                         (String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                          sSprice_srch_dt =                    (String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                          sSseq_no =						   (String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                          sSbillable_chg_id =                  (String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                          sStxn_rating_criteria =			   (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                          sStxn_calc_id = 					   (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                          sSpricing_rule_id = 				   (String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                          sSstart_dt =                         (String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	                          sSend_dt =                           (String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
	                          sScurrency_cd =                      (String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
	                          sSrs_cd =                   		   (String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
	                          sScalc_amt =                         (String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
	                          sSdescr_on_bill =                    (String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
	                          sSaccumulation_sw =                  (String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
	                          sSacct_id =                          (String)CF.FnGetCellValue(sStartingRow ,20, sSheetName, sWorkbook).toString().trim();
	                          sSheader_seq =                       (String)CF.FnGetCellValue(sStartingRow ,21, sSheetName, sWorkbook).toString().trim();
	                          sSseqno =                       	   (String)CF.FnGetCellValue(sStartingRow ,22, sSheetName, sWorkbook).toString().trim();
	                          sSdst_id =                       	   (String)CF.FnGetCellValue(sStartingRow ,23, sSheetName, sWorkbook).toString().trim();
	                          sSprt_sw =                       	   (String)CF.FnGetCellValue(sStartingRow ,24, sSheetName, sWorkbook).toString().trim();
	                          sSappinsummSw =                      (String)CF.FnGetCellValue(sStartingRow, 25, sSheetName, sWorkbook).toString().trim();
	                          sSClcalc_amt =                       (String)CF.FnGetCellValue(sStartingRow ,26, sSheetName, sWorkbook).toString().trim();
	                          sSexempt_amt =                       (String)CF.FnGetCellValue(sStartingRow ,27, sSheetName, sWorkbook).toString().trim();
	                          sSbase_amt =                         (String)CF.FnGetCellValue(sStartingRow ,28, sSheetName, sWorkbook).toString().trim();
	                          sSsqi_cd =                       	   (String)CF.FnGetCellValue(sStartingRow ,29, sSheetName, sWorkbook).toString().trim();
	                          sSbill_sq =                          (String)CF.FnGetCellValue(sStartingRow ,30, sSheetName, sWorkbook).toString().trim();
	                          sSCldescr_on_bill =                  (String)CF.FnGetCellValue(sStartingRow ,31, sSheetName, sWorkbook).toString().trim();
	                          sSpric_ccy_cd =                      (String)CF.FnGetCellValue(sStartingRow ,32, sSheetName, sWorkbook).toString().trim();
	                          sSpric_amt =                         (String)CF.FnGetCellValue(sStartingRow ,33, sSheetName, sWorkbook).toString().trim();;
	                          sSexchrate_id =                      (String)CF.FnGetCellValue(sStartingRow ,34, sSheetName, sWorkbook).toString().trim();
	                          sStot_agg_sq =                       (String)CF.FnGetCellValue(sStartingRow ,35, sSheetName, sWorkbook).toString().trim();
	                          sSvalue_amt =                        (String)CF.FnGetCellValue(sStartingRow ,36, sSheetName, sWorkbook).toString().trim();
	                          sScalc_only_sw =                     (String)CF.FnGetCellValue(sStartingRow ,37, sSheetName, sWorkbook).toString().trim();
	                          sSprecs_calc_amt =                   (String)CF.FnGetCellValue(sStartingRow ,38, sSheetName, sWorkbook).toString().trim();
	                          sSsa_id =                            (String)CF.FnGetCellValue(sStartingRow ,39, sSheetName, sWorkbook).toString().trim();
	                          sSbill_after_dt =                    (String)CF.FnGetCellValue(sStartingRow ,40, sSheetName, sWorkbook).toString().trim();
	                          sSbchg_start_dt =                    (String)CF.FnGetCellValue(sStartingRow ,41, sSheetName, sWorkbook).toString().trim();
	                          sSbchg_end_dt =                      (String)CF.FnGetCellValue(sStartingRow ,42, sSheetName, sWorkbook).toString().trim();
	                          sSdetail_priceitem_parm_grp_parm_str=(String)CF.FnGetCellValue(sStartingRow ,43, sSheetName, sWorkbook).toString().trim();
	                          
	                          // Data sheet data
	                          // System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSpriceitem_cd+sSdetail_priceitem_parm_grp_id+sSpriceitem_parm_grp_id+sSprice_asgn_id+sSbillable_chg_id+sSstart_dt+sSend_dt);
	                          //System.out.println("Datasheet Data->"+sSdo_not_agg_sw+sStxn_pritm_status_cd+sSpa_acct_id+sSpa_per_id+sSpa_pricelist_id+sSsqi_cd+sSsvc_qty);
	                          System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSdetail_priceitem_parm_grp_id+sStxn_pritm_status_cd+sStxn_dttm+sSprice_srch_dt+sSseq_no+sSbillable_chg_id+sStxn_rating_criteria+sStxn_calc_id);
	                          System.out.println("Datasheet Data->"+sSpricing_rule_id+sSstart_dt+sSend_dt+sScurrency_cd+sSrs_cd+sScalc_amt+sSdescr_on_bill+sSaccumulation_sw+sSacct_id+sSheader_seq+sSseqno+sSdst_id+sSprt_sw+sSappinsummSw+sSClcalc_amt+sSexempt_amt+sSbase_amt+sSsqi_cd);
	                          System.out.println("Datasheet Data->"+sSbill_sq+sSCldescr_on_bill+sSpric_ccy_cd+sSpric_amt+sSexchrate_id+sStot_agg_sq+sSvalue_amt+sScalc_only_sw+sSprecs_calc_amt+sSsa_id+sSbill_after_dt+sSdetail_priceitem_parm_grp_parm_str);
	                              
	                          if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim())){
	                        	  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
	                        	  if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                        		  }
	                        	  if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item CD -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item CD -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
	                        		  }
	                        	  if (sdetail_priceitem_parm_grp_id.trim().substring(0,2).equalsIgnoreCase(sSdetail_priceitem_parm_grp_id.trim().substring(0,2))){
	                        		  if((sdetail_priceitem_parm_grp_parm_str.trim()).equalsIgnoreCase(sSdetail_priceitem_parm_grp_parm_str.trim())){
	                        			  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
	                        			  }
	                        		  else{
	                        			  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
	                        			  }
	                        		  }
	                        	  if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item param status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item param status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
	                        		  }
	                        	  if (stxn_dttm.trim().equalsIgnoreCase(sStxn_dttm.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Date Time -> Expected->" + sStxn_dttm + "  Actual->"+stxn_dttm);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Date Time -> Expected->" + sStxn_dttm + "  Actual->"+stxn_dttm);
	                        		  }
	                        	  if (sprice_srch_dt.trim().equalsIgnoreCase(sSprice_srch_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Search Date -> Expected->" + sSprice_srch_dt + "  Actual->"+sprice_srch_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Search Date -> Expected->" + sSprice_srch_dt + "  Actual->"+sprice_srch_dt);
	                        		  }
	                        	  if (sseq_no.trim().equalsIgnoreCase(sSseq_no.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Sequence -> Expected->" + sSseq_no + "  Actual->"+sseq_no);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Sequence -> Expected->" + sSseq_no + "  Actual->"+sseq_no);
	                        		  }
	                        	  if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2))){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                        		  }
	                        	  if (stxn_rating_criteria.trim().equalsIgnoreCase(sStxn_rating_criteria.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Rating Criteria -> Expected->" + sStxn_rating_criteria + "  Actual->"+stxn_rating_criteria);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Rating Criteria -> Expected->" + sStxn_rating_criteria + "  Actual->"+stxn_rating_criteria);
	                                  }
	                                    
	                        	  if (stxn_calc_id.trim().substring(0,2).equalsIgnoreCase(sStxn_calc_id.trim().substring(0,2))){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Calculation ID -> Expected->" + sStxn_calc_id + "  Actual->"+stxn_calc_id);
	                                   }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Calculation ID -> Expected->" + sStxn_calc_id + "  Actual->"+stxn_calc_id);
	                        		  }
	                                  
	                        	  if (spricing_rule_id.trim().equalsIgnoreCase(sSpricing_rule_id.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Rule ID -> Expected->" + sSpricing_rule_id + "  Actual->"+spricing_rule_id);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Rule ID -> Expected->" + sSpricing_rule_id + "  Actual->"+spricing_rule_id);
	                        		  }
	                        	  if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Start date   -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Start date  -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
	                        		  }
	                        	  if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> End date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> End date  -> Expected->" + sSend_dt + "  Actual->"+send_dt);
	                        		  }
	                        	  if (scurrency_cd.trim().equalsIgnoreCase(sScurrency_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Currency Code -> Expected->" + sScurrency_cd + "  Actual->"+scurrency_cd);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Currency Code -> Expected->" + sScurrency_cd + "  Actual->"+scurrency_cd);
	                        		  }
	                        	  if (srs_cd.trim().equalsIgnoreCase(sSrs_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Rate Schedule -> Expected->" + sSrs_cd + "  Actual->"+srs_cd);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Rate Schedule -> Expected->" + sSrs_cd + "  Actual->"+srs_cd);
	                                  }
	                        	  if (scalc_amt.trim().equalsIgnoreCase(sScalc_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Calculated Amount in ci_txn_calc table -> Expected->" + sScalc_amt + "  Actual->"+scalc_amt);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Calculated Amount in ci_txn_calc table -> Expected->" + sScalc_amt + "  Actual->"+scalc_amt);
	                                  }
	                        	  if (sdescr_on_bill.trim().equalsIgnoreCase(sSdescr_on_bill.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Description on Bill -> Expected->" + sSdescr_on_bill + "  Actual->"+sdescr_on_bill);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Description on Bill -> Expected->" + sSdescr_on_bill + "  Actual->"+sdescr_on_bill);
	                                  }
	                        	  if (saccumulation_sw.trim().equalsIgnoreCase(sSaccumulation_sw.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Accumulation Switch -> Expected->" + sSaccumulation_sw + "  Actual->"+saccumulation_sw);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Accumulation Switch -> Expected->" + sSaccumulation_sw + "  Actual->"+saccumulation_sw);
	                                  }
	                        	  if (sacct_id.trim().equalsIgnoreCase(sSacct_id.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account Id  -> Expected->" + sSacct_id + "  Actual->"+sacct_id);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Account Id  -> Expected->" + sSacct_id + "  Actual->"+sacct_id);
	                                  }
	                        	  if (sheader_seq.trim().equalsIgnoreCase(sSheader_seq.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Header Sequence -> Expected->" + sSheader_seq + "  Actual->"+sheader_seq);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Header Sequence -> Expected->" + sSheader_seq + "  Actual->"+sheader_seq);
	                                  }
	                        	  if (sseqno.trim().equalsIgnoreCase(sSseqno.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Sequence in ci_txn_calc_ln table -> Expected->" + sSseqno + "  Actual->"+sseqno);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Sequence in ci_txn_calc_ln table -> Expected->" + sSseqno + "  Actual->"+sseqno);
	                                  }
	                        	  if (sdst_id.trim().equalsIgnoreCase(sSdst_id.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Distribution Code -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Distribution Code -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	                                  }
	                        	  if (sprt_sw.trim().equalsIgnoreCase(sSprt_sw.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Print Switch -> Expected->" + sSprt_sw + "  Actual->"+sprt_sw);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Print Switch -> Expected->" + sSprt_sw + "  Actual->"+sprt_sw);
	                        		  }
	                        	  if (sappinsummSw.trim().equalsIgnoreCase(sSappinsummSw.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Appears in Summary -> Expected->" + sSappinsummSw + "  Actual->"+sappinsummSw);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Appears in Summary -> Expected->" + sSappinsummSw + "  Actual->"+sappinsummSw);
	                        	      }
	                        	  if (sClcalc_amt.trim().equalsIgnoreCase(sSClcalc_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Calculated amount in  ci_txn_calc_ln table  -> Expected->" + sSClcalc_amt + "  Actual->"+sClcalc_amt);
	                        	  	  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Calculated amount in  ci_txn_calc_ln table  -> Expected->" + sSClcalc_amt + "  Actual->"+sClcalc_amt);
	                        		  }
	                        	  if (sexempt_amt.trim().equalsIgnoreCase(sSexempt_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Exempt Amount in  ci_txn_calc_ln table  -> Expected->" + sSexempt_amt + "  Actual->"+sexempt_amt);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Exempt Amount in  ci_txn_calc_ln table  -> Expected->" + sSexempt_amt + "  Actual->"+sexempt_amt);
	                                  }
	                        	  if (sbase_amt.trim().equalsIgnoreCase(sSbase_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Base Amount in  ci_txn_calc_ln table  -> Expected->" + sSbase_amt + "  Actual->"+sbase_amt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Base Amount in  ci_txn_calc_ln table  -> Expected->" + sSbase_amt + "  Actual->"+sbase_amt);
	                                  }
	                                                               
	                        	  if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
	                                  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
	                        		  }
	                        	  if (sbill_sq.trim().equalsIgnoreCase(sSbill_sq.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Service Quantity -> Expected->" + sSbill_sq + "  Actual->"+sbill_sq);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Service Quantity -> Expected->" + sSbill_sq + "  Actual->"+sbill_sq);
	                        		  }
	                        	  if (sCldescr_on_bill.trim().equalsIgnoreCase(sSCldescr_on_bill.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Description on Bill in ci_txn_calc_ln table  -> Expected->" + sSCldescr_on_bill + "  Actual->"+sCldescr_on_bill);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Description on Bill in ci_txn_calc_ln table -> Expected->" + sSCldescr_on_bill + "  Actual->"+sCldescr_on_bill);
	                        		  }
	                        	  if (spric_ccy_cd.trim().equalsIgnoreCase(sSpric_ccy_cd.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Currency Code -> Expected->" + sSpric_ccy_cd + "  Actual->"+spric_ccy_cd);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Currency Code -> Expected->" + sSpric_ccy_cd + "  Actual->"+spric_ccy_cd);
	                        		  }
	                        	  if (spric_amt.trim().equalsIgnoreCase(sSpric_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Pricing Amount -> Expected->" + sSpric_amt + "  Actual->"+spric_amt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Pricing Amount -> Expected->" + sSpric_amt + "  Actual->"+spric_amt);
	                        		  }
	                        	  if (sexchrate_id.trim().equalsIgnoreCase(sSexchrate_id.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Exchange Rate Id -> Expected->" + sSexchrate_id + "  Actual->"+sexchrate_id);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Exchange Rate Id -> Expected->" + sSexchrate_id + "  Actual->"+sexchrate_id);
	                        		  }
	                        	  if (stot_agg_sq.trim().equalsIgnoreCase(sStot_agg_sq.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Aggregated SQ -> Expected->" + sStot_agg_sq + "  Actual->"+stot_agg_sq);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Aggregated SQ -> Expected->" + sStot_agg_sq + "  Actual->"+stot_agg_sq);
	                        		  }
	                        	  if (svalue_amt.trim().equalsIgnoreCase(sSvalue_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Rate Value -> Expected->" + sSvalue_amt + "  Actual->"+svalue_amt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Rate Value -> Expected->" + sSvalue_amt + "  Actual->"+svalue_amt);
	                        		  }
	                        	  if (scalc_only_sw.trim().equalsIgnoreCase(sScalc_only_sw.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> For Calculation Purposes Only -> Expected->" + sScalc_only_sw + "  Actual->"+scalc_only_sw);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> For Calculation Purposes Only -> Expected->" + sScalc_only_sw + "  Actual->"+scalc_only_sw);
	                        		  }
	                        	  if (sprecs_calc_amt.trim().equalsIgnoreCase(sSprecs_calc_amt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Precise Calculated Amount -> Expected->" + sSprecs_calc_amt + "  Actual->"+sprecs_calc_amt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Precise Calculated Amount -> Expected->" + sSprecs_calc_amt + "  Actual->"+sprecs_calc_amt);
	                        		  }
	                        	  if (ssa_id.trim().equalsIgnoreCase(sSsa_id.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Contract ID  -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Contract ID -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	                        		  }
	                        	  if (sbill_after_dt.trim().equalsIgnoreCase(sSbill_after_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Bill after date  -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Bill after date -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	                        		  }
	                        	  if (sbchg_start_dt.trim().equalsIgnoreCase(sSbchg_start_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable charge start date  -> Expected->" + sSbchg_start_dt + "  Actual->"+sbchg_start_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable charge start date -> Expected->" + sSbchg_start_dt + "  Actual->"+sbchg_start_dt);
	                        		  }
	                        	  if (sbchg_end_dt.trim().equalsIgnoreCase(sSbchg_end_dt.trim())){
	                        		  CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable charge end date  -> Expected->" + sSbchg_end_dt + "  Actual->"+sbchg_end_dt);
	                        		  }
	                        	  else{
	                        		  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable charge end date -> Expected->" + sSbchg_end_dt + "  Actual->"+sbchg_end_dt);
	                        		  }
	                        	  }
	                          else{
	                        	  CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
	                        	  }
	                          }
	                      }
	                  else{
	                	  CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
	                	  } 
	                  } // end of for loop k
		    	  }//if sCountFlg = T ends
		      else
		    	  CF.FnTestCaseStatusReport("Fail", "TFM Data verification count mismatch");
		      }
	      catch (Exception e) {
	    	  System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	    	  e.printStackTrace();
	    	  BaseTest.eFlgFound = "false";
	    	  CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    	  }
	      }
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOBillAmount
	'Function Description : To verify Bill Amount on the accounts after running billing batches for ASO billing
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyASOBillAmount(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOBillAmount");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sAcctid, sBillAmt, sWinStartDt, sQuery;
					
					sAcctid		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					sWinStartDt =	(String)CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook);
					if(sWinStartDt.equalsIgnoreCase("NoValue"))
						sQuery = "SELECT SUM(CALC_AMT) FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN("+sAcctid+")))";
					else
						sQuery = "SELECT SUM(CALC_AMT) FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN("+sAcctid+") AND WIN_START_DT = TO_DATE('"+sWinStartDt+"','MM/DD/YYYY')))";
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL")){
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Account ID "+sAcctid);
					
						if (sbillAmount.trim().equalsIgnoreCase(sBillAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount for Account Id -> " + sAcctid + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount for Account Id -> " + sAcctid + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
						CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> No Bill found");
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOTransactionError
	'Function Description : To verify Transaction error Message For ASO 
	'Input Parameters     : sHeaderID  		-> Transaction Header Id
	'					  : sTransactionIDs -> comma seperated Expected transaction ids 	
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyASOTransactionError(int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOTransactionError");
		String sSTxnID,sSSeqNo,sSMessageCat,sSMessageNum;
		String sQuery;
		int j;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					j = sStartingRow;
					System.out.println("sStartingRow"+sStartingRow);
		            System.out.println("sSheetName"+sSheetName);
		            
		            sSTxnID   =    (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
		            sSSeqNo   =    (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
		            
		            sQuery = "SELECT TXN_DETAIL_ID,SEQ_NO,MESSAGE_CAT_NBR,MESSAGE_NBR FROM CI_TXN_DETAIL_EXCP WHERE TXN_DETAIL_ID='"+sSTxnID+"' AND SEQ_NO='"+sSSeqNo+"' ORDER BY TXN_DETAIL_ID";
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
					
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					
						// To Get value of corresponding column
	                    String sTXN_DETAIL_ID 	=	(String)temp.get("TXN_DETAIL_ID");
						String sSeqNo			=	(String)temp.get("SEQ_NO");
						String sMessageCat		=	(String)temp.get("MESSAGE_CAT_NBR");
						String sMessageNum		=	(String)temp.get("MESSAGE_NBR");
																		
						sSTxnID				=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSSeqNo			    =	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSMessageCat		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSMessageNum		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						System.out.println("Data from data sheet->"+sSTxnID+sSMessageCat+sSMessageNum);	
						
						if (sSTxnID.trim().equalsIgnoreCase(sTXN_DETAIL_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							if (sSSeqNo.trim().equalsIgnoreCase(sSeqNo.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Seq Number -> Expected->" + sSSeqNo + "  Actual->"+sSeqNo);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Seq Number -> Expected->" + sSSeqNo + "  Actual->"+sSeqNo);
							}
							if (sSMessageCat.trim().equalsIgnoreCase(sMessageCat.trim())){
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							if (sSMessageNum.trim().equalsIgnoreCase(sMessageNum.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
						}
					}
					else
						CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> Not found");
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifySSLAmountData
	'Function Description : To Verify SSL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                     : sEndRow    -> End row number for SSL data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifySSLAmountData(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifySSLAmountData");
		
	    String sSACCUM_GRP_ID,sSwin_start_dt,sSmember_subscriber_id,sSACCT_ID, sSssl_cul_agg_amt,sSssl_credits,sSbillable_chg_id,sSssl_credits_asl,sSssl_limit,sSssl_max_payout_limit,sSassl_limit,sSssl_cul_credits,sSprev_billed_amt;
	    String sSsa_id,sSbill_after_dt,sScharge_amt,sSdst_id,sSmember_subscriber_id2,sSaccum_after_dt;
	    String sQuery,sQuery1;
	    String sACCNT_ID,sWIN_START_DT, sTXN_RowCount, sCountFlg = "F";
	    int j = 0;
	    
		try 
		{
			sACCNT_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
	    	sWIN_START_DT		=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
	    	sTXN_RowCount   	=        (String)CF.FnGetCellValue(iCountRow ,3, sSheetName, sWorkbook).toString().trim();
	    	
	    	sQuery1 = "SELECT COUNT(*) "+
	    	"FROM CI_ACCUM_SSL_AMT SSLACCUM, CI_BILL_CHG CHG, CI_B_CHG_LINE CLINE, CI_TXN_CALC_ACCUM_GRP ACCUMGRP "+
	    	"WHERE SSLACCUM.ACCT_ID IN('"+sACCNT_ID+"') AND SSLACCUM.WIN_START_DT = TO_DATE('"+sWIN_START_DT+"', 'mm/dd/yyyy') "+
	    	"AND SSLACCUM.BILLABLE_CHG_ID = CHG.BILLABLE_CHG_ID AND SSLACCUM.BILLABLE_CHG_ID = CLINE.BILLABLE_CHG_ID "+
	    	"AND SSLACCUM.accum_grp_id = ACCUMGRP.ACCUM_GRP_ID "; 
	    	
	    	System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T")){
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	  	  		{
	  	  			j = sStartingRow;  			
		  			System.out.println("sStartingRow"+sStartingRow);
		  			System.out.println("sSheetName"+sSheetName);
		  			
		  			sSACCUM_GRP_ID				=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	  	  			sSwin_start_dt				=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	  	  			sSmember_subscriber_id		=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	  	  			sSACCT_ID					=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	  	  			sSmember_subscriber_id2		=	(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
	  	  			
	  	  			sQuery= " SELECT accumssl.ACCUM_GRP_ID, to_char(WIN_START_DT,'mm/dd/yyyy') as WIN_START_DT, accumssl.MEMBER_SUBSCRIBER_ID, SSL_CUL_AGG_AMT, SSL_CREDITS, accumssl.BILLABLE_CHG_ID, ACCT_ID, SSL_CREDITS_ASL, SSL_LIMIT, SSL_MAX_PAYOUT_LIMIT, ASSL_LIMIT, SSL_CUL_CREDITS, PREV_BILLED_AMT, "+
	  	  			" chg.sa_id,to_char(chg.bill_after_dt,'mm/dd/yyyy') as bill_after_dt,cline.charge_amt,cline.dst_id,accumgrp.member_subscriber_id as member_subscriber_id2,to_char(accumgrp.accum_after_dt,'mm/dd/yyyy') as accum_after_dt"+
	  	  			" FROM CI_ACCUM_SSL_AMT accumssl, ci_bill_chg chg, ci_b_chg_line cline,ci_txn_calc_accum_grp accumgrp  "+
	  	  			" WHERE ACCT_ID           ='"+sSACCT_ID+"' "+
	  	  			" AND accumssl.MEMBER_SUBSCRIBER_ID='"+sSmember_subscriber_id+"' "+
	  	  			" AND WIN_START_DT        = to_date('"+sSwin_start_dt+"','mm/dd/yyyy') "+
	  	  			" AND accumssl.ACCUM_GRP_ID        ='"+sSACCUM_GRP_ID+"' " +
	  	  			" and accumgrp.member_subscriber_id='"+sSmember_subscriber_id2+"'" +
	  	  			" AND accumssl.billable_chg_id = chg.billable_chg_id "+
	  	  			" and accumssl.billable_chg_id = cline.billable_chg_id "+
	  	  			" and accumssl.accum_grp_id = accumgrp.accum_grp_id "; 
	  	  			
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
	  	  				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String smember_subscriber_id =(String)temp.get("MEMBER_SUBSCRIBER_ID");
	                    String sssl_cul_agg_amt =(String)temp.get("SSL_CUL_AGG_AMT");
	                    String sssl_credits =(String)temp.get("SSL_CREDITS");
	                    String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String sssl_credits_asl =(String)temp.get("SSL_CREDITS_ASL");
	                    String sssl_limit =(String)temp.get("SSL_LIMIT");
	                    String sssl_max_payout_limit =(String)temp.get("SSL_MAX_PAYOUT_LIMIT");
	                    String sassl_limit =(String)temp.get("ASSL_LIMIT");
	                    String sssl_cul_credits =(String)temp.get("SSL_CUL_CREDITS");
	                    String sprev_billed_amt =(String)temp.get("PREV_BILLED_AMT");
	                    String ssa_id =(String)temp.get("SA_ID");
	                    String sbill_after_dt =(String)temp.get("BILL_AFTER_DT");
	                    if(sbill_after_dt=="NULL")
	                    {
	                    	sbill_after_dt="NOVAL";
	                    }
	                    String scharge_amt =(String)temp.get("CHARGE_AMT");
	                    String sdst_id =(String)temp.get("DST_ID");
	                    if(sdst_id.equalsIgnoreCase("          "))
	                    {
	                  	  sdst_id="NOVAL";
	                    }
	                    String smember_subscriber_id2 =(String)temp.get("MEMBER_SUBSCRIBER_ID2");
	                    String saccum_after_dt =(String)temp.get("ACCUM_AFTER_DT");
	                    
	                    System.out.println("DB Data->"+sACCUM_GRP_ID+swin_start_dt+smember_subscriber_id+sssl_cul_agg_amt+sssl_credits+sbillable_chg_id+sACCT_ID+sssl_credits_asl+sssl_limit+sssl_max_payout_limit+sassl_limit+sssl_cul_credits+sprev_billed_amt);
	                    System.out.println("DB Data->"+ssa_id+sbill_after_dt+scharge_amt+sdst_id+smember_subscriber_id2+saccum_after_dt);
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID   =         (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt =           (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSmember_subscriber_id =   (String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_agg_amt =        (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits =            (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id =        (String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID =                (String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits_asl =		   (String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sSssl_limit =              (String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sSssl_max_payout_limit =   (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSassl_limit = 			   (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_credits = 	   (String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt =        (String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	                    sSsa_id =		   		   (String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
	                    sSbill_after_dt =		   (String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
	                    sScharge_amt =		  	   (String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
	                    sSdst_id =				   (String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
	                    sSmember_subscriber_id2 =  (String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
	                    sSaccum_after_dt =	       (String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
	                    
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSwin_start_dt+sSmember_subscriber_id+sSssl_cul_agg_amt+sSssl_credits+sSbillable_chg_id+sSACCT_ID+sSssl_credits_asl+sSssl_limit+sSssl_max_payout_limit+sSassl_limit+sSssl_cul_credits+sSprev_billed_amt);
	                    System.out.println("Sheet Data->"+sSsa_id+sSbill_after_dt+sScharge_amt+sSdst_id+sSmember_subscriber_id2+sSaccum_after_dt);
	                    if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	                    {
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                          
	                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	if (smember_subscriber_id.trim().equalsIgnoreCase(sSmember_subscriber_id.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	if (sssl_cul_agg_amt.trim().equalsIgnoreCase(sSssl_cul_agg_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	if (sssl_credits.trim().equalsIgnoreCase(sSssl_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	if (sssl_credits_asl.trim().equalsIgnoreCase(sSssl_credits_asl.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	if (sssl_limit.trim().equalsIgnoreCase(sSssl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	if (sssl_max_payout_limit.trim().equalsIgnoreCase(sSssl_max_payout_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
                          
	                    	if (sassl_limit.trim().equalsIgnoreCase(sSassl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
                                                              
	                    	if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previously Billed Amount   -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previously Billed Amount  -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	if (ssa_id.trim().equalsIgnoreCase(sSsa_id.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Contract Id  -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Contract Id  -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	                    	}
	                    	if (sbill_after_dt.trim().equalsIgnoreCase(sSbill_after_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Bill after Date   -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Bill after Date  -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	                    	}
	                    	
	                    	if (scharge_amt.trim().equalsIgnoreCase(sScharge_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Charge Amount  -> Expected->" + sScharge_amt + "  Actual->"+scharge_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Charge Amount  -> Expected->" + sScharge_amt + "  Actual->"+scharge_amt);
	                    	}
	                    	if (sdst_id.trim().equalsIgnoreCase(sSdst_id.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> DST ID  -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> DST ID  -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	                    	}
	                    	if (smember_subscriber_id2.trim().equalsIgnoreCase(sSmember_subscriber_id2.trim()))
                          	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Member Subscriber Id  -> Expected->" + sSmember_subscriber_id2 + "  Actual->"+smember_subscriber_id2);
                          	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Member Subscriber Id  -> Expected->" + sSmember_subscriber_id2 + "  Actual->"+smember_subscriber_id2);
	                    	}
	                    	if (saccum_after_dt.trim().equalsIgnoreCase(sSaccum_after_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Accumulate After Date  -> Expected->" + sSaccum_after_dt + "  Actual->"+saccum_after_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Accumulate After Date  -> Expected->" + sSaccum_after_dt + "  Actual->"+saccum_after_dt);
	                    	}
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	                    }
	  	  			}
	  	  		}
	  	  	}
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifySSLAmount
	'Function Description : To Verify SSL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                     : sEndRow    -> End row number for SSL data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifySSLAmount(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifySSLAmount");
		
		String sSACCUM_GRP_ID,sSwin_start_dt,sSmember_subscriber_id,sSssl_cul_agg_amt,sSssl_credits,sSbillable_chg_id,sSACCT_ID,sSssl_credits_asl,sSssl_limit,sSssl_max_payout_limit,sSassl_limit,sSssl_cul_credits,sSprev_billed_amt;
		String sQuery,sQuery1;
		String sACCNT_ID,sTXN_RowCount,sCountFlg;
		int j = 0;
		
		try 
		{
			sACCNT_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
			sTXN_RowCount   	=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
			
			sQuery1 = "SELECT COUNT(*) FROM CI_ACCUM_SSL_AMT SSLACCUM WHERE SSLACCUM.ACCT_ID IN('"+sACCNT_ID+"')" ;
			
			System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T"))
	  	  	{
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	  	  		{
	  	  			j = sStartingRow;  			
	  	  			System.out.println("sStartingRow"+sStartingRow);
	  	  			System.out.println("sSheetName"+sSheetName);
	  	  			
	  	  			sSACCUM_GRP_ID				=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	  	  			sSwin_start_dt				=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	  	  			sSmember_subscriber_id		=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	  	  			sSACCT_ID					=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	  	  			
	  	  			sQuery= " SELECT ACCUM_GRP_ID, to_char(WIN_START_DT,'mm/dd/yyyy') as WIN_START_DT, MEMBER_SUBSCRIBER_ID, SSL_CUL_AGG_AMT, SSL_CREDITS, BILLABLE_CHG_ID, ACCT_ID, SSL_CREDITS_ASL, SSL_LIMIT, SSL_MAX_PAYOUT_LIMIT, ASSL_LIMIT, SSL_CUL_CREDITS, PREV_BILLED_AMT "+
		  	  			" FROM CI_ACCUM_SSL_AMT"+
		  	  			" WHERE ACCT_ID           ='"+sSACCT_ID+"' "+
		  	  			" AND MEMBER_SUBSCRIBER_ID='"+sSmember_subscriber_id+"' "+
		  	  			" AND WIN_START_DT        = to_date('"+sSwin_start_dt+"','mm/dd/yyyy') "+
		  	  			" AND ACCUM_GRP_ID        ='"+sSACCUM_GRP_ID+"'"; 
	  	  		
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
		  	  			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String smember_subscriber_id =(String)temp.get("MEMBER_SUBSCRIBER_ID");
	                    String sssl_cul_agg_amt =(String)temp.get("SSL_CUL_AGG_AMT");
	                    String sssl_credits =(String)temp.get("SSL_CREDITS");
	                    String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String sssl_credits_asl =(String)temp.get("SSL_CREDITS_ASL");
	                    String sssl_limit =(String)temp.get("SSL_LIMIT");
	                    String sssl_max_payout_limit =(String)temp.get("SSL_MAX_PAYOUT_LIMIT");
	                    String sassl_limit =(String)temp.get("ASSL_LIMIT");
	                    String sssl_cul_credits =(String)temp.get("SSL_CUL_CREDITS");
	                    String sprev_billed_amt =(String)temp.get("PREV_BILLED_AMT");
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID   =         (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt =           (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSmember_subscriber_id =   (String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_agg_amt =        (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits =            (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id =        (String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID =                (String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits_asl =		   (String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sSssl_limit =              (String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sSssl_max_payout_limit =   (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSassl_limit = 			   (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_credits = 	   (String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt =        (String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	                    
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSwin_start_dt+sSmember_subscriber_id+sSssl_cul_agg_amt+sSssl_credits+sSbillable_chg_id+sSACCT_ID+sSssl_credits_asl+sSssl_limit+sSssl_max_payout_limit+sSassl_limit+sSssl_cul_credits+sSprev_billed_amt);
	                 
	                    if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	                    {
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                          
	                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	if (smember_subscriber_id.trim().equalsIgnoreCase(sSmember_subscriber_id.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	if (sssl_cul_agg_amt.trim().equalsIgnoreCase(sSssl_cul_agg_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	if (sssl_credits.trim().equalsIgnoreCase(sSssl_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	if (sssl_credits_asl.trim().equalsIgnoreCase(sSssl_credits_asl.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	if (sssl_limit.trim().equalsIgnoreCase(sSssl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	if (sssl_max_payout_limit.trim().equalsIgnoreCase(sSssl_max_payout_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
                          
	                    	if (sassl_limit.trim().equalsIgnoreCase(sSassl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
                                                              
	                    	if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previously Billed Amount   -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previously Billed Amount  -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                    	}
	                    	
	  	  			}
	  	  			
	  	  		}
	  	  	}
		}
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASLAmountData
	'Function Description : To Verify ASL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                               : sEndRow    -> End row number for SSL data Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                               : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASLAmountData(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASLAmountData");
		
		String sSACCUM_GRP_ID,sSwin_start_dt,sSasl_cul_agg_amt,sSasl_cul_calc_limit,sSasl_cul_min_limit,sSssl_cul_credits,sSasl_max_payout_limit,sSasl_mth_payment_limit,sSbillable_chg_id,sSACCT_ID,sSasl_cul_calc_limit_pct,sSasl_limit,sSasl_cul__mth_payment_limit,sSasl_credits,sSprev_billed_amt;
	    String sSsa_id,sSbill_after_dt,sScharge_amt,sSdst_id;
	    String sQuery;
	    
	    int j = 0;
	    try 
	    {
	    	for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    	{
	    		j = sStartingRow;
	    		
	    		System.out.println("sStartingRow"+sStartingRow);
	    		System.out.println("sSheetName"+sSheetName);
	    		
	    		sSACCUM_GRP_ID   = (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    		sSwin_start_dt  = (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    		
	    		sSACCT_ID	 = (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    		
	    		sQuery="SELECT ACCUM_GRP_ID, to_char(WIN_START_DT,'mm/dd/yyyy') as WIN_START_DT, ASL_CUL_AGG_AMT, ASL_CUL_CALC_LIMIT, ASL_CUL_MIN_LIMIT, SSL_CUL_CREDITS, ASL_MAX_PAYOUT_LIMIT, ASL_MTH_PAYMENT_LIMIT, accumasl.BILLABLE_CHG_ID, ACCT_ID, ASL_CUL_CALC_LIMIT_PCT, ASL_LIMIT, ASL_CUL_MTH_PAYMENT_LIMIT, ASL_CREDITS, PREV_BILLED_AMT, "+
	    				" chg.sa_id,to_char(chg.bill_after_dt,'mm/dd/yyyy') as BILL_AFTER_DT,cline.charge_amt,cline.dst_id "+
	    				" FROM CI_ACCUM_ASL_AMT accumasl, ci_bill_chg chg, ci_b_chg_line cline "+
	    				" WHERE ACCT_ID           ='"+sSACCT_ID+"' "+
	    				" AND WIN_START_DT        = to_date('"+sSwin_start_dt+"','mm/dd/yyyy') "+
	    				" AND ACCUM_GRP_ID        ='"+sSACCUM_GRP_ID+"' " +
	    				" AND  accumasl.billable_chg_id = chg.billable_chg_id "+
	    				" and accumasl.billable_chg_id = cline.billable_chg_id ";
	    		
	    		ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    		{
	    			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    			
	    			for(int i=0;i<AL.size();i++)
	    			{
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    				
	    				// To Get value of corresponding column
	    				String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	    				String swin_start_dt =(String)temp.get("WIN_START_DT");
	    				String sasl_cul_agg_amt =(String)temp.get("ASL_CUL_AGG_AMT");
	    				String sasl_cul_calc_limit =(String)temp.get("ASL_CUL_CALC_LIMIT");
	    				String sasl_cul_min_limit =(String)temp.get("ASL_CUL_MIN_LIMIT");
	    				String sssl_cul_credits =(String)temp.get("SSL_CUL_CREDITS");
	    				String sasl_max_payout_limit =(String)temp.get("ASL_MAX_PAYOUT_LIMIT");
	    				String sasl_mth_payment_limit =(String)temp.get("ASL_MTH_PAYMENT_LIMIT");
	    				if(sasl_mth_payment_limit=="NULL")
	                    {
	    					sasl_mth_payment_limit="NOVAL";
	                    }
	    				String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	    				if (sbillable_chg_id.equalsIgnoreCase("          "))
	    				{
	    					sbillable_chg_id = "NOVAL";
	    				}
	    				else
	    				{
	    					sbillable_chg_id = "GET"+sbillable_chg_id;
	    				}
	    				String sACCT_ID =(String)temp.get("ACCT_ID");
	    				String sasl_cul_calc_limit_pct =(String)temp.get("ASL_CUL_CALC_LIMIT_PCT");
	    				String sasl_limit =(String)temp.get("ASL_LIMIT");
	    				
	    				String sasl_cul__mth_payment_limit =(String)temp.get("ASL_CUL_MTH_PAYMENT_LIMIT");
	    				String sasl_credits =(String)temp.get("ASL_CREDITS");
	    				String sprev_billed_amt =(String)temp.get("PREV_BILLED_AMT");
	    				
	    				String ssa_id =(String)temp.get("SA_ID");
	    				String sbill_after_dt =(String)temp.get("BILL_AFTER_DT");
	    				if(sbill_after_dt=="NULL")
	                    {
	                    	sbill_after_dt="NOVAL";
	                    }
	    				String scharge_amt =(String)temp.get("CHARGE_AMT");
	    				String sdst_id =(String)temp.get("DST_ID");
	    				
	    				System.out.println("DB Data->"+sACCUM_GRP_ID+swin_start_dt+sasl_cul_agg_amt+sasl_cul_calc_limit+sasl_cul_min_limit+sssl_cul_credits+sasl_max_payout_limit+sasl_mth_payment_limit+sbillable_chg_id+sACCT_ID+sasl_cul_calc_limit_pct+sasl_limit+sasl_cul__mth_payment_limit+sasl_credits+sprev_billed_amt);
	    				System.out.println("DB Data->"+ssa_id+sbill_after_dt+scharge_amt+sdst_id);
	    				// Getting data from data sheet
	    				
	    				sSACCUM_GRP_ID   =         		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    				sSwin_start_dt =           		(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_agg_amt =         	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_calc_limit =      	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_min_limit =      		(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	    				sSssl_cul_credits =         	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	    				sSasl_max_payout_limit =    	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	    				sSasl_mth_payment_limit =   	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	    				sSbillable_chg_id =        		(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	    				sSACCT_ID =                		(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_calc_limit_pct = 	    (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	    				sSasl_limit =   			 	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul__mth_payment_limit = 	(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	    				sSasl_credits = 	   			(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
	    				sSprev_billed_amt =        		(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
	    				sSsa_id =						(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
	    				sSbill_after_dt =				(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
	    				sScharge_amt =					(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
	    				sSdst_id =						(String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
	    				System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSwin_start_dt+sSasl_cul_agg_amt+sSasl_cul_calc_limit+sSasl_cul_min_limit+sSssl_cul_credits+sSasl_max_payout_limit+sSasl_mth_payment_limit+sSbillable_chg_id+sSACCT_ID+sSasl_cul_calc_limit_pct+sSasl_limit+sSasl_cul__mth_payment_limit+sSasl_credits+sSprev_billed_amt);
	    				System.out.println("Sheet Data->"+sSsa_id+sSbill_after_dt+sScharge_amt+sSdst_id);
	    				if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	    				{
	    					CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    					
	    					if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	    					}
	    					if (sasl_cul_agg_amt.trim().equalsIgnoreCase(sSasl_cul_agg_amt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Aggregate Amount -> Expected->" + sSasl_cul_agg_amt + "  Actual->"+sasl_cul_agg_amt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Aggregate Amount -> Expected->" + sSasl_cul_agg_amt + "  Actual->"+sasl_cul_agg_amt);
	    					}
	    					if (sasl_cul_calc_limit.trim().equalsIgnoreCase(sSasl_cul_calc_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Calculated Limit -> Expected->" + sSasl_cul_calc_limit + "  Actual->"+sasl_cul_calc_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Calculated Limit -> Expected->" + sSasl_cul_calc_limit + "  Actual->"+sasl_cul_calc_limit);
	    					}
	    					if (sasl_cul_min_limit.trim().equalsIgnoreCase(sSasl_cul_min_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Minimum Limit -> Expected->" + sSasl_cul_min_limit + "  Actual->"+sasl_cul_min_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Minimum Limit -> Expected->" + sSasl_cul_min_limit + "  Actual->"+sasl_cul_min_limit);
	    					}
	    					
	    					if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cumulative Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cumulative Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	    					}
	    					
	    					
	    					if (sasl_max_payout_limit.trim().equalsIgnoreCase(sSasl_max_payout_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Maximum Payout Limit -> Expected->" + sSasl_max_payout_limit + "  Actual->"+sasl_max_payout_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Maximum Payout Limit -> Expected->" + sSasl_max_payout_limit + "  Actual->"+sasl_max_payout_limit);
	    					}
	    					if (sasl_mth_payment_limit.trim().equalsIgnoreCase(sSasl_mth_payment_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Method Payment Limit -> Expected->" + sSasl_mth_payment_limit + "  Actual->"+sasl_mth_payment_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" ->ASL Method Payment Limit -> Expected->" + sSasl_mth_payment_limit + "  Actual->"+sasl_mth_payment_limit);
	    					}
	    					if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	    					}
	    					if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	    					{	
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	    					}
	    					
	    					if (sasl_cul_calc_limit_pct.trim().equalsIgnoreCase(sSasl_cul_calc_limit_pct.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cumulative Calculated Limit Percentage -> Expected->" + sSasl_cul_calc_limit_pct + "  Actual->"+sasl_cul_calc_limit_pct);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cumulative Calculated Limit Percentage -> Expected->" + sSasl_cul_calc_limit_pct + "  Actual->"+sasl_cul_calc_limit_pct);
	    					}
	    					
	    					if (sasl_limit.trim().equalsIgnoreCase(sSasl_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Limit -> Expected->" + sSasl_limit + "  Actual->"+sasl_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Limit -> Expected->" + sSasl_limit + "  Actual->"+sasl_limit);
	    					}
	    					if (sasl_cul__mth_payment_limit.trim().equalsIgnoreCase(sSasl_cul__mth_payment_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cumulative Monthly Payment Limit   -> Expected->" + sSasl_cul__mth_payment_limit + "  Actual->"+sasl_cul__mth_payment_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cumulative Monthly Payment Limit  -> Expected->" + sSasl_cul__mth_payment_limit + "  Actual->"+sasl_cul__mth_payment_limit);
	    					}
	    					if (sasl_credits.trim().equalsIgnoreCase(sSasl_credits.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Credits   -> Expected->" + sSasl_credits + "  Actual->"+sasl_credits);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Credits  -> Expected->" + sSasl_credits + "  Actual->"+sasl_credits);
	    					}
	    					if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previously Billed Amount   -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previously Billed Amount  -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	    					}
	    					if (ssa_id.trim().equalsIgnoreCase(sSsa_id.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Contract ID  -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Contract ID -> Expected->" + sSsa_id + "  Actual->"+ssa_id);
	    					}
	    					if (sbill_after_dt.trim().equalsIgnoreCase(sSbill_after_dt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Bill after date  -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Bill after date -> Expected->" + sSbill_after_dt + "  Actual->"+sbill_after_dt);
	    					}
	    					if (scharge_amt.trim().equalsIgnoreCase(sScharge_amt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Charge Amount  -> Expected->" + sScharge_amt + "  Actual->"+scharge_amt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Charge Amount  -> Expected->" + sScharge_amt + "  Actual->"+scharge_amt);
	    					}
	    					if (sdst_id.trim().equalsIgnoreCase(sSdst_id.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> DST ID  -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> DST ID  -> Expected->" + sSdst_id + "  Actual->"+sdst_id);
	    					}
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    				}
	    			}
	    		}
	    	}
	    } catch (Exception e) 
	    {
	    	System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    }
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyLFAmountData
	'Function Description : To Verify LF data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for LF data Verification section in data sheet
	'                     : sEndRow    -> End row number for LF data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyLFAmountData(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifySSLAmountData");
		
	    String sSACCUM_GRP_ID,sSACCT_ID,sSwin_start_dt,sSCul_lf_fund,sSCul_lf_ro_fund,sSasl_cul_credits,sSagg_amt,sSssl_cul_credits;
	    String sSnet_agg_amt,sSprev_cul_max_liability,sSmax_liability,sScul_max_liability,sSbillable_chg_id,sSprev_billed_amt,sSincurred_end_dt;
	    String sSro_billable_chg_id,sSro_prev_billed_amt,sSincurred_start_dt,sSpaid_start_dt,sSpaid_end_dt,sSsettlement_date;
	    String sSsettlement_freq_flg,sSrun_in_sw,sSrun_in_incurred_start_dt,sSrun_in_incurred_end_dt,sSrun_in_paid_start_dt;
	    String sSrun_in_paid_end_dt,sSthird_pty_sw,sSthird_pty_incurred_start_dt,sSthird_pty_incurred_end_dt,sSthird_pty_paid_start_dt,sSthird_pty_paid_end_dt;
	    
	    String sQuery,sQuery1;
	    String sACCNT_ID,sWIN_START_DT, sTXN_RowCount, sCountFlg = "F";
	    int j = 0;
	    
		try 
		{
			sACCNT_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
	    	sWIN_START_DT		=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
	    	sTXN_RowCount   	=        (String)CF.FnGetCellValue(iCountRow ,3, sSheetName, sWorkbook).toString().trim();
	    	
	    	System.out.println("sWIN_START_DT = "+sWIN_START_DT);
	    	
	    	sQuery1 = "SELECT COUNT(*) FROM C1_ACCUM_GRP_LF accumlf, C1_Accum_Lf_Amt accumlfamt" + 
	    			"  WHERE accumlfamt.ACCT_ID = '"+sACCNT_ID+"'" + 
	    			"  AND accumlfamt.WIN_START_DT =TO_DATE('"+sWIN_START_DT+"','MM/DD/YYYY') AND accumlf.accum_grp_id = accumlfamt.accum_grp_id"; 
	    	
	    	System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T"))
	  	  	{
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	  	  		{
	  	  			j = sStartingRow;  			
		  			System.out.println("sStartingRow"+sStartingRow);
		  			System.out.println("sSheetName"+sSheetName);
		  			
		  			sSACCUM_GRP_ID	=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	  	  			sSACCT_ID		=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	  	  			sSwin_start_dt	=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
  	  			
	  	  			sQuery= "SELECT accumlfamt.ACCUM_GRP_ID," + 
	  	  					"       accumlfamt.ACCT_ID," + 
	  	  					"       TO_CHAR(accumlfamt.WIN_START_DT, 'mm/dd/yyyy') AS WIN_START_DT," + 
	  	  					"       accumlfamt.CUL_LF_FUND," + 
	  	  					"       accumlfamt.CUL_LF_RO_FUND," + 
	  	  					"       accumlfamt.ASL_CUL_CREDITS," + 
	  	  					"       accumlfamt.AGG_AMT," + 
	  	  					"       accumlfamt.SSL_CUL_CREDITS," + 
	  	  					"       accumlfamt.NET_AGG_AMT," + 
	  	  					"       accumlfamt.PREV_CUL_MAX_LIABILITY," + 
	  	  					"       accumlfamt.MAX_LIABILITY," + 
	  	  					"       accumlfamt.CUL_MAX_LIABILITY," + 
	  	  					"       accumlfamt.BILLABLE_CHG_ID," + 
	  	  					"       accumlfamt.PREV_BILLED_AMT," + 
	  	  					"       accumlfamt.RO_BILLABLE_CHG_ID," + 
	  	  					"       accumlfamt.RO_PREV_BILLED_AMT," + 
	  	  					"       TO_CHAR(accumlf.INCURRED_START_DT, 'mm/dd/yyyy') AS INCURRED_START_DT," + 
	  	  					"       TO_CHAR(accumlf.INCURRED_END_DT, 'mm/dd/yyyy') AS INCURRED_END_DT," + 
	  	  					"       TO_CHAR(accumlf.PAID_START_DT, 'mm/dd/yyyy') AS PAID_START_DT," + 
	  	  					"       TO_CHAR(accumlf.PAID_END_DT, 'mm/dd/yyyy') AS PAID_END_DT," + 
	  	  					"       TO_CHAR(accumlf.SETTLEMENT_DATE, 'mm/dd/yyyy') AS SETTLEMENT_DATE," + 
	  	  					"       accumlf.SETTLEMENT_FREQUENCY_FLG," + 
	  	  					"       accumlf.RUN_IN_SW," + 
	  	  					"       TO_CHAR(accumlf.RUN_IN_INCURRED_START_DT, 'mm/dd/yyyy') AS RUN_IN_INCURRED_START_DT," + 
	  	  					"       TO_CHAR(accumlf.RUN_IN_INCURRED_END_DT, 'mm/dd/yyyy') AS RUN_IN_INCURRED_END_DT," + 
	  	  					"       TO_CHAR(accumlf.RUN_IN_PAID_START_DT, 'mm/dd/yyyy') AS RUN_IN_PAID_START_DT," + 
	  	  					"       TO_CHAR(accumlf.RUN_IN_PAID_END_DT, 'mm/dd/yyyy') AS RUN_IN_PAID_END_DT," + 
	  	  					"       accumlf.THIRD_PTY_SW," + 
	  	  					"       TO_CHAR(accumlf.THIRD_PTY_INCURRED_START_DT, 'mm/dd/yyyy') AS THIRD_PTY_INCURRED_START_DT," + 
	  	  					"       TO_CHAR(accumlf.THIRD_PTY_INCURRED_END_DT, 'mm/dd/yyyy') AS THIRD_PTY_INCURRED_END_DT," + 
	  	  					"       TO_CHAR(accumlf.THIRD_PTY_PAID_START_DT, 'mm/dd/yyyy') AS THIRD_PTY_PAID_START_DT," + 
	  	  					"       TO_CHAR(accumlf.THIRD_PTY_PAID_END_DT, 'mm/dd/yyyy') AS THIRD_PTY_PAID_END_DT" + 
	  	  					"  FROM C1_ACCUM_GRP_LF accumlf, C1_ACCUM_LF_AMT accumlfamt" + 
	  	  					"  WHERE accumlfamt.ACCT_ID = '"+sSACCT_ID+"'" + 
	  	  					"  AND accumlfamt.WIN_START_DT = TO_DATE('"+sSwin_start_dt+"', 'mm/dd/yyyy')" + 
	  	  					//"  AND accumlfamt.ACCUM_GRP_ID = '"+sSACCUM_GRP_ID+"'" + 
	  	  					"  AND accumlf.ACCUM_GRP_ID = accumlfamt.ACCUM_GRP_ID"; 
	  	  			
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
	  	  				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
						sACCUM_GRP_ID = "GET"+sACCUM_GRP_ID;
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String scul_lf_ro_amt =(String)temp.get("CUL_LF_RO_FUND");
	                    String scul_lf_fund =(String)temp.get("CUL_LF_FUND");
	                    String sasl_cul_credits=(String)temp.get("ASL_CUL_CREDITS");
	                    String sagg_amt=(String)temp.get("AGG_AMT");
	                    String sssl_cul_credits = (String)temp.get("SSL_CUL_CREDITS");
	                    String snet_agg_amt = (String)temp.get("NET_AGG_AMT");
	                    String sprev_cul_max_liability = (String)temp.get("PREV_CUL_MAX_LIABILITY");
	                    String smax_liability = (String)temp.get("MAX_LIABILITY");
	                    String scul_max_liability = (String)temp.get("CUL_MAX_LIABILITY");
	                    String sbillable_chg_id = (String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    String sprev_billed_amt = (String)temp.get("PREV_BILLED_AMT");
	                    
	                    String sro_billable_chg_id = (String)temp.get("RO_BILLABLE_CHG_ID");
	                    if (sro_billable_chg_id.equalsIgnoreCase("            "))
	                    {
	                    	sro_billable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sro_billable_chg_id = "GET"+sro_billable_chg_id;
	                    }
	                    String sro_prev_billed_amt = (String)temp.get("RO_PREV_BILLED_AMT");
	                    
	                    String sincurred_start_dt = (String)temp.get("INCURRED_START_DT");
	                    String sincurred_end_dt = (String)temp.get("INCURRED_END_DT");
	                    String spaid_start_dt = (String)temp.get("PAID_START_DT");
	                    String spaid_end_dt = (String)temp.get("PAID_END_DT");
	                    String ssettlement_date = (String)temp.get("SETTLEMENT_DATE");
	                    String ssettlement_frequency_flg = (String)temp.get("SETTLEMENT_FREQUENCY_FLG");
	                    String srun_in_sw = (String)temp.get("RUN_IN_SW");
	                    String srun_in_incurred_start_dt = (String)temp.get("RUN_IN_INCURRED_START_DT");
	                    if(srun_in_incurred_start_dt=="NULL")
	                    {
	                    	srun_in_incurred_start_dt="NOVAL";
	                    }
	                    String srun_in_incurred_end_dt = (String)temp.get("RUN_IN_INCURRED_END_DT");
	                    if(srun_in_incurred_end_dt=="NULL")
	                    {
	                    	srun_in_incurred_end_dt="NOVAL";
	                    }
	                    String srun_in_paid_start_dt = (String)temp.get("RUN_IN_PAID_START_DT");
	                    if(srun_in_paid_start_dt=="NULL")
	                    {
	                    	srun_in_paid_start_dt="NOVAL";
	                    }
	                    String srun_in_paid_end_dt = (String)temp.get("RUN_IN_PAID_END_DT");
	                    if(srun_in_paid_end_dt=="NULL")
	                    {
	                    	srun_in_paid_end_dt="NOVAL";
	                    }
	                    String sthird_pty_sw = (String)temp.get("THIRD_PTY_SW");
	                    String sthird_pty_incurred_start_dt = (String)temp.get("THIRD_PTY_INCURRED_START_DT");
	                    if(sthird_pty_incurred_start_dt=="NULL")
	                    {
	                    	sthird_pty_incurred_start_dt="NOVAL";
	                    }
	                    String sthird_pty_incurred_end_dt = (String)temp.get("THIRD_PTY_INCURRED_END_DT");
	                    if(sthird_pty_incurred_end_dt=="NULL")
	                    {
	                    	sthird_pty_incurred_end_dt="NOVAL";
	                    }
	                    String sthird_pty_paid_start_dt = (String)temp.get("THIRD_PTY_PAID_START_DT");
	                    if(sthird_pty_paid_start_dt=="NULL")
	                    {
	                    	sthird_pty_paid_start_dt="NOVAL";
	                    }
	                    String sthird_pty_paid_end_dt = (String)temp.get("THIRD_PTY_PAID_END_DT");
	                    if(sthird_pty_paid_end_dt=="NULL")
	                    {
	                    	sthird_pty_paid_end_dt="NOVAL";
	                    }
	                    
	                     
	                    System.out.println("DB Data->"+sACCUM_GRP_ID+sACCT_ID+swin_start_dt+scul_lf_ro_amt+scul_lf_fund+sasl_cul_credits+sagg_amt+sssl_cul_credits);
	                    System.out.println("DB Data->"+snet_agg_amt+sprev_cul_max_liability+smax_liability+scul_max_liability+sbillable_chg_id+sprev_billed_amt);
	                    System.out.println("DB Data->"+sro_billable_chg_id+sincurred_start_dt+sincurred_end_dt+spaid_start_dt+spaid_end_dt+ssettlement_date);
	                    System.out.println("DB Data->"+ssettlement_frequency_flg+srun_in_incurred_start_dt+srun_in_incurred_start_dt+srun_in_incurred_end_dt+srun_in_paid_start_dt);
	                    System.out.println("DB Data->"+srun_in_paid_end_dt+sthird_pty_sw+sthird_pty_incurred_start_dt+sthird_pty_incurred_end_dt+sthird_pty_paid_start_dt+sthird_pty_paid_end_dt);
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID					=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID						=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt					=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSCul_lf_fund					=	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSCul_lf_ro_fund				=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSasl_cul_credits				=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sSagg_amt						=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_credits				=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sSnet_agg_amt					=	(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sSprev_cul_max_liability		=	(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSmax_liability					=	(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sScul_max_liability				=	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id				=	(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt				=	(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
	                    sSro_billable_chg_id			=	(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
	                    sSro_prev_billed_amt			=	(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
	                    sSincurred_start_dt				=	(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
	                    sSincurred_end_dt				=	(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
	                    sSpaid_start_dt					=	(String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
	                    sSpaid_end_dt					=	(String)CF.FnGetCellValue(sStartingRow ,20, sSheetName, sWorkbook).toString().trim();
	                    sSsettlement_date				=	(String)CF.FnGetCellValue(sStartingRow ,21, sSheetName, sWorkbook).toString().trim();	
	                    sSsettlement_freq_flg			=	(String)CF.FnGetCellValue(sStartingRow ,22, sSheetName, sWorkbook).toString().trim();
	                    sSrun_in_sw						=	(String)CF.FnGetCellValue(sStartingRow ,23, sSheetName, sWorkbook).toString().trim();
	                    sSrun_in_incurred_start_dt		=	(String)CF.FnGetCellValue(sStartingRow ,24, sSheetName, sWorkbook).toString().trim();
	                    sSrun_in_incurred_end_dt		=	(String)CF.FnGetCellValue(sStartingRow ,25, sSheetName, sWorkbook).toString().trim();
	                    sSrun_in_paid_start_dt			=	(String)CF.FnGetCellValue(sStartingRow ,26, sSheetName, sWorkbook).toString().trim();
	                    sSrun_in_paid_end_dt			=	(String)CF.FnGetCellValue(sStartingRow ,27, sSheetName, sWorkbook).toString().trim();
	                    sSthird_pty_sw					=	(String)CF.FnGetCellValue(sStartingRow ,28, sSheetName, sWorkbook).toString().trim();
	                    sSthird_pty_incurred_start_dt	=	(String)CF.FnGetCellValue(sStartingRow ,29, sSheetName, sWorkbook).toString().trim();
	                    sSthird_pty_incurred_end_dt		=	(String)CF.FnGetCellValue(sStartingRow ,30, sSheetName, sWorkbook).toString().trim();
	                    sSthird_pty_paid_start_dt		=	(String)CF.FnGetCellValue(sStartingRow ,31, sSheetName, sWorkbook).toString().trim();
	                    sSthird_pty_paid_end_dt			=	(String)CF.FnGetCellValue(sStartingRow ,32, sSheetName, sWorkbook).toString().trim();
	                    
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSACCT_ID+sSwin_start_dt+sSCul_lf_fund+sSCul_lf_ro_fund+sSasl_cul_credits+sSagg_amt+sSssl_cul_credits);
	                    System.out.println("Sheet Data->"+sSnet_agg_amt+sSprev_cul_max_liability+sSmax_liability+sScul_max_liability+sSbillable_chg_id+sSprev_billed_amt);
	                    System.out.println("Sheet Data->"+sSro_billable_chg_id+sSro_prev_billed_amt+sSincurred_start_dt+sSincurred_end_dt+sSpaid_start_dt+sSpaid_end_dt+sSsettlement_date);
	                    System.out.println("Sheet Data->"+sSsettlement_freq_flg+sSrun_in_sw+sSrun_in_incurred_start_dt+sSrun_in_incurred_end_dt+sSrun_in_paid_start_dt);
	                    System.out.println("Sheet Data->"+sSrun_in_paid_end_dt+sSthird_pty_sw+sSthird_pty_incurred_start_dt+sSthird_pty_incurred_end_dt+sSthird_pty_paid_start_dt+sSthird_pty_paid_end_dt);
	                    
	                    if (sACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSACCUM_GRP_ID.trim().substring(0,2)))
	                    {
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	                    }
	                    else
                    	{
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                    	}
                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
                    	}
                    	
                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
                    	}
                    	if (scul_lf_fund.trim().equalsIgnoreCase(sSCul_lf_fund.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul LF Fund -> Expected->" + sSCul_lf_fund + "  Actual->"+scul_lf_fund);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul LF Fund -> Expected->" + sSCul_lf_fund + "  Actual->"+scul_lf_fund);
                    	}
                    	if (scul_lf_ro_amt.trim().equalsIgnoreCase(sSCul_lf_ro_fund.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul LF RO Amount -> Expected->" + sSCul_lf_ro_fund + "  Actual->"+scul_lf_ro_amt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul LF RO Amount -> Expected->" + sSCul_lf_ro_fund + "  Actual->"+scul_lf_ro_amt);
                    	}
                    	if (sasl_cul_credits.trim().equalsIgnoreCase(sSasl_cul_credits.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL CUL Credits -> Expected->" + sSasl_cul_credits + "  Actual->"+sasl_cul_credits);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL CUL Credits -> Expected->" + sSasl_cul_credits + "  Actual->"+sasl_cul_credits);
                    	}
                    	if (sagg_amt.trim().equalsIgnoreCase(sSagg_amt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Agg Amount -> Expected->" + sSagg_amt + "  Actual->"+sagg_amt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Agg Amount -> Expected->" + sSagg_amt + "  Actual->"+sagg_amt);
                    	}
                    	
                    	if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL CUL Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL CUL Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
                    	}
                    	if (snet_agg_amt.trim().equalsIgnoreCase(sSnet_agg_amt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Net Agg Amount -> Expected->" + sSnet_agg_amt + "  Actual->"+snet_agg_amt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Net Agg Amount -> Expected->" + sSnet_agg_amt + "  Actual->"+snet_agg_amt);
                    	}
                    	
                    	if (sprev_cul_max_liability.trim().equalsIgnoreCase(sSprev_cul_max_liability.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previous Cul Max Liability -> Expected->" + sSprev_cul_max_liability + "  Actual->"+sprev_cul_max_liability);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previous Cul Max Liability -> Expected->" + sSprev_cul_max_liability + "  Actual->"+sprev_cul_max_liability);
                    	}
                    	if (smax_liability.trim().equalsIgnoreCase(sSmax_liability.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Max Liability -> Expected->" + sSmax_liability + "  Actual->"+smax_liability);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Max Liability -> Expected->" + sSmax_liability + "  Actual->"+smax_liability);
                    	}
                    	if (scul_max_liability.trim().equalsIgnoreCase(sScul_max_liability.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Max Liability -> Expected->" + sScul_max_liability + "  Actual->"+scul_max_liability);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Max Liability -> Expected->" + sScul_max_liability + "  Actual->"+scul_max_liability);
                    	}
                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
                    	}
                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
                    	}
                    	if (sro_billable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSro_billable_chg_id.trim().substring(0,2)))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sSro_billable_chg_id + "  Actual->"+sro_billable_chg_id);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sSro_billable_chg_id + "  Actual->"+sro_billable_chg_id);
                    	}
                    	if (sro_prev_billed_amt.trim().equalsIgnoreCase(sSro_prev_billed_amt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> RO Previous Billed Amount -> Expected->" + sSro_prev_billed_amt + "  Actual->"+sro_prev_billed_amt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> RO Previous Billed Amount -> Expected->" + sSro_prev_billed_amt + "  Actual->"+sro_prev_billed_amt);
                    	}
                    	if (sincurred_start_dt.trim().equalsIgnoreCase(sSincurred_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Incurred Start Date -> Expected->" + sSincurred_start_dt + "  Actual->"+sincurred_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ncurred Start Date -> Expected->" + sSincurred_start_dt + "  Actual->"+sincurred_start_dt);
                    	}
                    	if (spaid_start_dt.trim().equalsIgnoreCase(sSpaid_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Paid Start Date -> Expected->" + sSpaid_start_dt + "  Actual->"+spaid_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Paid Start Date -> Expected->" + sSpaid_start_dt + "  Actual->"+spaid_start_dt);
                    	}
                    	if (spaid_end_dt.trim().equalsIgnoreCase(sSpaid_end_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Paid End Date -> Expected->" + sSpaid_end_dt + "  Actual->"+spaid_end_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Paid End Date -> Expected->" + sSpaid_end_dt + "  Actual->"+spaid_end_dt);
                    	}
                    	if (ssettlement_date.trim().equalsIgnoreCase(sSsettlement_date.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Settlement Date -> Expected->" + sSsettlement_date + "  Actual->"+ssettlement_date);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Settlement Date -> Expected->" + sSsettlement_date + "  Actual->"+ssettlement_date);
                    	}
                    	if (ssettlement_frequency_flg.trim().equalsIgnoreCase(sSsettlement_freq_flg.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Settlement Frequency Flag -> Expected->" + sSsettlement_freq_flg + "  Actual->"+ssettlement_frequency_flg);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Settlement Frequency Flag -> Expected->" + sSsettlement_freq_flg + "  Actual->"+ssettlement_frequency_flg);
                    	}
                    	if (srun_in_sw.trim().equalsIgnoreCase(sSrun_in_sw.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run In Switch -> Expected->" + sSrun_in_sw + "  Actual->"+srun_in_sw);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run In Switch -> Expected->" + sSrun_in_sw + "  Actual->"+srun_in_sw);
                    	}
                    	if (srun_in_incurred_start_dt.trim().equalsIgnoreCase(sSrun_in_incurred_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run In Incurred Start Date -> Expected->" + sSrun_in_incurred_start_dt + "  Actual->"+srun_in_incurred_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run In Incurred Start Date -> Expected->" + sSrun_in_incurred_start_dt + "  Actual->"+srun_in_incurred_start_dt);
                    	}
                    	if (srun_in_incurred_end_dt.trim().equalsIgnoreCase(sSrun_in_incurred_end_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run In Incurred End Date -> Expected->" + sSrun_in_incurred_end_dt + "  Actual->"+srun_in_incurred_end_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run In Incurred End Date -> Expected->" + sSrun_in_incurred_end_dt + "  Actual->"+srun_in_incurred_end_dt);
                    	}
                    	if (srun_in_paid_start_dt.trim().equalsIgnoreCase(sSrun_in_paid_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run In Paid Start Date -> Expected->" + sSrun_in_paid_start_dt + "  Actual->"+srun_in_paid_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run In Paid Start Date -> Expected->" + sSrun_in_paid_start_dt + "  Actual->"+srun_in_paid_start_dt);
                    	}
                    	if (srun_in_paid_end_dt.trim().equalsIgnoreCase(sSrun_in_paid_end_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run In Paid End Date -> Expected->" + sSrun_in_paid_end_dt + "  Actual->"+srun_in_paid_end_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run In Paid End Date -> Expected->" + sSrun_in_paid_end_dt + "  Actual->"+srun_in_paid_end_dt);
                    	}
                    	if (sthird_pty_sw.trim().equalsIgnoreCase(sSthird_pty_sw.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Third Party Switch -> Expected->" + sSthird_pty_sw + "  Actual->"+sthird_pty_sw);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Third Party Switch -> Expected->" + sSthird_pty_sw + "  Actual->"+sthird_pty_sw);
                    	}
                    	if (sthird_pty_incurred_start_dt.trim().equalsIgnoreCase(sSthird_pty_incurred_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Third Party Incurred Start Date -> Expected->" + sSthird_pty_incurred_start_dt + "  Actual->"+sthird_pty_incurred_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Third Party Incurred Start Date -> Expected->" + sSthird_pty_incurred_start_dt + "  Actual->"+sthird_pty_incurred_start_dt);
                    	}
                    	if (sthird_pty_incurred_end_dt.trim().equalsIgnoreCase(sSthird_pty_incurred_end_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Third Party Incurred End Date -> Expected->" + sSthird_pty_incurred_end_dt + "  Actual->"+sthird_pty_incurred_end_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Third Party Incurred End Date -> Expected->" + sSthird_pty_incurred_end_dt + "  Actual->"+sthird_pty_incurred_end_dt);
                    	}
                    	if (sthird_pty_paid_start_dt.trim().equalsIgnoreCase(sSthird_pty_paid_start_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Third Party Paid Start Date -> Expected->" + sSthird_pty_paid_start_dt + "  Actual->"+sthird_pty_paid_start_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Third Party Paid Start Date -> Expected->" + sSthird_pty_paid_start_dt + "  Actual->"+sthird_pty_paid_start_dt);
                    	}
                    	if (sthird_pty_paid_end_dt.trim().equalsIgnoreCase(sSthird_pty_paid_end_dt.trim()))
                    	{
                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Third Party Paid End Date -> Expected->" + sSthird_pty_paid_end_dt + "  Actual->"+sthird_pty_paid_end_dt);
                    	}
                    	else
                    	{
                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Third Party Paid End Date -> Expected->" + sSthird_pty_paid_end_dt + "  Actual->"+sthird_pty_paid_end_dt);
                    	}
	                    
	                    
	  	  			}
	  	  		}
	  	  	}
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyDAAmountData
	'Function Description : To Verify DA data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for LF data Verification section in data sheet
	'                     : sEndRow    -> End row number for LF data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyDAAmountData(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyDAAmountData");
		
	    String sSACCUM_GRP_ID,sSACCT_ID,sSwin_start_dt,sSbillable_chg_id,sScredit_billable_chg_id,sSdisc_cul_agg_amt;
	    String sScul_min_enr_limit,sScul_max_enr_limit,sScul_min_flat_limit,sScul_max_flat_limit,sSprev_billed_amt,sScredit_prev_billed_amt;
	    String sQuery,sQuery1;
	    String sACCNT_ID,sWIN_START_DT, sTXN_RowCount, sCountFlg = "F";
	    int j = 0;
	    
		try 
		{
			sACCNT_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
	    	sWIN_START_DT		=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
	    	sTXN_RowCount   	=        (String)CF.FnGetCellValue(iCountRow ,3, sSheetName, sWorkbook).toString().trim();
	    	
	    	System.out.println("sWIN_START_DT = "+sWIN_START_DT);
	    	
	    	sQuery1 = "SELECT COUNT(*) FROM C1_ACCUM_DISC_ARG_AMT accumdaamt, C1_ACCUM_GRP_DA accumdgrp" + 
	    			"  WHERE accumdaamt.ACCT_ID = '"+sACCNT_ID+"'" + 
	    			"  AND accumdaamt.accum_grp_id = accumdgrp.accum_grp_id"; 
	    	
	    	System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T"))
	  	  	{
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	  	  		{
	  	  			j = sStartingRow;  			
		  			System.out.println("sStartingRow"+sStartingRow);
		  			System.out.println("sSheetName"+sSheetName);
		  			
		  			sSACCUM_GRP_ID	=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	  	  			sSACCT_ID		=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	  	  			sSwin_start_dt	=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
  	  			
	  	  			sQuery= "SELECT accumdaamt.ACCUM_GRP_ID," + 
	  	  					"       accumdaamt.ACCT_ID," + 
	  	  					"       TO_CHAR(accumdaamt.WIN_START_DT, 'mm/dd/yyyy') AS WIN_START_DT," + 
	  	  					"       accumdaamt.DISC_CUL_AGG_AMT," + 
	  	  					"       accumdaamt.BILLABLE_CHG_ID," + 
	  	  					"       accumdaamt.CUL_MIN_ENR_LIMIT," + 
	  	  					"       accumdaamt.CUL_MAX_ENR_LIMIT," + 
	  	  					"       accumdaamt.CUL_MIN_FLAT_LIMIT," + 
	  	  					"       accumdaamt.CUL_MAX_FLAT_LIMIT," + 
	  	  					"       accumdaamt.CREDIT_BILLABLE_CHG_ID," + 
	  	  					"       accumdaamt.PREV_BILLED_AMT," + 
	  	  					"       accumdaamt.CREDIT_PREV_BILLED_AMT" + 
	  	  					"  FROM C1_ACCUM_GRP_DA accumdgrp, C1_ACCUM_DISC_ARG_AMT accumdaamt" + 
	  	  					" WHERE accumdaamt.ACCT_ID = '"+sSACCT_ID+"'" + 
	  	  					"   AND accumdaamt.ACCUM_GRP_ID = '"+sSACCUM_GRP_ID+"'" + 
	  	  					"   AND accumdaamt.WIN_START_DT = TO_DATE('"+sSwin_start_dt+"','mm/dd/yyyy')" + 
	  	  					"   AND accumdaamt.ACCUM_GRP_ID = accumdgrp.ACCUM_GRP_ID";

	  	  			
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
	  	  				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String sdisc_cul_agg_amt =(String)temp.get("DISC_CUL_AGG_AMT");
	                    String scul_min_enr_limit=(String)temp.get("CUL_MIN_ENR_LIMIT");
	                    String scul_max_enr_limit=(String)temp.get("CUL_MAX_ENR_LIMIT");
	                    String scul_min_flat_limit = (String)temp.get("CUL_MIN_FLAT_LIMIT");
	                    String scul_max_flat_limit = (String)temp.get("CUL_MAX_FLAT_LIMIT");
	                    String sprev_billed_amt = (String)temp.get("PREV_BILLED_AMT");
	                    String scredit_prev_billed_amt = (String)temp.get("CREDIT_PREV_BILLED_AMT");
	                    String sbillable_chg_id = (String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    String scredit_billable_chg_id = (String)temp.get("CREDIT_BILLABLE_CHG_ID");
	                    if (scredit_billable_chg_id.equalsIgnoreCase("            "))
	                    {
	                    	scredit_billable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	scredit_billable_chg_id = "GET"+scredit_billable_chg_id;
	                    }
	                   
	                    System.out.println("DB Data->"+sACCUM_GRP_ID+sACCT_ID+swin_start_dt+sdisc_cul_agg_amt+scul_min_enr_limit+scul_max_enr_limit+scul_min_flat_limit+scul_max_flat_limit);
	                    System.out.println("DB Data->"+sprev_billed_amt+scredit_prev_billed_amt+sbillable_chg_id+scredit_billable_chg_id);
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID					=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID						=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt					=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id				=	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sScredit_billable_chg_id		=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSdisc_cul_agg_amt				=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sScul_min_enr_limit				=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sScul_max_enr_limit				=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sScul_min_flat_limit			=	(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sScul_max_flat_limit			=	(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt				=	(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sScredit_prev_billed_amt		=	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                   
	                       
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSACCT_ID+sSwin_start_dt+sSbillable_chg_id+sScredit_billable_chg_id+sSdisc_cul_agg_amt);
	                    System.out.println("Sheet Data->"+sScul_min_enr_limit+sScul_max_enr_limit+sScul_min_flat_limit+sSprev_billed_amt+sScredit_prev_billed_amt);
	                      
	                    if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	                    {
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                          
	                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	
	                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	if (scredit_billable_chg_id.trim().substring(0,2).equalsIgnoreCase(sScredit_billable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sScredit_billable_chg_id + "  Actual->"+scredit_billable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sScredit_billable_chg_id + "  Actual->"+scredit_billable_chg_id);
	                    	}
	                    	if (sdisc_cul_agg_amt.trim().equalsIgnoreCase(sSdisc_cul_agg_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Discount Cul Aggregation Amount -> Expected->" + sSdisc_cul_agg_amt + "  Actual->"+sdisc_cul_agg_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Discount Cul Aggregation Amount -> Expected->" + sSdisc_cul_agg_amt + "  Actual->"+sdisc_cul_agg_amt);
	                    	}
	                    	if (scul_min_enr_limit.trim().equalsIgnoreCase(sScul_min_enr_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Min Enr Limit -> Expected->" + sScul_min_enr_limit + "  Actual->"+scul_min_enr_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Min Enr Limit -> Expected->" + sScul_min_enr_limit + "  Actual->"+scul_min_enr_limit);
	                    	}
	                    	if (scul_max_enr_limit.trim().equalsIgnoreCase(sScul_max_enr_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul max Enr Limit -> Expected->" + sScul_max_enr_limit + "  Actual->"+scul_max_enr_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul max Enr Limit -> Expected->" + sScul_max_enr_limit + "  Actual->"+scul_max_enr_limit);
	                    	}
	                    	if (scul_min_flat_limit.trim().equalsIgnoreCase(sScul_min_flat_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Min Flat Limit -> Expected->" + sScul_min_flat_limit + "  Actual->"+scul_min_flat_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Min Flat Limit -> Expected->" + sScul_min_flat_limit + "  Actual->"+scul_min_flat_limit);
	                    	}
	                    	
	                    	if (scul_max_flat_limit.trim().equalsIgnoreCase(sScul_max_flat_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Max Flat Limit -> Expected->" + sScul_max_flat_limit + "  Actual->"+scul_max_flat_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Max Flat Limit -> Expected->" + sScul_max_flat_limit + "  Actual->"+scul_max_flat_limit);
	                    	}
	                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	if (scredit_prev_billed_amt.trim().equalsIgnoreCase(sScredit_prev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Credit Previous Billed Amount -> Expected->" + sScredit_prev_billed_amt + "  Actual->"+scredit_prev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Credit Previous Billed Amount -> Expected->" + sScredit_prev_billed_amt + "  Actual->"+scredit_prev_billed_amt);
	                    	}
	                    	
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	                    }
	  	  			}
	  	  		}
	  	  	}
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyOffSetAdjustmentData
	'Function Description : To Verify OffSet Adjustment data on contract
	'Input Parameters     : sStartRow  -> Starting row number for LF data Verification section in data sheet
	'                     : sEndRow    -> End row number for LF data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyOffSetAdjustmentData(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyOffSetAdjustmentData");
		
	    String sSADJ_ID,sSSA_ID,sSCRE_DT,sSADJ_TYPE_CD,sSADJ_STATUS_FLG,sSADJ_AMT;
	    String sSCURRENCY_CD,sSCOMMENTS;
	    String sQuery;
	    
	    int j = 0;
	    
		try 
		{
			for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
			{
				j = sStartingRow;  			
				System.out.println("sStartingRow"+sStartingRow);
				System.out.println("sSheetName"+sSheetName);
				
				sSSA_ID			=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
				sSADJ_AMT		=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
                
				sQuery= "SELECT adj.ADJ_ID," + 
						"       adj.SA_ID," + 
						"       TO_CHAR(adj.CRE_DT, 'mm/dd/yyyy') AS CRE_DT," + 
						"       adj.ADJ_TYPE_CD," + 
						"       adj.ADJ_STATUS_FLG," + 
						"       adj.CAN_RSN_CD," + 
						"       adj.ADJ_AMT," + 
						"       adj.XFER_ADJ_ID," + 
						"       adj.CURRENCY_CD," + 
						"       adj.COMMENTS" + 
						"  FROM CI_ADJ adj" + 
						"  WHERE adj.SA_ID = '"+sSSA_ID+"' AND adj.ADJ_AMT = '"+sSADJ_AMT+"'" ;
	  	  				
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
	  	  				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sadj_id =(String)temp.get("ADJ_ID");
						sadj_id = "GET"+sadj_id;
	                    String ssa_id =(String)temp.get("SA_ID");
	                    String scre_dt =(String)temp.get("CRE_DT");
	                    scre_dt = "GET"+scre_dt;
	                    String sadj_type_cd =(String)temp.get("ADJ_TYPE_CD");
	                    String sadj_status_flg =(String)temp.get("ADJ_STATUS_FLG");
	                    String scan_rsn_cd=(String)temp.get("CAN_RSN_CD");
	                    String sadj_amt=(String)temp.get("ADJ_AMT");
	                    String sxfer_adj_id = (String)temp.get("XFER_ADJ_ID");
	                    String scurrency_cd = (String)temp.get("CURRENCY_CD");
	                    String scomments = (String)temp.get("COMMENTS");
	                     
	                     
	                    System.out.println("DB Data->"+sadj_id+ssa_id+scre_dt+sadj_type_cd+sadj_status_flg+scan_rsn_cd+sadj_amt+sxfer_adj_id);
	                    System.out.println("DB Data->"+scurrency_cd+scomments);
	                     
	                    // Getting data from data sheet
	                    sSCRE_DT			=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSADJ_TYPE_CD		=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSADJ_AMT			=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSADJ_STATUS_FLG	=	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSCURRENCY_CD		=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSCOMMENTS			=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sSSA_ID				=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sSADJ_ID			=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    
	                   
	                    System.out.println("Sheet Data->"+sSCRE_DT+sSADJ_TYPE_CD+sSADJ_AMT+sSADJ_STATUS_FLG+sSCURRENCY_CD);
	                    System.out.println("Sheet Data->"+sSCOMMENTS+sSSA_ID+sSADJ_ID);
	                    
	                    if (ssa_id.trim().equalsIgnoreCase(sSSA_ID.trim()) && sadj_amt.trim().equalsIgnoreCase(sSADJ_AMT.trim()))
	                    {
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Contract ID is -> " + sSSA_ID + " Actual value of Contract Group ID is---->"+ssa_id);
                          
	                    	if (scre_dt.trim().substring(0,2).equalsIgnoreCase(sSCRE_DT.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Create Date -> Expected->" + sSCRE_DT + "  Actual->"+scre_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Create Date -> Expected->" + sSCRE_DT + "  Actual->"+scre_dt);
	                    	}
	                    	
	                    	if (sadj_type_cd.trim().equalsIgnoreCase(sSADJ_TYPE_CD.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Adjustment Type Code  -> Expected->" + sSADJ_TYPE_CD + "  Actual->"+sadj_type_cd);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Adjustment Type Code -> Expected->" + sSADJ_TYPE_CD + "  Actual->"+sadj_type_cd);
	                    	}
	                    	if (sadj_amt.trim().equalsIgnoreCase(sSADJ_AMT.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Adjustment Amount -> Expected->" + sSADJ_AMT + "  Actual->"+sadj_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Adjustment Amount -> Expected->" + sSADJ_AMT + "  Actual->"+sadj_amt);
	                    	}
	                    	if (sadj_status_flg.trim().equalsIgnoreCase(sSADJ_STATUS_FLG.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Adjustment Status Flag -> Expected->" + sSADJ_STATUS_FLG + "  Actual->"+sadj_status_flg);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Adjustment Status Flag -> Expected->" + sSADJ_STATUS_FLG + "  Actual->"+sadj_status_flg);
	                    	}
	                    	if (scurrency_cd.trim().equalsIgnoreCase(sSCURRENCY_CD.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Currency Code -> Expected->" + sSCURRENCY_CD + "  Actual->"+scurrency_cd);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Currency Code -> Expected->" + sSCURRENCY_CD + "  Actual->"+scurrency_cd);
	                    	}
	                    	if (scomments.trim().contains(sSCOMMENTS.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Comments -> Expected->" + sSCOMMENTS + "  Actual->"+scomments);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Comments -> Expected->" + sSCOMMENTS + "  Actual->"+scomments);
	                    	}
	                    	
	                    	if (sadj_id.trim().substring(0,2).equalsIgnoreCase(sSADJ_ID.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Adjustment Id -> Expected->" + sSADJ_ID + "  Actual->"+sadj_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Adjustment Id -> Expected->" + sSADJ_ID + "  Actual->"+sadj_id);
	                    	}
	                    	
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSSA_ID + " Actual value of Accumulation Group ID is---->"+ssa_id);
	                    }
	  	  			}
	  	  		}
	  	  	
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionData
	'Function Description : To Verify transaction data after running all the batches
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'############################################################################################################################*/
	public void FnVerifyTransactionData(int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionData");
		
		String sQuery;
		String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSpriceitem_cd,sSdetail_priceitem_parm_grp_id,sSpriceitem_parm_grp_id,sSprice_asgn_id,sSstart_dt,sSend_dt,sSdo_not_agg_sw, sStxn_pritm_status_cd,sSpa_acct_id;
		String sSpa_per_id,sSpa_pricelist_id,sSsqi_cd,sSsvc_qty,sSbillable_chg_id;
		String sSeqNo = "10", sDivCode = "";
		int j = 0;
		try
		{
			for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
			{
				j = sStartingRow;
					
				System.out.println("sStartingRow"+sStartingRow);
				System.out.println("sSheetName"+sSheetName);
				
				sSTXN_DETAIL_ID	= 					(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sSinitial_price_item_cd =			(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				sSeqNo = 							(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
				sDivCode = 							(String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
				if (sSeqNo.equalsIgnoreCase("NoValue"))
				{
					sSeqNo = "10";
				}
				if (sDivCode.equalsIgnoreCase("NoValue"))
				{
					sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
					" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty,sq.seq_num"+
					" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
					" where bc.billable_chg_id = p.billable_chg_id"+
					" and sq.billable_chg_id = bc.billable_chg_id"+
					" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and sq.seq_num = '"+sSeqNo+"'";
								
				}
				else 
				{
					sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
						" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty,sq.seq_num"+
						" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
						" where bc.billable_chg_id = p.billable_chg_id"+
						" and sq.billable_chg_id = bc.billable_chg_id"+
						" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and sq.seq_num = '"+sSeqNo+"' and p.cis_division = '"+sDivCode+"'";
						
				}
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
						String sACCT_ID =(String)temp.get("ACCT_ID");
						String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
						String spriceitem_cd =(String)temp.get("PRICEITEM_CD");
						String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
						String spriceitem_parm_grp_id =(String)temp.get("PRICEITEM_PARM_GRP_ID");
						String sprice_asgn_id =(String)temp.get("PRICE_ASGN_ID");
						String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
						if (sbillable_chg_id.equalsIgnoreCase("          "))
						{
							sbillable_chg_id = "NOVAL";
						}
						else
						{
							sbillable_chg_id = "GET"+sbillable_chg_id;
						}
						String sstart_dt =(String)temp.get("START_DT");
						String send_dt =(String)temp.get("END_DT");
						String sdo_not_agg_sw =(String)temp.get("DO_NOT_AGG_SW");
						String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
						String spa_acct_id =(String)temp.get("PA_ACCT_ID");
						if (spa_acct_id.equalsIgnoreCase("          "))
						{
							spa_acct_id = "NOVAL";
						}
						String spa_per_id =(String)temp.get("PA_PER_ID");
						if (spa_per_id.equalsIgnoreCase("          "))
						{
							spa_per_id = "NOVAL";
						}
						String spa_pricelist_id =(String)temp.get("PA_PRICELIST_ID");
						if (spa_pricelist_id.equalsIgnoreCase("          "))
						{
							spa_pricelist_id = "NOVAL";
						}
						String ssqi_cd =(String)temp.get("SQI_CD");
						String ssvc_qty =(String)temp.get("SVC_QTY");
						String ssseq =(String)temp.get("SEQ_NUM");
						
						System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+spriceitem_cd+sdetail_priceitem_parm_grp_id+spriceitem_parm_grp_id+sprice_asgn_id+sbillable_chg_id+sstart_dt+send_dt);
						
						System.out.println("DB Data->"+sdo_not_agg_sw+stxn_pritm_status_cd+spa_acct_id+spa_per_id+spa_pricelist_id+ssqi_cd+ssvc_qty+ssseq);
						
						// Getting data from data sheet
											
						sSTXN_DETAIL_ID	= 					(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSACCT_ID = 						(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSinitial_price_item_cd =			(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_cd =					(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSdetail_priceitem_parm_grp_id =  	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_parm_grp_id = 			(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sSprice_asgn_id =					(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sSbillable_chg_id =					(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sSstart_dt =						(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sSend_dt =							(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						sSdo_not_agg_sw =					(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
						sStxn_pritm_status_cd =				(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
						sSpa_acct_id =						(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
						sSpa_per_id =						(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
						sSpa_pricelist_id =					(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
						sSsqi_cd =							(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
						sSsvc_qty =							(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
						
						// Data sheet data
						
						System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSpriceitem_cd+sSdetail_priceitem_parm_grp_id+sSpriceitem_parm_grp_id+sSprice_asgn_id+sSbillable_chg_id+sSstart_dt+sSend_dt);
						
						System.out.println("Datasheet Data->"+sSdo_not_agg_sw+sStxn_pritm_status_cd+sSpa_acct_id+sSpa_per_id+sSpa_pricelist_id+sSsqi_cd+sSsvc_qty);
						
						if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							
							if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2)))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							if (spriceitem_cd.trim().equalsIgnoreCase(sSpriceitem_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
							if (sdetail_priceitem_parm_grp_id.trim().equalsIgnoreCase(sSdetail_priceitem_parm_grp_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign Group from ci_txn_dtl_pritm  -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign Group from ci_txn_dtl_pritm  -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
							}
							if (spriceitem_parm_grp_id.trim().equalsIgnoreCase(sSpriceitem_parm_grp_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
							}
							if (sprice_asgn_id.trim().equalsIgnoreCase(sSprice_asgn_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							
							if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							if (sdo_not_agg_sw.trim().equalsIgnoreCase(sSdo_not_agg_sw.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							if (spa_acct_id.trim().equalsIgnoreCase(sSpa_acct_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							if (spa_per_id.trim().equalsIgnoreCase(sSpa_per_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							if (spa_pricelist_id.trim().equalsIgnoreCase(sSpa_pricelist_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							if (sSsvc_qty.trim().equalsIgnoreCase(ssvc_qty.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
							
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
						}
					}
				}	
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
				}
				
			} // end of for loop k
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionDataWithParmStr
	'Function Description : To Verify transaction data after running all the batches
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'############################################################################################################################*/
	public void FnVerifyTransactionDataWithParmStr(int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionDataWithParmStr");
		
		String sQuery,sQuery2,sQuery3;
		String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSpriceitem_cd,sSdetail_priceitem_parm_grp_id,sSpriceitem_parm_grp_id,sSprice_asgn_id,sSstart_dt,sSend_dt,sSdo_not_agg_sw, sStxn_pritm_status_cd,sSpa_acct_id;
		String sSpa_per_id,sSpa_pricelist_id,sSsqi_cd,sSsvc_qty,sSbillable_chg_id,sSdetail_priceitem_parm_grp_parm_str="",sSpriceitem_parm_grp_parm_str="";
		String sSeqNo = "10", sDivCode = "";
		String sCount;
		int j = 0;
		try
		{
			for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
			{
				j = sStartingRow;
					
				System.out.println("sStartingRow"+sStartingRow);
				System.out.println("sSheetName"+sSheetName);
				
				sSTXN_DETAIL_ID	= 					(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sSinitial_price_item_cd =			(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				sSeqNo = 							(String)CF.FnGetCellValue(sStartingRow ,18, sSheetName, sWorkbook).toString().trim();
				sDivCode = 							(String)CF.FnGetCellValue(sStartingRow ,19, sSheetName, sWorkbook).toString().trim();
				if (sSeqNo.equalsIgnoreCase("NoValue"))
				{
					sSeqNo = "10";
				}
				if (sDivCode.equalsIgnoreCase("NoValue"))
				{
					sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
					" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty,sq.seq_num"+
					" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
					" where bc.billable_chg_id = p.billable_chg_id"+
					" and sq.billable_chg_id = bc.billable_chg_id"+
					" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and sq.seq_num = '"+sSeqNo+"'";
								
				}
				else 
				{
					sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
						" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty,sq.seq_num"+
						" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
						" where bc.billable_chg_id = p.billable_chg_id"+
						" and sq.billable_chg_id = bc.billable_chg_id"+
						" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"' and sq.seq_num = '"+sSeqNo+"' and p.cis_division = '"+sDivCode+"'";
						
				}
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
						String sdetail_priceitem_parm_grp_parm_str = "";
						String spriceitem_parm_grp_parm_str = "";
						String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
						String sACCT_ID =(String)temp.get("ACCT_ID");
						String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
						String spriceitem_cd =(String)temp.get("PRICEITEM_CD");
						
						String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
						System.out.println("sdetail_priceitem_parm_grp_id================="+sdetail_priceitem_parm_grp_id);
                        if (sdetail_priceitem_parm_grp_id.equalsIgnoreCase("          "))
                        {
                      	  sdetail_priceitem_parm_grp_id = "NOVAL";
                        }
                        else
                        {
                      	  String sdetail_priceitem_parm_grp_id_str = sdetail_priceitem_parm_grp_id;
                      	  sdetail_priceitem_parm_grp_id = "GET"+sdetail_priceitem_parm_grp_id;
                      	  
                      	  sQuery2  = "SELECT COUNT(*) FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+sdetail_priceitem_parm_grp_id_str+"'";
                      	  sCount = (String)	 FnGetDBColumnValue(sQuery2,"COUNT(*)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                      	  System.out.println("sCount================="+sCount);
                            if(!sCount.equalsIgnoreCase("0"))
                            {
                      		  sQuery3  = "SELECT PARM_STR FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+sdetail_priceitem_parm_grp_id_str+"'";
                      		  sdetail_priceitem_parm_grp_parm_str = (String) FnGetDBColumnValue(sQuery3,"PARM_STR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                      		  System.out.println("sdetail_priceitem_parm_grp_parm_str ======================"+sdetail_priceitem_parm_grp_parm_str);
                            }
                            else
                            {
                          	  sdetail_priceitem_parm_grp_parm_str = "NOVAL";
                            }
                        }
						
						
						String spriceitem_parm_grp_id =(String)temp.get("PRICEITEM_PARM_GRP_ID");
						System.out.println("spriceitem_parm_grp_id================="+spriceitem_parm_grp_id);
                        if (spriceitem_parm_grp_id.equalsIgnoreCase("          "))
                        {
                      	  spriceitem_parm_grp_id = "NOVAL";
                        }
                        else
                        {
                      	  String spriceitem_parm_grp_id_str = spriceitem_parm_grp_id;
                      	  spriceitem_parm_grp_id = "GET"+spriceitem_parm_grp_id;
                      	  
                      	  sQuery2  = "SELECT COUNT(*) FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+spriceitem_parm_grp_id_str+"'";
                      	  sCount = (String)	 FnGetDBColumnValue(sQuery2,"COUNT(*)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                      	  System.out.println("sCount================="+sCount);
                            if(!sCount.equalsIgnoreCase("0"))
                            {
                      		  sQuery3  = "SELECT PARM_STR FROM CI_PRICEITEM_PARM_GRP_K WHERE PRICEITEM_PARM_GRP_ID = '"+spriceitem_parm_grp_id_str+"'";
                      		  spriceitem_parm_grp_parm_str = (String) FnGetDBColumnValue(sQuery3,"PARM_STR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                      		  System.out.println("spriceitem_parm_grp_parm_str=================="+spriceitem_parm_grp_parm_str);
                            }
                            else
                            {
                          	  spriceitem_parm_grp_parm_str = "NOVAL";
                            }
                        }
                        
						String sprice_asgn_id =(String)temp.get("PRICE_ASGN_ID");
						String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
						if (sbillable_chg_id.equalsIgnoreCase("          "))
						{
							sbillable_chg_id = "NOVAL";
						}
						else
						{
							sbillable_chg_id = "GET"+sbillable_chg_id;
						}
						String sstart_dt =(String)temp.get("START_DT");
						String send_dt =(String)temp.get("END_DT");
						String sdo_not_agg_sw =(String)temp.get("DO_NOT_AGG_SW");
						String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
						String spa_acct_id =(String)temp.get("PA_ACCT_ID");
						if (spa_acct_id.equalsIgnoreCase("          "))
						{
							spa_acct_id = "NOVAL";
						}
						String spa_per_id =(String)temp.get("PA_PER_ID");
						if (spa_per_id.equalsIgnoreCase("          "))
						{
							spa_per_id = "NOVAL";
						}
						String spa_pricelist_id =(String)temp.get("PA_PRICELIST_ID");
						if (spa_pricelist_id.equalsIgnoreCase("          "))
						{
							spa_pricelist_id = "NOVAL";
						}
						String ssqi_cd =(String)temp.get("SQI_CD");
						String ssvc_qty =(String)temp.get("SVC_QTY");
						String ssseq =(String)temp.get("SEQ_NUM");
						
						System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+spriceitem_cd+sdetail_priceitem_parm_grp_id+spriceitem_parm_grp_id+sprice_asgn_id+sbillable_chg_id+sstart_dt+send_dt);
						
						System.out.println("DB Data->"+sdo_not_agg_sw+stxn_pritm_status_cd+spa_acct_id+spa_per_id+spa_pricelist_id+ssqi_cd+ssvc_qty+ssseq);
						
						// Getting data from data sheet
											
						sSTXN_DETAIL_ID	= 					(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSACCT_ID = 						(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSinitial_price_item_cd =			(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_cd =					(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSdetail_priceitem_parm_grp_id =  	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_parm_grp_id = 			(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sSprice_asgn_id =					(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sSbillable_chg_id =					(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sSstart_dt =						(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sSend_dt =							(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						sSdo_not_agg_sw =					(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
						sStxn_pritm_status_cd =				(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
						sSpa_acct_id =						(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
						sSpa_per_id =						(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
						sSpa_pricelist_id =					(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
						sSsqi_cd =							(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
						sSsvc_qty =							(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
						sSdetail_priceitem_parm_grp_parm_str=(String)CF.FnGetCellValue(sStartingRow ,20, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_parm_grp_parm_str=		(String)CF.FnGetCellValue(sStartingRow ,20, sSheetName, sWorkbook).toString().trim();
						// Data sheet data
						
						System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSpriceitem_cd+sSdetail_priceitem_parm_grp_id+sSpriceitem_parm_grp_id+sSprice_asgn_id+sSbillable_chg_id+sSstart_dt+sSend_dt);
						
						System.out.println("Datasheet Data->"+sSdo_not_agg_sw+sStxn_pritm_status_cd+sSpa_acct_id+sSpa_per_id+sSpa_pricelist_id+sSsqi_cd+sSsvc_qty);
						
						if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							
							if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2)))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							if (spriceitem_cd.trim().equalsIgnoreCase(sSpriceitem_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
							if (sdetail_priceitem_parm_grp_id.trim().substring(0,2).equalsIgnoreCase(sSdetail_priceitem_parm_grp_id.trim().substring(0,2)))
							{
								if((sdetail_priceitem_parm_grp_parm_str.trim()).equalsIgnoreCase(sSdetail_priceitem_parm_grp_parm_str.trim()))
								{
                      			  	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
                      		 	}
								else
								{
									CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price item param id -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
                      		  	}
							}
							if (spriceitem_parm_grp_id.trim().substring(0,2).equalsIgnoreCase(sSpriceitem_parm_grp_id.trim().substring(0,2)))
							{
								if((spriceitem_parm_grp_parm_str.trim()).equalsIgnoreCase(sSpriceitem_parm_grp_parm_str.trim()))
								{
									CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
								}
								else
								{
									CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
								}
							}
							if (sprice_asgn_id.trim().equalsIgnoreCase(sSprice_asgn_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							
							if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							if (sdo_not_agg_sw.trim().equalsIgnoreCase(sSdo_not_agg_sw.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							if (spa_acct_id.trim().equalsIgnoreCase(sSpa_acct_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							if (spa_per_id.trim().equalsIgnoreCase(sSpa_per_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							if (spa_pricelist_id.trim().equalsIgnoreCase(sSpa_pricelist_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							if (sSsvc_qty.trim().equalsIgnoreCase(ssvc_qty.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
							
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
						}
					}
				}	
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
				}
				
			} // end of for loop k
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionDataSingleEntryORMultipleEntry
	'Function Description : To Verify transaction data after running all the batches
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'############################################################################################################################*/
	public void FnVerifyTransactionDataSingleEntryORMultipleEntry(int sStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionDataSingleEntryORMultipleEntry");
		
		String sQuery;
		String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSpriceitem_cd,sSdetail_priceitem_parm_grp_id,sSpriceitem_parm_grp_id,sSprice_asgn_id,sSstart_dt,sSend_dt,sSdo_not_agg_sw, sStxn_pritm_status_cd,sSpa_acct_id;
		String sSpa_per_id,sSpa_pricelist_id,sSsqi_cd,sSsvc_qty,sSbillable_chg_id;
		int j = 0;
		try 
		{
			j = sStartingRow;
			
			System.out.println("sStartingRow"+sStartingRow);
			System.out.println("sSheetName"+sSheetName);
					
			sSTXN_DETAIL_ID			= 	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
			sSinitial_price_item_cd =	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
					
					
			sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
					" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty"+
					" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
					" where bc.billable_chg_id = p.billable_chg_id"+
					" and sq.billable_chg_id = bc.billable_chg_id"+
					" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"'";
					
					
			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
				
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
				for(int i=0;i<AL.size();i++)
				{
					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
					// To Get value of corresponding column
					String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
					String sACCT_ID =(String)temp.get("ACCT_ID");
					String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
					String spriceitem_cd =(String)temp.get("PRICEITEM_CD");
					String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
					String spriceitem_parm_grp_id =(String)temp.get("PRICEITEM_PARM_GRP_ID");
					String sprice_asgn_id =(String)temp.get("PRICE_ASGN_ID");
					String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
					if (sbillable_chg_id.equalsIgnoreCase("          "))
					{
						sbillable_chg_id = "NOVAL";
					}
					else
					{
						sbillable_chg_id = "GET"+sbillable_chg_id;
					}
					String sstart_dt =(String)temp.get("START_DT");
					String send_dt =(String)temp.get("END_DT");
					String sdo_not_agg_sw =(String)temp.get("DO_NOT_AGG_SW");
					String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
					String spa_acct_id =(String)temp.get("PA_ACCT_ID");
					if (spa_acct_id.equalsIgnoreCase("          "))
					{
						spa_acct_id = "NOVAL";
					}
					String spa_per_id =(String)temp.get("PA_PER_ID");
					if (spa_per_id.equalsIgnoreCase("          "))
					{
						spa_per_id = "NOVAL";
					}
					String spa_pricelist_id =(String)temp.get("PA_PRICELIST_ID");
					if (spa_pricelist_id.equalsIgnoreCase("          "))
					{
						spa_pricelist_id = "NOVAL";
					}
					String ssqi_cd =(String)temp.get("SQI_CD");
					String ssvc_qty =(String)temp.get("SVC_QTY");
						
					System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+spriceitem_cd+sdetail_priceitem_parm_grp_id+spriceitem_parm_grp_id+sprice_asgn_id+sbillable_chg_id+sstart_dt+send_dt);
						
					System.out.println("DB Data->"+sdo_not_agg_sw+stxn_pritm_status_cd+spa_acct_id+spa_per_id+spa_pricelist_id+ssqi_cd+ssvc_qty);
						
					// Getting data from data sheet
											
					sSTXN_DETAIL_ID	= 					(String)CF.FnGetCellValue(sStartingRow+i,1, sSheetName, sWorkbook).toString().trim();
					sSACCT_ID = 						(String)CF.FnGetCellValue(sStartingRow+i,2, sSheetName, sWorkbook).toString().trim();
					sSinitial_price_item_cd =			(String)CF.FnGetCellValue(sStartingRow+i,3, sSheetName, sWorkbook).toString().trim();
					sSpriceitem_cd =					(String)CF.FnGetCellValue(sStartingRow+i,4, sSheetName, sWorkbook).toString().trim();
					sSdetail_priceitem_parm_grp_id =  	(String)CF.FnGetCellValue(sStartingRow+i,5, sSheetName, sWorkbook).toString().trim();
					sSpriceitem_parm_grp_id = 			(String)CF.FnGetCellValue(sStartingRow+i,6, sSheetName, sWorkbook).toString().trim();
					sSprice_asgn_id =					(String)CF.FnGetCellValue(sStartingRow+i,7, sSheetName, sWorkbook).toString().trim();
					sSbillable_chg_id =					(String)CF.FnGetCellValue(sStartingRow+i,8, sSheetName, sWorkbook).toString().trim();
					sSstart_dt =						(String)CF.FnGetCellValue(sStartingRow+i,9, sSheetName, sWorkbook).toString().trim();
					sSend_dt =							(String)CF.FnGetCellValue(sStartingRow+i,10, sSheetName, sWorkbook).toString().trim();
					sSdo_not_agg_sw =					(String)CF.FnGetCellValue(sStartingRow+i,11, sSheetName, sWorkbook).toString().trim();
					sStxn_pritm_status_cd =				(String)CF.FnGetCellValue(sStartingRow+i,12, sSheetName, sWorkbook).toString().trim();
					sSpa_acct_id =						(String)CF.FnGetCellValue(sStartingRow+i,13, sSheetName, sWorkbook).toString().trim();
					sSpa_per_id =						(String)CF.FnGetCellValue(sStartingRow+i,14, sSheetName, sWorkbook).toString().trim();
					sSpa_pricelist_id =					(String)CF.FnGetCellValue(sStartingRow+i,15, sSheetName, sWorkbook).toString().trim();
					sSsqi_cd =							(String)CF.FnGetCellValue(sStartingRow+i,16, sSheetName, sWorkbook).toString().trim();
					sSsvc_qty =							(String)CF.FnGetCellValue(sStartingRow+i,17, sSheetName, sWorkbook).toString().trim();
						
					// Data sheet data
						
					System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSpriceitem_cd+sSdetail_priceitem_parm_grp_id+sSpriceitem_parm_grp_id+sSprice_asgn_id+sSbillable_chg_id+sSstart_dt+sSend_dt);
						
					System.out.println("Datasheet Data->"+sSdo_not_agg_sw+sStxn_pritm_status_cd+sSpa_acct_id+sSpa_per_id+sSpa_pricelist_id+sSsqi_cd+sSsvc_qty);
						
					if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim()))
					{
						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
						
						if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
						}
						if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
						}
						if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
						}
						if (spriceitem_cd.trim().equalsIgnoreCase(sSpriceitem_cd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
						}
						if (sdetail_priceitem_parm_grp_id.trim().equalsIgnoreCase(sSdetail_priceitem_parm_grp_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign Group from ci_txn_dtl_pritm  -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign Group from ci_txn_dtl_pritm  -> Expected->" + sSdetail_priceitem_parm_grp_id + "  Actual->"+sdetail_priceitem_parm_grp_id);
						}
						if (spriceitem_parm_grp_id.trim().equalsIgnoreCase(sSpriceitem_parm_grp_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign Group from ci_bill_chg table -> Expected->" + sSpriceitem_parm_grp_id + "  Actual->"+spriceitem_parm_grp_id);
						}
						if (sprice_asgn_id.trim().equalsIgnoreCase(sSprice_asgn_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
						}
						if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
						}
						if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
						}
						if (sdo_not_agg_sw.trim().equalsIgnoreCase(sSdo_not_agg_sw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
						}
						if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
						}
						if (spa_acct_id.trim().equalsIgnoreCase(sSpa_acct_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
						}
						if (spa_per_id.trim().equalsIgnoreCase(sSpa_per_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
						}
						if (spa_pricelist_id.trim().equalsIgnoreCase(sSpa_pricelist_id.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
						}
						if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
						}
						if (sSsvc_qty.trim().equalsIgnoreCase(ssvc_qty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
					}
				}
										
			}	
			else
			{
				CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
			}
			// end of for loop k
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnUpdateCustomerClassDivisonAlgorithm
	'Function Description : update Algorithm in Customer Class ->Division->Controls->Algorithm
	'Input Parameters     : sAlgorithm,sDivision,sAlgortihmEntityFlag.
	'Output Parameters    : sActualAlgorithm
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnUpdateCustomerClassDivisonAlgorithm(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnUpdateCustomerClassDivisonAlgorithm");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAlgorithm,sDivision,sAlgortihmEntityFlag;
				String sActualAlgorithm="";

				BaseTest.sTestDescription ="Update Customer Class Divison Algorithm";

				sAlgorithm			 =	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sDivision			 =	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				sAlgortihmEntityFlag =	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();


				FnSetValueInDb("update CI_CCL_CTL_ALG set ALG_CD ="+"'"+sAlgorithm+"'"+" where cis_division="+"'"+sDivision+"'"+"and ccl_alg_entity_flg="+"'"+sAlgortihmEntityFlag+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				Thread.sleep(2000);
				System.out.println(">------------Updated CI_CCL_CTL_ALG------------<");
				FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				Thread.sleep(2000);

				sActualAlgorithm = (String) FnGetDBColumnValue("select alg_cd from CI_CCL_CTL_ALG where cis_division= '"+sDivision+"'"+"and ccl_alg_entity_flg='"+sAlgortihmEntityFlag+"'","ALG_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("Algorithm from the database -->"+sActualAlgorithm);
				System.out.println(" Algorithm from datasheet -->"+sAlgorithm);
				if(sAlgorithm.equalsIgnoreCase(sActualAlgorithm))
				{
					CF.FnTestCaseStatusReport("Pass", "Algorithm updated --> Expected Value: "+sAlgorithm+" And Actual Value: " +sActualAlgorithm);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail","Algorithm not updated --> Expected Value: "+sAlgorithm+" And Actual Value: " +sActualAlgorithm);
				}
			}
		} 
		catch (Exception e)
		{
			System.out.println("DB Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###############################################################
	'Function Name        : FnInvoiceCurrencyChangeInDB
	'Function Description : Change account currency in DB
	'Input Parameters  
	'                     : sValueToSearch		-> Give the value to be search
	'                     
	'Output Parameters    : Not Applicable
	'################################################################*/		
	public void FnInvoiceCurrencyChangeInDB(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnInvoiceCurrencyChangeInDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountID,sInvoiceCurrency;

				BaseTest.sTestDescription ="Change account currency in DB";
				sAccountID			 =	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sInvoiceCurrency	 =	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				//update table CI_ACCT
				FnUpdateValueInDb("Update CI_ACCT set CURRENCY_CD = '"+sInvoiceCurrency+"' where ACCT_ID = '"+sAccountID+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				String sGetText   = (String) FnGetDBColumnValue("Select currency_CD from Ci_Acct where ACCT_ID = '"+sAccountID+"'","currency_CD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("currency_CD ->"+sGetText); 

				if(sGetText.equalsIgnoreCase(sInvoiceCurrency))
				{
					CF.FnTestCaseStatusReport("Pass",  "Invoice Currency for account "+sAccountID+" update successfully" +sInvoiceCurrency);
				} 
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Invoice Currency for account "+sAccountID+" update unsuccessfully" +sInvoiceCurrency);
				}
			}
		}
		catch (Exception e)
		{
			System.out.println("DB Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###############################################################
	'Function Name        : FnEditEffectivePricingToChangeRate
	'Function Description : Edit Pricing on Customer
	'Input Parameters  
	'                     : sValueToSearch		-> Give the value to be search
	'                     
	'Output Parameters    : Not Applicable
	'################################################################*/		
	public void FnEditEffectivePricingToChangeRate(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnEditEffectivePricingToChangeRate");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPRICEITEM_CD,sOWNER_ID,sGetText,sRate,sPRICECOMP_SEQNO;

				BaseTest.sTestDescription ="Edit Pricing on Customer";
				sPRICEITEM_CD	  =	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sOWNER_ID	 	  =	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				sRate	 		  =	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();
				sPRICECOMP_SEQNO  =	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
				
				sGetText       = (String) FnGetDBColumnValue("SELECT PRICE_ASGN_ID FROM CI_PRICEASGN WHERE PRICEITEM_CD = '"+sPRICEITEM_CD+"' and OWNER_ID = '"+sOWNER_ID+"'","PRICE_ASGN_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("PRICE_ASGN_ID ---------------" +sGetText);
				
				String priceCompId = sGetText;
				FnSetValueInDb("Update CI_PRICECOMP SET VALUE_AMT = '"+sRate+"' WHERE PRICECOMP_SEQNO = '"+sPRICECOMP_SEQNO+"' AND PRICE_ASGN_ID = '"+priceCompId+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			Thread.sleep(2000);
    			System.out.println(">------------Updated CI_PRICECOMP------------<");
    			FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			Thread.sleep(2000);
			}
		}
		catch (Exception e)
		{
			System.out.println("DB Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnUpdateApayCreationOptionFromDB
	'Function Description : Update Autopay creation option from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sanjeev Acharya
	'#########################################################################################################*/
	public void FnUpdateApayCreationOptionFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnUpdateApayCreationOptionFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify Refund Amt from DB";	
				String sOptionValue,sGetText;
				
				sOptionValue = (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				FnUpdateValueInDb("UPDATE CI_INSTALLATION SET APAY_CRE_OPT_FLG = '"+sOptionValue+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				sGetText   = (String)  FnGetDBColumnValue("SELECT APAY_CRE_OPT_FLG FROM CI_INSTALLATION","APAY_CRE_OPT_FLG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("date format ->"+sGetText); 

				if(sGetText.equalsIgnoreCase(sOptionValue))
				{
					CF.FnTestCaseStatusReport("Pass", "Installation Option update successfull" +sGetText);
				} 
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Installation Option update unsuccessfull" +sGetText);
				}

			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyRefundAmtFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyAutoPayFromDB
	'Function Description : Verify AutoPay from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sanjeev Acharya
	'#########################################################################################################*/
	public void FnVerifyAutoPayFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyAutoPayFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify AutoPay from DB";	
				
				String sBillID,sExpBillCount,sRowCount;
				int iExpBillCount,iRowCount;
				sBillID		            =	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sExpBillCount  	        = 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
			    iExpBillCount	        =  	Integer.parseInt(sExpBillCount);
				
				//Verify count of Regular Bill generated
				sRowCount		= 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_BILL_ACH WHERE BILL_ID = '"+sBillID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iRowCount		=  	Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==iExpBillCount)
				{
					CF.FnTestCaseStatusReport("Pass","Auto Pay generated on the Bill "+sBillID);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Auto Pay NOT generated on the Bill "+sBillID);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyAutoPayFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyAutoPayAmtFromDB
	'Function Description : Verify AutoPay Amount from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sanjeev Acharya
	'#########################################################################################################*/
	public void FnVerifyAutoPayAmtFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyAutoPayAmtFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify AutoPay Amount from DB";	
				
				String sBillID              =   CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook);
				String sExpApayAmt			=	CF.FnGetCellValue(iStartingRow, 3,sSheetName, sWorkbook).toString().trim();
				System.out.println("Verify APAY Amount");		
				String[] sApayAmtArr =  (String[])  FnGetDBColumnValueInArray("SELECT APAY_AMT FROM CI_BILL_ACH WHERE BILL_ID = '"+sBillID+"'","APAY_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iCounter = 0;
		        int sAmtPaylen = sApayAmtArr.length;
		        for(int k=0;k<sAmtPaylen;k++,iCounter++)
		        {					
		        	System.out.println("iCounter = "+iCounter);
		        	String sAmtPay = sApayAmtArr[k];
		        	if (sExpApayAmt.contains(sAmtPay.trim()))
		        	{
		        		CF.FnTestCaseStatusReport("Pass","Apay_Amt ="+sAmtPay+" matched on bill "+sBillID+"");
		        	}
		        	else 
		        	{
		        		CF.FnTestCaseStatusReport("Fail","Apay_Amt ="+sAmtPay+" NOT matched on bill "+sBillID+"");
		        	}
		        }
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyAutoPayFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentFromDB
	'Function Description : Verify Payment from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sanjeev Acharya
	'#########################################################################################################*/
	public void FnVerifyPaymentAmtFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyPaymentAmtFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify Payment from DB";	
				
				String sPayAmt,sAccountID,sExpPayAmt;
				sAccountID= CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sExpPayAmt= CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				sPayAmt		= 	(String) FnGetDBColumnValue("SELECT PAY_AMT FROM CI_PAY WHERE ACCT_ID = '"+sAccountID+"'","PAY_AMT" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("Pay_AMT============================"+sPayAmt);
				if (sPayAmt.equalsIgnoreCase(sExpPayAmt))
				{
					CF.FnTestCaseStatusReport("Pass","Pay_Amt matched for account "+sAccountID);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Pay_Amt didn't match for account "+sAccountID);
				}

			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentAmtFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyRefundAmtFromDB
	'Function Description : Verify Refund amt from DB
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sanjeev Acharya
	'#########################################################################################################*/
	public void FnVerifyRefundAmtFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyRefundAmtFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify Refund Amt from DB";	
				
				String sContractID,sExpAdjAmt;
				String[] sApayAmtArr;
				int iCounter,sAmtPaylen;
			    sContractID     =	CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
			    sExpAdjAmt  	= 	CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				sApayAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT ADJ_AMT FROM CI_ADJ WHERE SA_ID = '"+sContractID+"'","ADJ_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
		        sAmtPaylen = sApayAmtArr.length;
	            for(int k=0;k<sAmtPaylen;k++,iCounter++)
    			{				
	            	System.out.println("iCounter = " +iCounter);
    				String sAmtPay = sApayAmtArr[k];
    				if (sExpAdjAmt.contains(sAmtPay.trim()))
    	            {
    	            	CF.FnTestCaseStatusReport("Pass","Adj_Amt ="+sAmtPay+" matched on contract "+sContractID+"");
    	            }
    	            else 
    	            {
    	            	CF.FnTestCaseStatusReport("Fail","Adj_Amt ="+sAmtPay+" NOT matched on contract "+sContractID+"");
    	            }
                } 
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyRefundAmtFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnUpdatePriceItemContractType
	'Function Description : To Update Price Item Contract Type from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnUpdatePriceItemContractType (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnUpdatePriceItemContractType-->");
	    		   
	    		String sPriceItemCd,sPriceItemDesc,sPriceItemContractType;
	    		sPriceItemCd 			= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sPriceItemDesc 			= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		sPriceItemContractType 	= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
	            
	    		System.out.println("sPriceItemDesc = "+sPriceItemDesc);
	    		
	    		FnSetValueInDb("UPDATE CI_PRICEITEM SET SA_TYPE_CD = '"+sPriceItemContractType+"' WHERE PRICEITEM_CD = '"+sPriceItemCd+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		Thread.sleep(2000);
	    		System.out.println(">------------Updated CI_PRICEITEM with SA_TYPE_CD------------<"+sPriceItemContractType);
	    		FnSetValueInDb("COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		Thread.sleep(2000);
	    		
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnUpdateAlgorithmParameters
	'Function Description : To Update Price Item Contract Type from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnUpdateAlgorithmParameters (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnUpdateAlgorithmParameters-->");
	    		   
	    		String sAlgorithm,sParamterValues,sSeqNo;
	    		String [] sParamterValuesArr,sSeqNoArr;
	    		
	    		sAlgorithm 			= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sParamterValues 	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		sSeqNo 				= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
	    		
	    		sParamterValuesArr 	= sParamterValues.split("#");
	    		sSeqNoArr		 	= sSeqNo.split("#");
	    		
	    		for(int k=0;k<sSeqNoArr.length;k++)
	    		{
	    			FnSetValueInDb("UPDATE CI_ALG_PARM SET ALG_PARM_VAL = '"+sParamterValuesArr[k]+"' WHERE ALG_CD = '"+sAlgorithm+"' AND SEQNO = '"+sSeqNoArr[k]+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    			Thread.sleep(2000);
	    			System.out.println(">------------Updated CI_ALG_PARM with ALG_PARM_VAL------------<"+sParamterValuesArr[k]+" for SEQNO ----------<"+sSeqNoArr[k]);
	    		}
	    		
	    		FnSetValueInDb("COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			Thread.sleep(2000);
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnAddExchangeRateFromDB
	'Function Description : To Add ExchangeRate from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnAddExchangeRateFromDB (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnAddExchangeRateFromDB-->");
	    		   
	    		String sExchangeId,sFromCurrency,sToCurrency,sDivision,sConvType,sStartDate,sEndDate,sExchgRate,sSpread,sMaxExchRateId;
	    		
	    		sMaxExchRateId       = (String)  FnGetDBColumnValue("SELECT MAX(EXCHRATE_ID) FROM CI_EXCHRATE", "MAX(EXCHRATE_ID)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			CF.FnWriteCellValue(iStartingRow-2,3, sMaxExchRateId, sSheetName, sWorkBook);
    			System.out.println("Maximum of Exchange Rate is-->"+sMaxExchRateId);
    			Thread.sleep(3000);
    			
	    		sExchangeId 	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sFromCurrency 	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		sToCurrency		= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
	    		sDivision		= CF.FnGetCellValue(iStartingRow ,4, sSheetName, sWorkBook).toString().trim();
	    		sConvType		= CF.FnGetCellValue(iStartingRow ,5, sSheetName, sWorkBook).toString().trim();
	    		sStartDate		= CF.FnGetCellValue(iStartingRow ,6, sSheetName, sWorkBook).toString().trim();
	    		sEndDate		= CF.FnGetCellValue(iStartingRow ,7, sSheetName, sWorkBook).toString().trim();
	    		sExchgRate		= CF.FnGetCellValue(iStartingRow ,8, sSheetName, sWorkBook).toString().trim();
	    		sSpread			= CF.FnGetCellValue(iStartingRow ,9, sSheetName, sWorkBook).toString().trim();
	    		
	    		if(sDivision.equalsIgnoreCase("NoValue"))
	    			sDivision = "     ";
	    		if(sSpread.equalsIgnoreCase("NoValue"))
	    			sSpread = "0";
	    		if(sEndDate.equalsIgnoreCase("NoValue"))
	    			sEndDate = "";
	    			
	    		FnSetValueInDb("INSERT INTO CI_EXCHRATE (EXCHRATE_ID,FROM_CURRENCY_CD,TO_CURRENCY_CD,CONV_TYPE_FLG,EFFDT,EXCHRATE,VERSION,CIS_DIVISION,END_DT,SPREAD,BUS_OBJ_CD,BO_STATUS_CD,BO_STATUS_REASON_CD,BO_DATA_AREA,CRE_DTTM,STATUS_UPD_DTTM,ILM_ARCH_SW,ILM_DT,START_DTTM,END_DTTM,EXCH_RATE_SRC_FLG) VALUES('"+sExchangeId+"','"+sFromCurrency+"','"+sToCurrency+"','"+sConvType+"',TO_DATE('"+sStartDate+"','mm-dd-yyyy'),'"+sExchgRate+"','1','"+sDivision+"',TO_DATE('"+sEndDate+"','mm-dd-yyyy'),'"+sSpread+"','C1-ExchangeRate ','            ','','','','','','',TO_DATE('"+sStartDate+"','mm-dd-yyyy'),TO_DATE('"+sEndDate+"','mm-dd-yyyy'),'BSEG')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		FnSetValueInDb("INSERT INTO CI_EXCHRATE_LOG (EXCHRATE_ID,SEQNO,LOG_DTTM,LOG_ENTRY_TYPE_FLG,DESCRLONG,BO_STATUS_CD,BO_STATUS_REASON_CD,MESSAGE_CAT_NBR,MESSAGE_NBR,CHAR_TYPE_CD,CHAR_VAL,ADHOC_CHAR_VAL,CHAR_VAL_FK1,CHAR_VAL_FK2,CHAR_VAL_FK3,CHAR_VAL_FK4,CHAR_VAL_FK5,USER_ID,SRCH_CHAR_VAL,VERSION) VALUES('"+sExchangeId+"','1',TO_DATE('"+sStartDate+"','mm-dd-yyyy'),'F1CR',' ',' ',' ','11002','12152',' ',' ',' ',' ',' ',' ',' ',' ','BKUSER3',' ','1')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		FnSetValueInDb("INSERT INTO CI_EXCHRATE_K (EXCHRATE_ID,ENV_ID) VALUES('"+sExchangeId+"','676909')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		System.out.println("Exchange Rate Added Successfully"+sExchangeId);
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnDelExchangeRateFromDB
	'Function Description : To Delete ExchangeRate from Database
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnDelExchangeRateFromDB (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnDelExchangeRateFromDB-->");
	    		   
	    		String sExchRateId,sFromCurrency,sToCurrency,sDivision,sConvType,sStartDate,sEndDate,sExchgRate;
	    		
	    		sFromCurrency 	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sToCurrency		= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		sDivision		= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
	    		sConvType		= CF.FnGetCellValue(iStartingRow ,4, sSheetName, sWorkBook).toString().trim();
	    		sStartDate		= CF.FnGetCellValue(iStartingRow ,5, sSheetName, sWorkBook).toString().trim();
	    		sEndDate		= CF.FnGetCellValue(iStartingRow ,6, sSheetName, sWorkBook).toString().trim();
	    		sExchgRate		= CF.FnGetCellValue(iStartingRow ,7, sSheetName, sWorkBook).toString().trim();

	    		if(sDivision.equalsIgnoreCase("NoValue"))
	    			sDivision = "     ";
	    		
	    		sExchRateId       = (String)  FnGetDBColumnValue("SELECT EXCHRATE_ID FROM CI_EXCHRATE WHERE FROM_CURRENCY_CD = '"+sFromCurrency+"' AND TO_CURRENCY_CD = '"+sToCurrency+"' AND EXCHRATE = '"+sExchgRate+"' AND CIS_DIVISION = '"+sDivision+"' AND CONV_TYPE_FLG = '"+sConvType+"' AND EFFDT = TO_DATE('"+sStartDate+"', 'MM-DD-YYYY') AND END_DT = TO_DATE('"+sEndDate+"', 'MM-DD-YYYY')", "EXCHRATE_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			System.out.println("Exchange Rate is-->"+sExchRateId);
	    		
    			FnSetValueInDb("DELETE FROM CI_EXCHRATE_K WHERE EXCHRATE_ID = '"+sExchRateId+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnSetValueInDb("DELETE FROM CI_EXCHRATE_LOG WHERE EXCHRATE_ID = '"+sExchRateId+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnSetValueInDb("DELETE FROM CI_EXCHRATE WHERE EXCHRATE_ID = '"+sExchRateId+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		
    			FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		System.out.println("Exchange Rate Deleted Successfully"+sExchRateId);
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyMatchEventAndFTDetailsOnBillSegment
	'Function Description : Verification of Match Events And FT Details On BillSegment
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyMatchEventAndFTDetailsOnBillSegment(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
    {
		System.out.println(">>>>>>>>>>--FnVerifyMatchEventAndFTDetailsOnBillSegment");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
                String sAccountId,sExpMatchEvntCount,sExpMatchEventStatus,sMatchEvntId,sMatchEvntStatus,sRowCount,
                sContractID,sExpFTCount,sFTType,sExpFTType,sFTAmount,sExpFTAmount,sBillID,sExpBillID,sRoundoff;
                String [] sMatchEvntDArr;
                int iExpMatchEvntCount,iRowCount,iCounter,iMatchEvntIdlen,iExpFTCount;
                
                BaseTest.sTestDescription ="Verification of Match Events generated";
                //Verify count of Regular Bill Segments generated
                sAccountId                       =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
                sExpMatchEvntCount    =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
                iExpMatchEvntCount =   Integer.parseInt(sExpMatchEvntCount);
                
                sRowCount     =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MATCH_EVT WHERE ACCT_ID IN ('"+sAccountId+"') ORDER BY MEVT_STATUS_FLG","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                iRowCount     =   Integer.parseInt(sRowCount);
                System.out.println("iCount============================"+iRowCount);
                if (iRowCount==iExpMatchEvntCount)
                {
                	sMatchEvntDArr =  (String[]) FnGetDBColumnValueInArray("SELECT MATCH_EVT_ID FROM CI_MATCH_EVT WHERE ACCT_ID IN('"+sAccountId+"') ORDER BY MEVT_STATUS_FLG","MATCH_EVT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                	iCounter = 0;
                	iMatchEvntIdlen = sMatchEvntDArr.length;
                	for(int k=0;k<iMatchEvntIdlen;k++,iCounter++)
                	{
                		sMatchEvntId = sMatchEvntDArr[k];
                		CF.FnWriteCellValue((iStartingRow+iCounter),3, sMatchEvntId, sSheetName, sWorkbook);
                		CF.FnTestCaseStatusReport("Pass","Match Event ID present in CI_MATCH_EVT "+sMatchEvntDArr[k]);
                		
                		//Get Match Event Status
                		sExpMatchEventStatus  =  (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
                		sMatchEvntStatus      =  (String) FnGetDBColumnValue("SELECT MEVT_STATUS_FLG FROM CI_MATCH_EVT WHERE MATCH_EVT_ID = '"+sMatchEvntId+"'","MEVT_STATUS_FLG",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                		if(!sExpMatchEventStatus.equalsIgnoreCase("NoValue"))
                		{
                			if(sExpMatchEventStatus.equalsIgnoreCase("Balanced"))
                				sExpMatchEventStatus = "B";
                			if(sExpMatchEventStatus.equalsIgnoreCase("Open"))
                				sExpMatchEventStatus = "O";
                			if(sExpMatchEventStatus.equalsIgnoreCase("Canceled"))
                				sExpMatchEventStatus = "X";
                			if(sExpMatchEventStatus.equalsIgnoreCase(sMatchEvntStatus))
                			{
                				CF.FnTestCaseStatusReport("Pass","Match Event Status matched "+sMatchEvntStatus);
                			}
                			else
                			{
                				CF.FnTestCaseStatusReport("Fail","Match Event Status NOT matched "+sMatchEvntStatus);
                			}
                		}
                	}
                }
                else 
                {
                	CF.FnTestCaseStatusReport("Fail","Match Event Count NOT matched on account ");
                }
                
                
                BaseTest.sTestDescription ="Verification of FT details";
                
                sContractID       =              (String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
                sExpFTCount =   (String)CF.FnGetCellValue(iStartingRow,6,sSheetName, sWorkbook).toString().trim();
                iExpFTCount =   Integer.parseInt(sExpFTCount);

                //Get FT_ID on contract from CI_FT Table
                sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_FT WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                iRowCount            =      Integer.parseInt(sRowCount);
                System.out.println("iCount============================"+iRowCount);

                if (iRowCount==iExpFTCount)
                {
                	String [] sFTTypeArr =  (String[]) FnGetDBColumnValueInArray("SELECT FT_TYPE_FLG FROM CI_FT WHERE SA_ID = '"+sContractID+"' ORDER BY CUR_AMT,FT_TYPE_FLG","FT_TYPE_FLG",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                	iCounter = 0;
                	int sFTTypelen = sFTTypeArr.length;
                	for(int k=0;k<sFTTypelen;k++,iCounter++)
                	{                                                                      
                		sFTType = sFTTypeArr[k];
                		sExpFTType = (String)CF.FnGetCellValue(iStartingRow+iCounter,7,sSheetName, sWorkbook).toString().trim();
                		if(!sExpFTType.equalsIgnoreCase("NoValue"))
                		{
                			if(sExpFTType.equalsIgnoreCase("Bill Segment"))
                				sExpFTType = "BS";
                			if(sExpFTType.equalsIgnoreCase("Bill Cancellation"))
                				sExpFTType = "BX";
                			if(sExpFTType.equalsIgnoreCase("Pay Segment"))
                				sExpFTType = "PS";
                			if(sExpFTType.equalsIgnoreCase("Adjustment"))
                				sExpFTType = "AD";
                			if(sExpFTType.equalsIgnoreCase("Adjustment cancellation"))
                				sExpFTType = "AX";
                			if(sExpFTType.equalsIgnoreCase("Pay Cancellation"))
                				sExpFTType = "PX";
                                                           
                			if (sFTType.equalsIgnoreCase(sExpFTType))
                			{
                				CF.FnTestCaseStatusReport("Pass","FT Type matched Expected value = "+sExpFTType+ " Actual value = "+sFTType);
                			}
                			else 
                			{
                				CF.FnTestCaseStatusReport("Fail","FT Type not matched Expected value = "+sExpFTType+ " Actual value = "+sFTType);
                			}
                		}
                	}
                	
                	String [] sFTAmountArr =  (String[]) FnGetDBColumnValueInArray("SELECT CUR_AMT FROM CI_FT WHERE SA_ID = '"+sContractID+"' ORDER BY CUR_AMT,FT_TYPE_FLG","CUR_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                	iCounter = 0;
                	int sFTAmountlen = sFTAmountArr.length;
                	for(int k=0;k<sFTAmountlen;k++,iCounter++)
                	{                                                                      
                		sFTAmount = sFTAmountArr[k];
                		sExpFTAmount = (String)CF.FnGetCellValue(iStartingRow+iCounter,8,sSheetName, sWorkbook).toString().trim();
                		if(!sExpFTAmount.equalsIgnoreCase("NoValue"))
                		{
                			sRoundoff = (String)CF.FnGetCellValue(iStartingRow,10,sSheetName, sWorkbook).toString().trim();
                			if (sRoundoff.equalsIgnoreCase("True"))
                			{
                				if (sExpFTAmount.contains(sFTAmount))
                				{
                					CF.FnTestCaseStatusReport("Pass","FT Amount matched Expected value = "+sExpFTAmount+ " Actual value = "+sFTAmount);
                				}
                				else 
                				{
                					CF.FnTestCaseStatusReport("Fail","FT Amount not matched Expected value = "+sExpFTAmount+ " Actual value = "+sFTAmount);
                				}
                			}
                			else
                			{
                				if (sFTAmount.equalsIgnoreCase(sExpFTAmount))
                				{
                					CF.FnTestCaseStatusReport("Pass","FT Amount matched Expected value = "+sExpFTAmount+ " Actual value = "+sFTAmount);
                				}
                				else 
                				{
                					CF.FnTestCaseStatusReport("Fail","FT Amount not matched Expected value = "+sExpFTAmount+ " Actual value = "+sFTAmount);
                				}
                			}
                		}
                	}
                              
                	String [] sBillIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT BILL_ID FROM CI_FT WHERE SA_ID = '"+sContractID+"' ORDER BY CUR_AMT,FT_TYPE_FLG","BILL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                	iCounter = 0;
                	int sBillIDlen = sBillIDArr.length;
                	for(int k=0;k<sBillIDlen;k++,iCounter++)
                	{   
                		sBillID = sBillIDArr[k];
                        if (sBillID == null || "".equals(sBillID.trim()))
                        {
                                       sBillID = "NoValue";
                        }
                        sExpBillID = (String)CF.FnGetCellValue(iStartingRow+iCounter,9,sSheetName, sWorkbook).toString().trim();

                        if (sBillID.equalsIgnoreCase(sExpBillID))
                        {
                        	CF.FnTestCaseStatusReport("Pass","Bill ID matched Expected value = "+sExpBillID+ " Actual value = "+sBillID);
                        }
                        else 
                        {
                        	CF.FnTestCaseStatusReport("Fail","Bill ID not matched Expected value = "+sExpBillID+ " Actual value = "+sBillID);
                        }
                	}
                }
                else 
                {
                	CF.FnTestCaseStatusReport("Fail","FT Count NOT matched on account ");
                }
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyMatchEventAndFTDetailsOnBillSegment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
    }             
	
	
	/*'#######################################################################################################
	'Function Name        : FnPricingUpdate
	'Function Description : Update Pricing Rate
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnPricingUpdate(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnPricingUpdate");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPRICEITEM_CD,sOWNER_ID,sRate,sSeqNo,sPRICE_ASGN_ID;

				sPRICEITEM_CD	=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sOWNER_ID		= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				sRate			= 	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();
				sSeqNo			= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();


				sPRICE_ASGN_ID = (String) FnGetDBColumnValue("SELECT PRICE_ASGN_ID FROM CI_PRICEASGN WHERE PRICEITEM_CD = '"+sPRICEITEM_CD+"' and OWNER_ID = '"+sOWNER_ID+"'","PRICE_ASGN_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("PRICE_ASGN_ID ---------------" +sPRICE_ASGN_ID);

				FnSetValueInDb("Update CI_PRICECOMP SET VALUE_AMT = '"+sRate+"' WHERE PRICECOMP_SEQNO = '"+sSeqNo+"' AND PRICE_ASGN_ID = '"+sPRICE_ASGN_ID+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				System.out.println(">------------Updated CI_PRICECOMP------------<");
				FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			}

		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnPricingUpdate");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnAlterInstallationOptionsForAltBill
	'Function Description : Set Sequential Invoice and Sequencial Generation Algorithm from DB
	'Input Parameters     : sStartingRow    -> Starting Row in the excel sheet .
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnAlterInstallationOptionsForAltBill (int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
	    BaseTest.eFlgFound = "true";
	    try
	    {
	    	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    	{
	    		System.out.println("FnAlterInstallationOptionsForAltBill-->");
	    		   
	    		String sUseSeqBillNo,sSeqInv,sAlgorithm;
	    		
	    		sUseSeqBillNo 	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkBook).toString().trim();
	    		sSeqInv     	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkBook).toString().trim();
	    		sAlgorithm		= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkBook).toString().trim();
	    		
	    		System.out.println("sUseSeqBillNo = "+sUseSeqBillNo);
	    		System.out.println("sSeqInv = "+sSeqInv);
	    		System.out.println("sAlgorithm = "+sAlgorithm);
	    		
	    		if(sUseSeqBillNo.equalsIgnoreCase("true"))
	    			sUseSeqBillNo = "Y";
	    		else
	    			sUseSeqBillNo = "N";
	    		
	    		if(sSeqInv.equalsIgnoreCase("Division-specific"))
	    			sSeqInv = "D";
	    		if(sSeqInv.equalsIgnoreCase("System-wide"))
	    			sSeqInv = "S";
	    		if(sSeqInv.equalsIgnoreCase("Blank"))
	    			sSeqInv = " ";
	    		
	    		if(sAlgorithm.equalsIgnoreCase("Blank"))
	    			sAlgorithm = "              ";
	    		
	    		if(sUseSeqBillNo.equalsIgnoreCase("N"))
	    		{
	    			sSeqInv = " ";
	    			sAlgorithm = "              ";
	    		}
	    		FnSetValueInDb("UPDATE CI_INSTALLATION SET USE_ALT_BILL_ID_SW = '"+sUseSeqBillNo+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		Thread.sleep(2000);
	    		System.out.println(">------------Updated CI_INSTALLATION FOR USER_ALT_BILL_ID_SW = ------------"+sUseSeqBillNo);
	    		
	    		FnSetValueInDb("UPDATE C0_INSTALLATION SET ALT_BILL_ID_ASSIGN_FLG = '"+sSeqInv+"', ALT_BILL_ID_ALG_CD = '"+sAlgorithm+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		Thread.sleep(2000);
	    		System.out.println(">------------Updated C0_INSTALLATION FOR ALT_BILL_ID_ASSIGN_FLG = ------------"+sSeqInv);
	    		
	    		FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	    		Thread.sleep(2000);
	    	}
	    }
	    catch (Exception e)
	    {
	    	System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
	    	e.printStackTrace();
	    	BaseTest.eFlgFound = "false";
	    	CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
	    }
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillGeneration
	'Function Description : Verification of Regular/Trial Bill Generation
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyAltBillGeneration(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyAltBillGeneration");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sBillID,sExpAltBillId,sAltBillId;
				
				BaseTest.sTestDescription ="Verification of Alternate Bill Id Generation";
				//Verification of Regular Bill details on account
				System.out.println("Verification of Alternate Bill Id Generation");
				sBillID			=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sExpAltBillId	=	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();
				
				sAltBillId		=	(String) FnGetDBColumnValue("SELECT ALT_BILL_ID FROM CI_BILL WHERE BILL_ID = '"+sBillID+"'","ALT_BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println(sAltBillId);
				CF.FnWriteCellValue(iStartingRow,2, sAltBillId, sSheetName, sWorkbook);
				
				if (sAltBillId.equalsIgnoreCase(sExpAltBillId))
					CF.FnTestCaseStatusReport("Pass","Expected Alternate Bill Id = "+sExpAltBillId+" matches with Actual Alternate Bill Id =" +sAltBillId);
				else
					CF.FnTestCaseStatusReport("Fail","Expected Alternate Bill Id = "+sExpAltBillId+" does not match with Actual Alternate Bill Id =" +sAltBillId);
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillGeneration");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyBillGeneration
	'Function Description : Verification of Regular/Trial Bill Generation
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnGetAltBillIdFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnGetAltBillIdFromDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sBillID,sAltBillId;
				
				BaseTest.sTestDescription ="Get Alternate Bill Id From DB";
				//Verification of Regular Bill details on account
				sBillID			=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				
				sAltBillId		=	(String) FnGetDBColumnValue("SELECT ALT_BILL_ID FROM CI_BILL WHERE BILL_ID = '"+sBillID+"'","ALT_BILL_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println(sAltBillId);
				CF.FnWriteCellValue(iStartingRow,2, sAltBillId, sSheetName, sWorkbook);
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillGeneration");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnUpdateAltBillIDToBlankInDB
	'Function Description : Set Alternate bill Number to blank in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnUpdateAltBillIDToBlankInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		BaseTest.eFlgFound = "true";
		try
		{
			if ((BaseTest.eFlgFound.equalsIgnoreCase("true")))
			{
				System.out.println("FnUpdateAltBillIDToBlankInDB-->");
				String sExpectedValue = "NoValue";
				//Initializing variables 
				String sBillId              =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sAltBillId        	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				if(sAltBillId.equalsIgnoreCase("NoValue"))
				{
					sExpectedValue = " ";
				}
				FnUpdateValueInDb("UPDATE CI_BILL SET ALT_BILL_ID = '"+sExpectedValue+"' WHERE BILL_ID = '"+sBillId+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
	
	
				String sGetText   = (String) FnGetDBColumnValue("SELECT ALT_BILL_ID FROM CI_BILL WHERE BILL_ID = '"+sBillId+"'", "ALT_BILL_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				sGetText = sGetText.replace("","NoValue").trim();
				System.out.println("ALT BILL ID ---------------" +sGetText);
				if(sGetText.equalsIgnoreCase(sAltBillId))
				{
					CF.FnTestCaseStatusReport("Pass", "Value of ALT_BILL_ID removed from CI_BILL table");
				} 
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to remove value of ALT_BILL_ID from CI_BILL table");
				}
			}
				
		}
		catch (Exception e) 
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetSequenceNumberForAltBillIDFromDB
	'Function Description : Get SEQ_NBR from CI_SEQ Table for SEQ_NAME = 'ALT-BILL-ID' in database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public String FnGetSequenceNumberForAltBillIDFromDB(String sSheetName, String sWorkbook) throws Exception
	{
		String sSeqNbr = "NoValue";
		try
		{
			if ((BaseTest.eFlgFound.equalsIgnoreCase("true"))) 
			{
				System.out.println("FnUpdateAltBillIDToBlankInDB-->");
				sSeqNbr = "NoValue";
	            String sSeqName = "ALT-BILL-ID";
				//Initializing variables 
				sSeqNbr   = (String) FnGetDBColumnValue("SELECT SEQ_NBR FROM CI_SEQ WHERE SEQ_NAME = '"+sSeqName+"'", "SEQ_NBR", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("SEQ NBR ---------------" +sSeqNbr);
				CF.FnWriteCellValue(7, 8, sSeqNbr, sSheetName, sWorkbook);
			}
		}
		catch (Exception e) 
		{
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
		return sSeqNbr;
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentStatusFromDB
	'Function Description : Verify payment status
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentStatusFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
    {
		System.out.println(">>>>>>>>>>--FnVerifyPaymentStatusFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify payment status";

				String sAccountID,sExpPaystatus,sExpErrormsg,sErrormsg,sPaystatus;

				sAccountID		= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sExpPaystatus	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				sExpErrormsg	= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();

				sPaystatus = (String)  FnGetDBColumnValue("SELECT PAY_STATUS_FLG FROM CI_PAY WHERE ACCT_ID = '"+sAccountID+"'","PAY_STATUS_FLG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sPaystatus ---------------" +sPaystatus);
				
				if(sExpPaystatus.equalsIgnoreCase("Error"))
					sExpPaystatus = "20";
				
				if (sPaystatus.equalsIgnoreCase(sExpPaystatus))
				{
					CF.FnTestCaseStatusReport("Pass","Payment status matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Payment status not matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}
				
				sErrormsg = (String)  FnGetDBColumnValue("SELECT EXP_MSG FROM CI_PAY_EXCP WHERE PAY_ID IN(SELECT PAY_ID from CI_PAY where ACCT_ID='"+sAccountID+"') ","EXP_MSG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sPaystatus ---------------" +sErrormsg);
				
				if (sErrormsg.equalsIgnoreCase(sExpErrormsg)) 
				{
					CF.FnTestCaseStatusReport("Pass","Error message matched. Expected Value: "+sExpErrormsg+" And Actual Value: "+sErrormsg);
				} 
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Error message not matched. Expected Value: "+sExpErrormsg+" And Actual Value: "+sErrormsg);
				}

			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentStatusFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentRequestLog
	'Function Description : Verify Payment Request Log
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentRequestLog(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
    {
		System.out.println(">>>>>>>>>>--FnVerifyPaymentRequestLog");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify Payment Request Log";

				String sAccountID,sStatus,sExpStatus;

				sAccountID		= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();

				String [] sStatusArr = (String[])  FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM C1_PAY_REQ_LOG WHERE PAY_REQ_ID  IN (SELECT PAY_REQ_ID FROM C1_PAY_TNDR_REQ WHERE PAYOR_ACCT_ID='"+sAccountID+"') ORDER BY BO_STATUS_CD","BO_STATUS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				int   iCounter = 0;
				int sStatuslen = sStatusArr.length;
				for(int k=0;k<sStatuslen;k++,iCounter++)
				{
					sStatus = sStatusArr[k];

					sExpStatus = (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();

					if (sStatus.trim().equalsIgnoreCase(sExpStatus.trim()))
					{
						CF.FnTestCaseStatusReport("Pass","Payment Request Log Status matched Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Payment Request Log Status not matched Expected Status = "+sExpStatus+ " Actual Status = "+sStatus);
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentRequestLog");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#####################################################################################################################
	'Function Name        : FnVerifytable_CI_RULE_TYPE_FLD
	'########################################################################################################################*/
	public void FnVerifytable_CI_RULE_TYPE_FLD(int iStartingRow, String sSheetName, String sWorkbook) throws Exception  
	{                 
		BaseTest.sTestDescription = "Verify Field records Available in table CI_RULE_TYPE_FLD";
		System.out.println("--FnVerifytable_CI_RULE_TYPE_FLD");
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{
				String sTemporaryFieldName	=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
				String sRecordNoExpected	=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
				int iRecordNoExpected		=	Integer.parseInt(sRecordNoExpected);

				String [] FLD_ID = (String[]) FnGetDBColumnValueInArray("select FLD_NAME from CI_RULE_TYPE_FLD where FLD_NAME = '"+sTemporaryFieldName+"'", "FLD_NAME", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iNoofFLDRecords = FLD_ID.length;
				if (iNoofFLDRecords == iRecordNoExpected) 
				{
					CF.FnTestCaseStatusReport("Pass", "There is record entry in table 'CI_RULE_TYPE_FLD'. Expected record: "+iRecordNoExpected+" And Actual record: " +iNoofFLDRecords);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "There is no record entry in table 'CI_RULE_TYPE_FLD'. Expected record: "+iRecordNoExpected+" And Actual record: " +iNoofFLDRecords);
				}
			}                             
		} 
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentRequestLog");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));		
		}           
	}
	
	/*'#####################################################################################################################
	'Function Name        : FnVerifytable_CI_RULE_OUT_FLD
	'########################################################################################################################*/
	public void FnVerifytable_CI_RULE_OUT_FLD(int iStartingRow, String sSheetName, String sWorkbook) throws Exception  
	{                 
		BaseTest.sTestDescription = "Verify no of records in table RULE_OUT_FLD";
		System.out.println("--FnVerifytable_CI_RULE_OUT_FLD");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sTemporaryFieldName	=	CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
				String sRecordNoExpected	=	CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
				int iRecordNoExpected		=	Integer.parseInt(sRecordNoExpected);
				System.out.println("DB Name is-->"+ System.getProperty("dbName"));

				String [] FLD_ID = (String[]) FnGetDBColumnValueInArray("select * from CI_RULE_OUT_FLD where FLD_NAME = '"+sTemporaryFieldName+"'","FLD_NAME", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));		
				
				int iNoofFLDRecords = FLD_ID.length;
				if (iNoofFLDRecords == iRecordNoExpected) 
				{
					CF.FnTestCaseStatusReport("Pass", "There is record entry in table 'CI_RULE_OUT_FLD'. Expected record: "+iRecordNoExpected+" And Actual record: " +iNoofFLDRecords);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "There is no record entry in table 'CI_RULE_OUT_FLD'. Expected record: "+iRecordNoExpected+" And Actual record: " +iNoofFLDRecords);
				}
			}                             
		} catch(Exception e)
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentRequestLog");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));		
		}           
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionStatus
	'Function Description : To verify Transaction status after running TFM batches
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public String FnVerifyTransactionStatus(String sHeaderID,int sStartRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionStatus");
		
		String sTxnid,sTxnStatus;
		String sAllTxnStatus = "NOTPROCESS";
		String sQuery;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sQuery = "select txn_detail_id,bo_status_cd from ci_txn_detail where txn_header_id = '"+sHeaderID+"' order by txn_detail_id";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = sStartRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++){
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTXN_DETAIL_ID=(String)temp.get("TXN_DETAIL_ID");
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
												
						System.out.println("TXN_DETAIL_ID "+sTXN_DETAIL_ID);
						System.out.println("BO_STATUS_CD "+sBO_STATUS_CD);
						
						sTxnid	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sTxnStatus = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						
						if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sTxnid.trim()))
						{
							if (sBO_STATUS_CD.trim().equalsIgnoreCase(sTxnStatus.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sBO_STATUS_CD);
								sAllTxnStatus = "PROCESS";
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sBO_STATUS_CD);
								if ((sBO_STATUS_CD.trim().equalsIgnoreCase("UPLD")) || (sBO_STATUS_CD.trim().equalsIgnoreCase("INPD")))
								{
									sAllTxnStatus = "NOTPROCESS";
								}
								
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected value of Transaction ID is -> " + sTxnid + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							sAllTxnStatus = "PROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
						
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}	
			}	
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound= "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
		
		return sAllTxnStatus;
	}
	
	/*'###########################################################################################################################
    'Function Name        : FnVerifyBillAmount
    'Function Description : To verify Bill Amount after running TFM batches and Billing Batches
    'Input Parameters     : sQuery  		-> Query to be executed
    '					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
    '                     :	sSheetName   -> Data sheet name
    '					  : sWorkbook -> Workbook path	
    'Output Parameters    : sAllTxnStatus     
    '############################################################################################################################*/
	public void FnVerifyBillAmount(String sQuery,int sStartRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyBillAmount");
		String sExpectedBillAmount,sAccountID;

		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);

				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = sStartRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();

					for(int i=0;i<AL.size();i++){

						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column

						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");

						System.out.println("Actual Bill Amount "+sbillAmount);

						sExpectedBillAmount	=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sAccountID			=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();

						System.out.println("Expected Bill Amount "+sExpectedBillAmount);
						System.out.println("Account ID "+sAccountID);

						if (sbillAmount.trim().equalsIgnoreCase(sExpectedBillAmount.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount for Account Id -> " + sAccountID + " is : "+sExpectedBillAmount+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount for Account Id -> " + sAccountID + " is : "+sExpectedBillAmount+" Actual Bill Amount is---->"+sbillAmount);
						}
						sStartingRow = sStartingRow + 1;
					}
				}
				else
				{
					System.out.println("Data not available in db");
				}	
			}	
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
    'Function Name        : FnVerifyTransactionError
    'Function Description : To verify Transaction error Message
    'Input Parameters     : sQuery  		-> Query to be executed
    '					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
    '                     :	sSheetName   -> Data sheet name
    '					  : sWorkbook -> Workbook path	
    'Output Parameters    : sAllTxnStatus     
    '############################################################################################################################*/
	public void FnVerifyTransactionError(String sQuery,int sStartRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionError");
		String sSTxnID,sSTxnStatus,sSMessageCat,sSMessageNum,sSMessage;


		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{

				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);

				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = sStartRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					int j = 0;
					for(int i=0;i<AL.size();i++)
					{
						j=j+1;
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column

						String sTxnID=(String)temp.get("TXN_DETAIL_ID");
						String sTxnStatus=(String)temp.get("BO_STATUS_CD");
						String sMessageCat=(String)temp.get("MESSAGE_CAT_NBR");
						String sMessageNum=(String)temp.get("MESSAGE_NBR");

						sSTxnID				=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSTxnStatus			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSMessageCat		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSMessageNum		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSMessage		    =	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();

						System.out.println("Data from data sheet->"+sSTxnID+sSTxnStatus+sSMessageCat+sSMessageNum);	
						if (sSTxnID.trim().equalsIgnoreCase(sTxnID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTxnID);

							if (sSTxnStatus.trim().equalsIgnoreCase(sTxnStatus.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Status -> Expected->" + sSTxnStatus + "  Actual->"+sTxnStatus);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Transaction Status -> Expected->" + sSTxnStatus + "  Actual->"+sTxnStatus);
							}
							if (sSMessageCat.trim().equalsIgnoreCase(sMessageCat.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							if (sSMessageNum.trim().equalsIgnoreCase(sMessageNum.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum+" Message->"+sSMessage);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTxnID);
						}
						sStartingRow = sStartingRow + 1;
					}
				}
				else
				{
					System.out.println("Data not available in db");
				}	
			}	
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionError
	'Function Description : To verify Transaction error Message
	'Input Parameters     : sHeaderID  		-> Transaction Header Id
	'					  : sTransactionIDs -> comma seperated Expected transaction ids 	
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyTransactionError(String sHeaderID,String sTransactionIDs,int sStartRow,String sSheetName,String sWorkbook) throws Exception
	{
		
		System.out.println(">>>>>>>>>>--FnVerifyTransactionError");
		String sSTxnID,sSTxnStatus,sSMessageCat,sSMessageNum,sSMessage;
		String sQuery;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sQuery = "select txn_detail_id,bo_status_cd,message_cat_nbr,message_nbr from ci_txn_detail where txn_header_id = '"+sHeaderID+"' and txn_detail_id in('"+sTransactionIDs+"') order by txn_detail_id";
									
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = sStartRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					int j = sStartingRow;
					for(int i=0;i<AL.size();i++)
					{
						j=sStartingRow;
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTxnID=(String)temp.get("TXN_DETAIL_ID");
						String sTxnStatus=(String)temp.get("BO_STATUS_CD");
						String sMessageCat=(String)temp.get("MESSAGE_CAT_NBR");
						String sMessageNum=(String)temp.get("MESSAGE_NBR");
																		
						sSTxnID				=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSTxnStatus			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSMessageCat		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSMessageNum		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSMessage		    =	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						
						System.out.println("Data from data sheet->"+sSTxnID+sSTxnStatus+sSMessageCat+sSMessageNum);	
						if (sSTxnID.trim().equalsIgnoreCase(sTxnID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTxnID);
							
							if (sSTxnStatus.trim().equalsIgnoreCase(sTxnStatus.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Status -> Expected->" + sSTxnStatus + "  Actual->"+sTxnStatus);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Transaction Status -> Expected->" + sSTxnStatus + "  Actual->"+sTxnStatus);
							}
							if (sSMessageCat.trim().equalsIgnoreCase(sMessageCat.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							if (sSMessageNum.trim().equalsIgnoreCase(sMessageNum.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum+" Message->"+sSMessage);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTxnID + " Actual value of Transaction ID is---->"+sTxnID);
						}
						sStartingRow = sStartingRow + 1;
					}
				}
				else
				{
					System.out.println("Data not available in db");
				}	
			}	
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###############################################################
	'Function Name        : FnTruncateTableforTFM
	'Function Description : Truncate tables to start new TFM batch cycle
	'Input Parameters     :                            
	'                      
	'Output Parameters    :
	'################################################################*/
	public void FnTruncateTableforTFM() throws Exception 
	{
		System.out.println(">>>>>>>>>>--FnTruncateTableforTFM");
	   try
	   {
		   if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
		   {
			   // execute truncate
			   FnSetValueInDb("truncate table F1_TSPACE_ENTRY",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table CI_BATCH_THD", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table CI_BATCH_RUN", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table CI_BATCH_JOB", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table CI_BATCH_INST", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table ci_wf_proc", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table ci_wf_proc_k", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table ci_wf_proc_char", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table ci_batch_run_cntrl", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
			   // execute truncate
			   FnSetValueInDb("truncate table CI_TXN_DTL_PRITM_SUMMARY", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			   Thread.sleep(2000);
		   }
	   }
	   catch (Exception e) 
	   {
		   System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
		   e.printStackTrace();
		   BaseTest.eFlgFound =  "false";
		   CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	   }
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionDatawithAcctID
	'Function Description : To Verify transaction data after running all the batches
		'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
		'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'############################################################################################################################*/
	public void FnVerifyTransactionDatawithAcctID(int sStartRow,int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionDatawithAcctID");
		
		
		String sQuery;
		String sSTXN_DETAIL_ID,sSACCT_ID,sSinitial_price_item_cd,sSpriceitem_cd,sSdetail_priceitem_parm_grp_id,sSpriceitem_parm_grp_id,sSprice_asgn_id,sSstart_dt,sSend_dt,sSdo_not_agg_sw, sStxn_pritm_status_cd,sSpa_acct_id;
		String sSpa_per_id,sSpa_pricelist_id,sSsqi_cd,sSsvc_qty,sSbillable_chg_id,sSqi_cd,sAcct_Id;
		int j = 0;
		try 
		{
			for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
			{
				j = sStartingRow;
					
				System.out.println("sStartingRow"+sStartingRow);
				System.out.println("sSheetName"+sSheetName);
					
				sSTXN_DETAIL_ID			= 		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sSinitial_price_item_cd =		(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				sSqi_cd =(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
				sAcct_Id = 	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				sQuery  =	"select p.txn_detail_id,p.acct_id,p.initial_price_item_cd ,bc.priceitem_cd,p.priceitem_parm_grp_id AS detail_priceitem_parm_grp_id,bc.priceitem_parm_grp_id,bc.price_asgn_id,bc.billable_chg_id,bc.start_dt,bc.end_dt,p.do_not_agg_sw,"+
				" p.txn_pritm_status_cd,bc.pa_acct_id,bc.pa_per_id,bc.pa_pricelist_id,sq.sqi_cd,sq.svc_qty"+
				" from ci_txn_dtl_pritm p, ci_bill_chg bc, ci_bchg_sq sq"+
				" where bc.billable_chg_id = p.billable_chg_id"+
				" and sq.billable_chg_id = bc.billable_chg_id"+
				" and p.txn_detail_id = '"+sSTXN_DETAIL_ID+"' and p.initial_price_item_cd = '"+sSinitial_price_item_cd+"'   and sq.sqi_cd = '"+sSqi_cd+"' and acct_id = '"+sAcct_Id+"'";
					
					
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if ((BaseTest.eFlgFound.equalsIgnoreCase("true")))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				        
						// To Get value of corresponding column
						String sTXN_DETAIL_ID =(String)temp.get("TXN_DETAIL_ID");
						String sACCT_ID =(String)temp.get("ACCT_ID");
						String sinitial_price_item_cd =(String)temp.get("INITIAL_PRICE_ITEM_CD");
						String spriceitem_cd =(String)temp.get("PRICEITEM_CD");
						String sdetail_priceitem_parm_grp_id =(String)temp.get("DETAIL_PRICEITEM_PARM_GRP_ID");
						String spriceitem_parm_grp_id =(String)temp.get("PRICEITEM_PARM_GRP_ID");
						String sprice_asgn_id =(String)temp.get("PRICE_ASGN_ID");
						String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
						if (sbillable_chg_id.equalsIgnoreCase("          "))
						{
							sbillable_chg_id = "NOVAL";
						}
						else
						{
							sbillable_chg_id = "GET"+sbillable_chg_id;
						}
						String sstart_dt =(String)temp.get("START_DT");
						String send_dt =(String)temp.get("END_DT");
						String sdo_not_agg_sw =(String)temp.get("DO_NOT_AGG_SW");
						String stxn_pritm_status_cd =(String)temp.get("TXN_PRITM_STATUS_CD");
						String spa_acct_id =(String)temp.get("PA_ACCT_ID");
						if (spa_acct_id.equalsIgnoreCase("          "))
						{
							spa_acct_id = "NOVAL";
						}
						String spa_per_id =(String)temp.get("PA_PER_ID");
						if (spa_per_id.equalsIgnoreCase("          "))
						{
							spa_per_id = "NOVAL";
						}
						String spa_pricelist_id =(String)temp.get("PA_PRICELIST_ID");
						if (spa_pricelist_id.equalsIgnoreCase("          "))
						{
							spa_pricelist_id = "NOVAL";
						}
						String ssqi_cd =(String)temp.get("SQI_CD");
						String ssvc_qty =(String)temp.get("SVC_QTY");
						System.out.println("DB Data->"+sTXN_DETAIL_ID+sACCT_ID+sinitial_price_item_cd+spriceitem_cd+sdetail_priceitem_parm_grp_id+spriceitem_parm_grp_id+sprice_asgn_id+sbillable_chg_id+sstart_dt+send_dt);
						System.out.println("DB Data->"+sdo_not_agg_sw+stxn_pritm_status_cd+spa_acct_id+spa_per_id+spa_pricelist_id+ssqi_cd+ssvc_qty);
						
						// Getting data from data sheet
						sSTXN_DETAIL_ID					= 	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSACCT_ID 						= 	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSinitial_price_item_cd 		=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_cd					=	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSdetail_priceitem_parm_grp_id 	=  	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSpriceitem_parm_grp_id 		= 	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sSprice_asgn_id 				=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sSbillable_chg_id 				=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sSstart_dt 						=	(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sSend_dt 						=	(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						sSdo_not_agg_sw 				=	(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
						sStxn_pritm_status_cd 			=	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
						sSpa_acct_id 					=	(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
						sSpa_per_id 					=	(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
						sSpa_pricelist_id 				=	(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
						sSsqi_cd 						=	(String)CF.FnGetCellValue(sStartingRow ,16, sSheetName, sWorkbook).toString().trim();
						sSsvc_qty 						=	(String)CF.FnGetCellValue(sStartingRow ,17, sSheetName, sWorkbook).toString().trim();
						
						// Data sheet data
						System.out.println("Datasheet Data->"+sSTXN_DETAIL_ID+sSACCT_ID+sSinitial_price_item_cd+sSpriceitem_cd+sSdetail_priceitem_parm_grp_id+sSpriceitem_parm_grp_id+sSprice_asgn_id+sSbillable_chg_id+sSstart_dt+sSend_dt);
						System.out.println("Datasheet Data->"+sSdo_not_agg_sw+sStxn_pritm_status_cd+sSpa_acct_id+sSpa_per_id+sSpa_pricelist_id+sSsqi_cd+sSsvc_qty);
						
						if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sSTXN_DETAIL_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							
							if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
							}
							if (sSbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sbillable_chg_id.trim().substring(0,2)))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
							}
							if (sinitial_price_item_cd.trim().equalsIgnoreCase(sSinitial_price_item_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Inital Price Item Code -> Expected->" + sSinitial_price_item_cd + "  Actual->"+sinitial_price_item_cd);
							}
							if (spriceitem_cd.trim().equalsIgnoreCase(sSpriceitem_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Item Code from ci_bill_chg Table -> Expected->" + sSpriceitem_cd + "  Actual->"+spriceitem_cd);
							}
						
							if (sprice_asgn_id.trim().equalsIgnoreCase(sSprice_asgn_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Price Assign ID -> Expected->" + sSprice_asgn_id + "  Actual->"+sprice_asgn_id);
							}
							if (sstart_dt.trim().equalsIgnoreCase(sSstart_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Start Date -> Expected->" + sSstart_dt + "  Actual->"+sstart_dt);
							}
							if (send_dt.trim().equalsIgnoreCase(sSend_dt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge End Date -> Expected->" + sSend_dt + "  Actual->"+send_dt);
							}
							if (sdo_not_agg_sw.trim().equalsIgnoreCase(sSdo_not_agg_sw.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSdo_not_agg_sw + "  Actual->"+sdo_not_agg_sw);
							}
							if (stxn_pritm_status_cd.trim().equalsIgnoreCase(sStxn_pritm_status_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Transaction Leg Status -> Expected->" + sStxn_pritm_status_cd + "  Actual->"+stxn_pritm_status_cd);
							}
							if (spa_acct_id.trim().equalsIgnoreCase(sSpa_acct_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> pa_acct_id in ci_bill_chg table  -> Expected->" + sSpa_acct_id + "  Actual->"+spa_acct_id);
							}
							if (spa_per_id.trim().equalsIgnoreCase(sSpa_per_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSpa_per_id + "  Actual->"+spa_per_id);
							}
							if (spa_pricelist_id.trim().equalsIgnoreCase(sSpa_pricelist_id.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_pricelist_id in ci_bill_chg table -> Expected->" + sSpa_pricelist_id + "  Actual->"+spa_pricelist_id);
							}
							if (ssqi_cd.trim().equalsIgnoreCase(sSsqi_cd.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity Identifier-> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" -> Service Quantity Identifier -> Expected->" + sSsqi_cd + "  Actual->"+ssqi_cd);
							}
							if (sSsvc_qty.trim().equalsIgnoreCase(ssvc_qty.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Service Quantity -> Expected->" + sSsvc_qty + "  Actual->"+ssvc_qty);
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSTXN_DETAIL_ID + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
						}
					}
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Scenario->"+sSheetName+" -> Data not available for Transaction ID->"+ sSTXN_DETAIL_ID +"and Intial Price Item code->"+sSinitial_price_item_cd);
				}
			} // end of for loop k
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionDatawithpassthroughwithChrgAmnt
	'Function Description : To Verify transaction data after running all the batches
		'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
		'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	Created by				: Surya Theja
	'############################################################################################################################*/
	public void FnVerifyTransactionDatawithpassthroughwithChrgAmnt(int sAcctStartRow,int sAcctEndRow,int sStartRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionDatawithpassthroughwithChrgAmnt");
		
		String sQuery;

		int j = 0;
		try
		{
			j = sStartRow;
			for (int k=sAcctStartRow;k<=sAcctEndRow;k++)
			{
				System.out.println("j----"+j);	
				System.out.println("sStartingRow"+k);
				System.out.println("sSheetName"+sSheetName);
					
				String sACCT_ID					= 			(String)CF.FnGetCellValue(k ,1, sSheetName, sWorkbook).toString().trim();
					
				sQuery  =	"SELECT * FROM CI_B_CHG_LINE where billable_chg_id in (select billable_chg_id from ci_bill_chg where sa_id = (select sa_id from ci_sa where acct_id IN ('"+sACCT_ID+"')))order by CHARGE_AMT";
					
					
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if ((BaseTest.eFlgFound.equalsIgnoreCase("true")))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID 	=		(String)temp.get("BILLABLE_CHG_ID");
						String sLINE_SEQ 			=		(String)temp.get("LINE_SEQ");
						String sDESCR_ON_BILL 		=		(String)temp.get("DESCR_ON_BILL");
						String sCHARGE_AMT 			=		(String)temp.get("CHARGE_AMT");
						String sCURRENCY_CD 		=		(String)temp.get("CURRENCY_CD");
						String sSHOW_ON_BILL_SW 	=		(String)temp.get("SHOW_ON_BILL_SW");
						String sAPP_IN_SUMM_SW 		=		(String)temp.get("APP_IN_SUMM_SW");
						String sDST_ID 				=		(String)temp.get("DST_ID");
						String sVERSION				=		(String)temp.get("VERSION");
						String sMEMO_SW 			=		(String)temp.get("MEMO_SW");
						String sAGG_PARM_GRP_ID 	=		(String)temp.get("AGG_PARM_GRP_ID");
						String sPRECS_CHARGE_AMT 	=		(String)temp.get("PRECS_CHARGE_AMT");
					   
						if (sBILLABLE_CHG_ID.equalsIgnoreCase("          "))
						{
							sBILLABLE_CHG_ID = "NOVAL";
						}
						else
						{
							sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						}
						
						System.out.println("DB Data->"+sBILLABLE_CHG_ID+sLINE_SEQ+sDESCR_ON_BILL+sCHARGE_AMT+sCURRENCY_CD+sSHOW_ON_BILL_SW+sAPP_IN_SUMM_SW+sDST_ID+sVERSION+sMEMO_SW);
						System.out.println("DB Data->"+sAGG_PARM_GRP_ID+sPRECS_CHARGE_AMT);
						
						// Getting data from data sheet
											
						String sSBILLABLE_CHG_ID 		=		(String)CF.FnGetCellValue(j ,1, sSheetName, sWorkbook).toString();
						String sSLINE_SEQ 				=		(String)CF.FnGetCellValue(j ,2, sSheetName, sWorkbook).toString().trim();
						String sSDESCR_ON_BILL 			=		(String)CF.FnGetCellValue(j ,3, sSheetName, sWorkbook).toString().trim();
						String sSCHARGE_AMT 			=		(String)CF.FnGetCellValue(j ,4, sSheetName, sWorkbook).toString().trim();
						String sSCURRENCY_CD 			=		(String)CF.FnGetCellValue(j ,5, sSheetName, sWorkbook).toString().trim();
						String sSSHOW_ON_BILL_SW 		=		(String)CF.FnGetCellValue(j ,6, sSheetName, sWorkbook).toString().trim();
						String sSAPP_IN_SUMM_SW 		=		(String)CF.FnGetCellValue(j ,7, sSheetName, sWorkbook).toString().trim();
						String sSDST_ID 				=		(String)CF.FnGetCellValue(j ,8, sSheetName, sWorkbook).toString().trim();
						String sSVERSION				=		(String)CF.FnGetCellValue(j ,9, sSheetName, sWorkbook).toString().trim();
						String sSMEMO_SW 				=		(String)CF.FnGetCellValue(j ,10, sSheetName, sWorkbook).toString().trim();
						String sSAGG_PARM_GRP_ID 		=		(String)CF.FnGetCellValue(j ,11, sSheetName, sWorkbook).toString().trim();
						String sSPRECS_CHARGE_AMT 		=		(String)CF.FnGetCellValue(j ,12, sSheetName, sWorkbook).toString().trim();

						// Data sheet data
						
						System.out.println("Datasheet Data->"+sSBILLABLE_CHG_ID+sSLINE_SEQ+sSDESCR_ON_BILL+sSCHARGE_AMT+sSCURRENCY_CD+sSSHOW_ON_BILL_SW+sSAPP_IN_SUMM_SW+sSDST_ID+sSVERSION+sSMEMO_SW);
						System.out.println("Datasheet Data->"+sSAGG_PARM_GRP_ID+sSPRECS_CHARGE_AMT);
						
						if (sSBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBILLABLE_CHG_ID.trim().substring(0,2)))
						{
						
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSBILLABLE_CHG_ID + "  Actual->"+sBILLABLE_CHG_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSBILLABLE_CHG_ID + "  Actual->"+sBILLABLE_CHG_ID);
						}
						if (sLINE_SEQ.trim().equalsIgnoreCase(sSLINE_SEQ.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSLINE_SEQ + "  Actual->"+sLINE_SEQ);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSLINE_SEQ + "  Actual->"+sLINE_SEQ);
						}
						if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sSDESCR_ON_BILL.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
						}
						if (sCHARGE_AMT.trim().equalsIgnoreCase(sSCHARGE_AMT.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSCHARGE_AMT + "  Actual->"+sCHARGE_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" ->Expected->" + sSCHARGE_AMT + "  Actual->"+sCHARGE_AMT);
						}
							
						if (sCURRENCY_CD.trim().equalsIgnoreCase(sSCURRENCY_CD.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSCURRENCY_CD + "  Actual->"+sCURRENCY_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSCURRENCY_CD + "  Actual->"+sCURRENCY_CD);
						}
						if (sSHOW_ON_BILL_SW.trim().equalsIgnoreCase(sSSHOW_ON_BILL_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSSHOW_ON_BILL_SW + "  Actual->"+sSHOW_ON_BILL_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSSHOW_ON_BILL_SW + "  Actual->"+sSHOW_ON_BILL_SW);
						}
						if (sAPP_IN_SUMM_SW.trim().equalsIgnoreCase(sSAPP_IN_SUMM_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSAPP_IN_SUMM_SW + "  Actual->"+sAPP_IN_SUMM_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSAPP_IN_SUMM_SW + "  Actual->"+sAPP_IN_SUMM_SW);
						}
						if (sDST_ID.trim().equalsIgnoreCase(sSDST_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSDST_ID + "  Actual->"+sDST_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSDST_ID + "  Actual->"+sDST_ID);
						}
						if (sVERSION.trim().equalsIgnoreCase(sSVERSION.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
						}
						if (sMEMO_SW.trim().equalsIgnoreCase(sSMEMO_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSMEMO_SW + "  Actual->"+sMEMO_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSMEMO_SW + "  Actual->"+sMEMO_SW);
						}
						
						if (sAGG_PARM_GRP_ID.trim().equalsIgnoreCase(sSAGG_PARM_GRP_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSAGG_PARM_GRP_ID + "  Actual->"+sAGG_PARM_GRP_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSAGG_PARM_GRP_ID + "  Actual->"+sAGG_PARM_GRP_ID);
						}
						if (sPRECS_CHARGE_AMT.trim().equalsIgnoreCase(sSPRECS_CHARGE_AMT.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSPRECS_CHARGE_AMT + "  Actual->"+sPRECS_CHARGE_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSPRECS_CHARGE_AMT + "  Actual->"+sPRECS_CHARGE_AMT);
						}
						j++;
					}
				}
				else
				{
					System.out.println("No Data Found for Account Id: "+sACCT_ID);
					CF.FnTestCaseStatusReport("Fail","No Data Found for Account Id: "+sACCT_ID);
				}
			}
		}
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionStatusinUPLD
	'Function Description : To verify Transaction status after running TFM batches
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public String FnVerifyTransactionStatusinUPLD(String sHeaderID,int sStartRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionStatusinUPLD");
		String sTxnid,sTxnStatus;
		String sAllTxnStatus = "NOTPROCESS";
		String sQuery;
		
		try 
		{
			if ((BaseTest.eFlgFound.equalsIgnoreCase("true")))
			{
		
				sQuery = "select txn_detail_id,BO_STATUS_CD from CI_TXN_DETAIL_STG where txn_header_id = '"+sHeaderID+"' order by txn_detail_id";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if ((BaseTest.eFlgFound.equalsIgnoreCase("true")))
				{
				
					int sStartingRow = sStartRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTXN_DETAIL_ID=(String)temp.get("TXN_DETAIL_ID");
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
												
						System.out.println("TXN_DETAIL_ID "+sTXN_DETAIL_ID);
						System.out.println("BO_STATUS_CD "+sBO_STATUS_CD);
						
						sTxnid	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sTxnStatus = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						
						if (sTXN_DETAIL_ID.trim().equalsIgnoreCase(sTxnid.trim()))
						{
							if (sBO_STATUS_CD.trim().equalsIgnoreCase(sTxnStatus.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sBO_STATUS_CD);
								sAllTxnStatus = "PROCESS";
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Expected Status for Transaction ID -> " + sTxnid + " is : "+sTxnStatus+" Actual value of Transaction Status is---->"+sBO_STATUS_CD);
								if ((sBO_STATUS_CD.trim().equalsIgnoreCase("UPLD")) || (sBO_STATUS_CD.trim().equalsIgnoreCase("INPD")))
								{
									sAllTxnStatus = "NOTPROCESS";
								}
								
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected value of Transaction ID is -> " + sTxnid + " Actual value of Transaction ID is---->"+sTXN_DETAIL_ID);
							sAllTxnStatus = "PROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
						
					}
				}	
				else
				{
					System.out.println("Data not available in db");
				}	
			}	
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
		
		return sAllTxnStatus;
	}
	
	/*'##########################################################################################################################################
	'Function Name        : FnTFMtableentries
	'Function Description : Enter records in tables
	'Input Parameters     : startrow		
			      : endrow					
	'############################################################################################################################################*/   
	public void FnTFMtableentries(int startrow,int endrow, String sSheetName, String sWorkbook)throws Exception
	{
		System.out.println(">>>>>>>>>>--FnTFMtableentries");
		try	
		{
			BaseTest.sTestDescription = "Search Billable Charges for Accounts"; 
			
			String sBchgId,Bhch_Id;

			for(int i=startrow;i<=endrow;i++)
			{					 
				sBchgId			=	(String)CF.FnGetCellValue(i,2,sSheetName, sWorkbook);
				Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_BILL_CHG_CHAR where BILLABLE_CHG_ID='"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(Bhch_Id.equalsIgnoreCase("NoValue"))
				{
					FnSetValueInDb("Insert into CI_BILL_CHG_CHAR( BILLABLE_CHG_ID,CHAR_TYPE_CD,EFFDT,CHAR_VAL,ADHOC_CHAR_VAL,VERSION,CHAR_VAL_FK1, CHAR_VAL_FK2,CHAR_VAL_FK3,CHAR_VAL_FK4,CHAR_VAL_FK5,SRCH_CHAR_VAL) Values('"+sBchgId+"',' ',TO_DATE('01-01-2015','mm-dd-yyyy'),' ',' ','1',' ',' ',' ',' ',' ',' ')",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_BILL_CHG_CHAR where BILLABLE_CHG_ID = '"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					if(!Bhch_Id.equalsIgnoreCase("NoValue"))
					{
						CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" Inserted Successfully into CI_BILL_CHG_CHAR table");
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Billable Charge with ID :"+sBchgId+" Does not Inserted into CI_BILL_CHG_CHAR table");
					}
				}
				else
				{
					CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" exits in the table CI_BILL_CHG_CHAR");
				}				 				 
			}
			for(int j=startrow;j<=endrow;j++)
			{					 
				sBchgId			=	(String)CF.FnGetCellValue(j,2,sSheetName, sWorkbook);
				Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_B_CHG_LINE where BILLABLE_CHG_ID = '"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(Bhch_Id.equalsIgnoreCase("NoValue"))
				{ 
					FnSetValueInDb("INSERT INTO CI_B_CHG_LINE (BILLABLE_CHG_ID,LINE_SEQ,DESCR_ON_BILL,CHARGE_AMT,CURRENCY_CD,SHOW_ON_BILL_SW,APP_IN_SUMM_SW,DST_ID,VERSION,MEMO_SW,AGG_PARM_GRP_ID,PRECS_CHARGE_AMT) VALUES ('"+sBchgId+"','1','P * Q','10','USD','Y','N','BK - R','1','N','1','10')",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_B_CHG_LINE where BILLABLE_CHG_ID = '"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					if(!Bhch_Id.equalsIgnoreCase("NoValue"))
					{
						CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" Inserted Successfully into CI_B_CHG_LINE table");
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Billable Charge with ID :"+sBchgId+" Does not Inserted into CI_B_CHG_LINE table");
					}
				}
				else
				{
					CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" exits in the table CI_B_CHG_LINE");
				}					 				 
			}
			for(int k=startrow;k<=endrow;k++)
			{					 
				sBchgId			=	(String)CF.FnGetCellValue(k,2,sSheetName, sWorkbook);
				Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_B_LN_CHAR where BILLABLE_CHG_ID = '"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if(Bhch_Id.equalsIgnoreCase("NoValue"))
				{ 
					FnSetValueInDb("INSERT INTO CI_B_LN_CHAR (BILLABLE_CHG_ID,LINE_SEQ,CHAR_TYPE_CD,CHAR_VAL,ADHOC_CHAR_VAL,VERSION) VALUES ('"+sBchgId+"','1',' ',' ',' ','1')",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					Bhch_Id			= 	(String)FnGetDBColumnValue("select BILLABLE_CHG_ID from CI_B_CHG_LINE where BILLABLE_CHG_ID = '"+sBchgId+"'", "BILLABLE_CHG_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					if(!Bhch_Id.equalsIgnoreCase("NoValue"))
					{
						CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" Inserted Successfully into CI_B_LN_CHAR table");
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Billable Charge with ID :"+sBchgId+" Does not Inserted into CI_B_LN_CHAR table");
					}
				}
				else
				{
					CF.FnTestCaseStatusReport("Pass", "Billable Charge with ID :"+sBchgId+" exits in the table CI_B_LN_CHAR");
				}				 				 
			}
		}
		catch(Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}	
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTransactionDatawithpassthrough
	'Function Description : To Verify transaction data after running all the batches
		'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
		'					  : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	Created by				: Surya Theja
	'############################################################################################################################*/
	public void FnVerifyTransactionDatawithpassthrough(int sAcctStartRow,int sAcctEndRow,int sStartRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTransactionDatawithpassthrough");
		
		String sQuery;

		int j = 0;
		try
		{
			j = sStartRow;
			for (int k=sAcctStartRow;k<=sAcctEndRow;k++)
			{
				System.out.println("j----"+j);	
				System.out.println("sStartingRow"+k);
				System.out.println("sSheetName"+sSheetName);
					
				String sACCT_ID	=	(String)CF.FnGetCellValue(k ,1, sSheetName, sWorkbook).toString().trim();
					
				sQuery  =	"SELECT * FROM CI_B_CHG_LINE where billable_chg_id in (select billable_chg_id from ci_bill_chg where sa_id = (select sa_id from ci_sa where acct_id IN ('"+sACCT_ID+"')))order by BILLABLE_CHG_ID";
					
					
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
						String sBILLABLE_CHG_ID 	=		(String)temp.get("BILLABLE_CHG_ID");
						String sLINE_SEQ 			=		(String)temp.get("LINE_SEQ");
						String sDESCR_ON_BILL 		=		(String)temp.get("DESCR_ON_BILL");
						String sCHARGE_AMT 			=		(String)temp.get("CHARGE_AMT");
						String sCURRENCY_CD 		=		(String)temp.get("CURRENCY_CD");
						String sSHOW_ON_BILL_SW 	=		(String)temp.get("SHOW_ON_BILL_SW");
						String sAPP_IN_SUMM_SW 		=		(String)temp.get("APP_IN_SUMM_SW");
						String sDST_ID 				=		(String)temp.get("DST_ID");
						String sVERSION				=		(String)temp.get("VERSION");
						String sMEMO_SW 			=		(String)temp.get("MEMO_SW");
						String sAGG_PARM_GRP_ID 	=		(String)temp.get("AGG_PARM_GRP_ID");
						String sPRECS_CHARGE_AMT 	=		(String)temp.get("PRECS_CHARGE_AMT");
					   
										
						
						if (sBILLABLE_CHG_ID.equalsIgnoreCase("          "))
						{
							sBILLABLE_CHG_ID = "NOVAL";
						}
						else
						{
							sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						}
						
						System.out.println("DB Data->"+sBILLABLE_CHG_ID+sLINE_SEQ+sDESCR_ON_BILL+sCHARGE_AMT+sCURRENCY_CD+sSHOW_ON_BILL_SW+sAPP_IN_SUMM_SW+sDST_ID+sVERSION+sMEMO_SW);
						System.out.println("DB Data->"+sAGG_PARM_GRP_ID+sPRECS_CHARGE_AMT);
						
						// Getting data from data sheet
											
						String sSBILLABLE_CHG_ID 		=		(String)CF.FnGetCellValue(j ,1, sSheetName, sWorkbook).toString();
						String sSLINE_SEQ 				=		(String)CF.FnGetCellValue(j ,2, sSheetName, sWorkbook).toString().trim();
						String sSDESCR_ON_BILL 			=		(String)CF.FnGetCellValue(j ,3, sSheetName, sWorkbook).toString().trim();
						String sSCHARGE_AMT 			=		(String)CF.FnGetCellValue(j ,4, sSheetName, sWorkbook).toString().trim();
						String sSCURRENCY_CD 			=		(String)CF.FnGetCellValue(j ,5, sSheetName, sWorkbook).toString().trim();
						String sSSHOW_ON_BILL_SW 		=		(String)CF.FnGetCellValue(j ,6, sSheetName, sWorkbook).toString().trim();
						String sSAPP_IN_SUMM_SW 		=		(String)CF.FnGetCellValue(j ,7, sSheetName, sWorkbook).toString().trim();
						String sSDST_ID 				=		(String)CF.FnGetCellValue(j ,8, sSheetName, sWorkbook).toString().trim();
						String sSVERSION				=		(String)CF.FnGetCellValue(j ,9, sSheetName, sWorkbook).toString().trim();
						String sSMEMO_SW 				=		(String)CF.FnGetCellValue(j ,10, sSheetName, sWorkbook).toString().trim();
						String sSAGG_PARM_GRP_ID 		=		(String)CF.FnGetCellValue(j ,11, sSheetName, sWorkbook).toString().trim();
						String sSPRECS_CHARGE_AMT 		=		(String)CF.FnGetCellValue(j ,12, sSheetName, sWorkbook).toString().trim();

						// Data sheet data
						System.out.println("Datasheet Data->"+sSBILLABLE_CHG_ID+sSLINE_SEQ+sSDESCR_ON_BILL+sSCHARGE_AMT+sSCURRENCY_CD+sSSHOW_ON_BILL_SW+sSAPP_IN_SUMM_SW+sSDST_ID+sSVERSION+sSMEMO_SW);
						System.out.println("Datasheet Data->"+sSAGG_PARM_GRP_ID+sSPRECS_CHARGE_AMT);
						
						if (sSBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBILLABLE_CHG_ID.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSBILLABLE_CHG_ID + "  Actual->"+sBILLABLE_CHG_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge ID -> Expected->" + sSBILLABLE_CHG_ID + "  Actual->"+sBILLABLE_CHG_ID);
						}
						if (sLINE_SEQ.trim().equalsIgnoreCase(sSLINE_SEQ.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSLINE_SEQ + "  Actual->"+sLINE_SEQ);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSLINE_SEQ + "  Actual->"+sLINE_SEQ);
						}
						if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sSDESCR_ON_BILL.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
						}
						if (sCHARGE_AMT.trim().equalsIgnoreCase(sSCHARGE_AMT.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSCHARGE_AMT + "  Actual->"+sCHARGE_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail",  "Row No: "+j+" ->Expected->" + sSCHARGE_AMT + "  Actual->"+sCHARGE_AMT);
						}
							
						if (sCURRENCY_CD.trim().equalsIgnoreCase(sSCURRENCY_CD.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSCURRENCY_CD + "  Actual->"+sCURRENCY_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSCURRENCY_CD + "  Actual->"+sCURRENCY_CD);
						}
						if (sSHOW_ON_BILL_SW.trim().equalsIgnoreCase(sSSHOW_ON_BILL_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSSHOW_ON_BILL_SW + "  Actual->"+sSHOW_ON_BILL_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSSHOW_ON_BILL_SW + "  Actual->"+sSHOW_ON_BILL_SW);
						}
						if (sAPP_IN_SUMM_SW.trim().equalsIgnoreCase(sSAPP_IN_SUMM_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSAPP_IN_SUMM_SW + "  Actual->"+sAPP_IN_SUMM_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSAPP_IN_SUMM_SW + "  Actual->"+sAPP_IN_SUMM_SW);
						}
						if (sDST_ID.trim().equalsIgnoreCase(sSDST_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSDST_ID + "  Actual->"+sDST_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSDST_ID + "  Actual->"+sDST_ID);
						}
						if (sVERSION.trim().equalsIgnoreCase(sSVERSION.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
						}
						if (sMEMO_SW.trim().equalsIgnoreCase(sSMEMO_SW.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected->" + sSMEMO_SW + "  Actual->"+sMEMO_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected->" + sSMEMO_SW + "  Actual->"+sMEMO_SW);
						}
						
						if (sAGG_PARM_GRP_ID.trim().equalsIgnoreCase(sSAGG_PARM_GRP_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSAGG_PARM_GRP_ID + "  Actual->"+sAGG_PARM_GRP_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> pa_per_id in ci_bill_chg table -> Expected->" + sSAGG_PARM_GRP_ID + "  Actual->"+sAGG_PARM_GRP_ID);
						}
						if (sPRECS_CHARGE_AMT.trim().equalsIgnoreCase(sSPRECS_CHARGE_AMT.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSPRECS_CHARGE_AMT + "  Actual->"+sPRECS_CHARGE_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Do Not Agreegate Switch -> Expected->" + sSPRECS_CHARGE_AMT + "  Actual->"+sPRECS_CHARGE_AMT);
						}
						j++;
					}
				}
				else
				{
					System.out.println("No Data Found for Account Id: "+sACCT_ID);
				}
				//sStartRow = sStartRow+5;
			} 
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
		
	}
	
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyDissaggTransactionData
	'Function Description : To Verify transaction data after running all the batches
	'Input Parameters     : sStartRow   
	'					  : sEndRow     
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	Written by 			  : Surya Theja
	'############################################################################################################################*/
	public void FnVerifyDissaggTransactionData(int iStartrow,int iEndrow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyDissaggTransactionData");
		try
		{
			BaseTest.sTestDescription = "Check Billable Charge Count with Status";
			for(int i=iStartrow;i<=iEndrow;i++)
			{
				String AcctId = CF.FnGetCellValue(i,1,sSheetName, sWorkbook).toString().trim();
				String Status = CF.FnGetCellValue(i,2,sSheetName, sWorkbook).toString().trim();
				String iCount = CF.FnGetCellValue(i,3,sSheetName, sWorkbook).toString().trim();
				String Count = (String)FnGetValueFromDb("select count(*) from ci_bill_chg where sa_id = (select sa_id from ci_sa where acct_id IN ('"+AcctId+"')) and billable_chg_stat = '"+Status+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
				if(iCount.equalsIgnoreCase(Count))
				{
					CF.FnTestCaseStatusReport("Pass", "Total Number of Billable Charges with Status Matched" );			
					
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Total Number of Billable Charges with Status does not Matched");			
					
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetPersonIdFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipIdFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipIdFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName, sStartDate, sEndDate, sMembershipId;
				String sMembershipIdArr[];
				int iCounter, iMembershipIdlen;
				
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sStartDate		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sEndDate		=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
				
				String sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MEMBERSHIP WHERE POLICY_ID = (SELECT POLICY_ID FROM CI_POLICY_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iRowCount            	=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==1)
				{
					//Verify entry in table ci_bill table
					String sGetText =  FnGetDBColumnValue("SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP WHERE POLICY_ID = (SELECT POLICY_ID FROM CI_POLICY_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))","MEMBERSHIP_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("MEMBERSHIP_ID ---------------" +sGetText);
					CF.FnWriteCellValue(iStartingRow, 2, sGetText, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Membership Id for " +sPersonName.replace(",", "")+ " = "+sGetText);
				}
				else 
				{
					if(!sStartDate.equalsIgnoreCase("NoValue"))
					{
						//Verify entry in table ci_bill table
						String sGetText =  FnGetDBColumnValue("SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP WHERE START_DT = TO_DATE('"+sStartDate+"','MM-DD-YYYY') AND END_DT = TO_DATE('"+sEndDate+"','MM-DD-YYYY') AND POLICY_ID = (SELECT POLICY_ID FROM CI_POLICY_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))","MEMBERSHIP_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("MEMBERSHIP_ID ---------------" +sGetText);
						CF.FnWriteCellValue(iStartingRow, 2, sGetText, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Membership Id for "+sPersonName.replace(",", "")+ " = "+sGetText);
					}
					else
					{
						sMembershipIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP WHERE POLICY_ID = (SELECT POLICY_ID FROM CI_POLICY_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))","MEMBERSHIP_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						
						iMembershipIdlen = sMembershipIdArr.length;
						System.out.println("Length of Array = "+iMembershipIdlen);
						
						for(int k=0;k<iMembershipIdlen;k++,iCounter++)
						{					
							sMembershipId = sMembershipIdArr[k];
							CF.FnWriteCellValue(iStartingRow+iCounter, 2, sMembershipId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","Membership Id for "+sPersonName.replace(",", "")+ " = "+sMembershipIdArr[k]);
						}
						
					}
				}

			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetPersonIdFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetPersonIdFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetPersonIdFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName;
				
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				//Verify entry in table ci_bill table
				String sGetText =  FnGetDBColumnValue("SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')","PER_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("PER_ID ---------------" +sGetText);
				CF.FnWriteCellValue(iStartingRow, 2, sGetText, sSheetName, sWorkbook);
				
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipCharValueFromDB
	'Function Description : This function gets the Membership Characteristic Value for GeoRate from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipCharValueFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipCharValueFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sCharTypeCd,sExpCharValue, sAdhocCharVal;
				String sAdhocCharValArr[];
				
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sCharTypeCd			=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sExpCharValue		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				
				String sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MEMBERSHIP_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iRowCount            	=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==1)
				{
					//Verify entry in table ci_bill table
					String sGetText =  FnGetDBColumnValue("SELECT ADHOC_CHAR_VAL FROM CI_MEMBERSHIP_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"' ORDER BY ADHOC_CHAR_VAL","ADHOC_CHAR_VAL",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("ADHOC_CHAR_VAL ---------------" +sGetText);
					if(sGetText.equalsIgnoreCase(sExpCharValue))
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass", "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue);
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sGetText +" NOT MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail", "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue);
					}
				}
				else
				{
					//Verify entry in table ci_bill table
					sAdhocCharValArr =  (String[]) FnGetDBColumnValueInArray("SELECT ADHOC_CHAR_VAL FROM CI_MEMBERSHIP_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"' ORDER BY ADHOC_CHAR_VAL","ADHOC_CHAR_VAL",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					sAdhocCharVal = Arrays.toString(sAdhocCharValArr);
					
					System.out.println("Array = "+sAdhocCharVal);
					
					if(sAdhocCharVal.equalsIgnoreCase(sExpCharValue))
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass", "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue);
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail", "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue);
					}
						
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipCharValueFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipPersonCharValueFromDB
	'Function Description : This function gets the Membership Characteristic Value for GeoRate from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipPersonCharValueFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipPersonCharValueFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sCharTypeCd,sExpCharValue, sAdhocCharVal;
				String sAdhocCharValArr[];
				
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sCharTypeCd			=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sExpCharValue		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				
				String sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MEMBERSHIP_PER_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iRowCount            	=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==1)
				{
					//Verify entry in table ci_bill table
					String sGetText =  FnGetDBColumnValue("SELECT ADHOC_CHAR_VAL FROM CI_MEMBERSHIP_PER_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"' ORDER BY ADHOC_CHAR_VAL","ADHOC_CHAR_VAL",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("ADHOC_CHAR_VAL ---------------" +sGetText);
					if(sGetText.equalsIgnoreCase(sExpCharValue))
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass", "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue);
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sGetText +" NOT MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail", "MEMBERSHIP CHAR VALUE = "+sGetText +" MATCHED WITH "+sExpCharValue);
					}
				}
				else
				{
					//Verify entry in table ci_bill table
					sAdhocCharValArr =  (String[]) FnGetDBColumnValueInArray("SELECT ADHOC_CHAR_VAL FROM CI_MEMBERSHIP_PER_CHAR WHERE MEMBERSHIP_ID = '"+sMembershipId+"' AND  CHAR_TYPE_CD = '"+sCharTypeCd+"' ORDER BY ADHOC_CHAR_VAL","ADHOC_CHAR_VAL",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					sAdhocCharVal = Arrays.toString(sAdhocCharValArr);
					
					System.out.println("Array = "+sAdhocCharVal);
					
					if(sAdhocCharVal.equalsIgnoreCase(sExpCharValue))
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass", "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue);
					}
					else
					{
						CF.FnWriteCellValue(iStartingRow, 4, "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Fail", "MEMBERSHIP CHAR VALUE = "+sAdhocCharVal +" MATCHED WITH "+sExpCharValue);
					}
						
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipPersonCharValueFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSvcQty = CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBillPeriodCd.trim().contains(sBILL_PERIOD_CD.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSvcQty.trim().contains(sSVC_QTY.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillableChargesFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesTimelineDetailsFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBillableChargesTimelineDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBillableChargesTimelineDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sCalcAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, P.START_DT, P.END_DT, P.CALC_AMT FROM CI_BILL_CHG B, CI_PRCE_CALC P WHERE B.BILLABLE_CHG_ID = P.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY P.START_DT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("CALC_AMT"+sCALC_AMT);
						
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCalcAmt = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date  -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sCalcAmt.trim().contains(sCALC_AMT.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
										
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillableChargesTimelineDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBenefitDetailsFromDB
	'Function Description : This function gets the Benefit Details from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBenefitDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBenefitDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sBenefitId,sMembershipId,sPerId,sPerIdFinResp,sBenefitSourceFlg,sBenefitTypeFlg,sStartDt,sEndDt,sPbpId,sBenefitAmt,sBoStatusCd,sBusObjCd,sBenefitSubTypeFlg,sQuery;
				String sAllTxnStatus = "NOTPROCESS";
				sPerId			=	 CF.FnGetCellValue(iStartingRow-2,1, sSheetName, sWorkbook).toString().trim();
				sPerIdFinResp	=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT BENEFIT_ID, MEMBERSHIP_ID, PER_ID, BENEFIT_SRC_FLG, BENEFIT_TYPE_FLG, START_DT, END_DT, PBP_ID, BENEFIT_AMT, BO_STATUS_CD, BUS_OBJ_CD, BENEFIT_SUB_TYPE_CD FROM C1_BENEFITS WHERE MEMBERSHIP_ID IN (SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP WHERE POLICY_ID = (SELECT POLICY_ID FROM CI_POLICY_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPerId+"')))) AND PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPerIdFinResp+"')) ORDER BY BENEFIT_SUB_TYPE_CD,BO_STATUS_CD";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBENEFIT_ID=(String)temp.get("BENEFIT_ID");
						sBENEFIT_ID = "GET"+sBENEFIT_ID;
						String sMEMBERSHIP_ID=(String)temp.get("MEMBERSHIP_ID");
						String sPER_ID=(String)temp.get("PER_ID");
						String sBENEFIT_SRC_FLG=(String)temp.get("BENEFIT_SRC_FLG");
						String sBENEFIT_TYPE_FLG=(String)temp.get("BENEFIT_TYPE_FLG");
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sPBP_ID=(String)temp.get("PBP_ID");
						if (sPBP_ID.equalsIgnoreCase("NULL"))
						{
							sPBP_ID = "NOVAL";
						}		
						
						String sBENEFIT_AMT=(String)temp.get("BENEFIT_AMT");
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
						String sBUS_OBJ_CD=(String)temp.get("BUS_OBJ_CD");
						String sBENEFIT_SUB_TYPE_FLG=(String)temp.get("BENEFIT_SUB_TYPE_CD");
						
												
						System.out.println("BENEFIT_ID "+sBENEFIT_ID);
						System.out.println("MEMBERSHIP_ID "+sMEMBERSHIP_ID);
						System.out.println("PER_ID "+sPER_ID);
						System.out.println("BENEFIT_SRC_FLG "+sBENEFIT_SRC_FLG);
						System.out.println("BENEFIT_TYPE_FLG "+sBENEFIT_TYPE_FLG);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("PBP_ID "+sPBP_ID);
						System.out.println("BENEFIT_AMT "+sBENEFIT_AMT);
						System.out.println("BO_STATUS_CD "+sBO_STATUS_CD);
						System.out.println("BUS_OBJ_CD "+sBUS_OBJ_CD);
						System.out.println("BENEFIT_SUB_TYPE_FLG"+sBENEFIT_SUB_TYPE_FLG);
						
						
						sBenefitId			=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sMembershipId		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sPerId				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBenefitSourceFlg	=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sBenefitTypeFlg		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();	
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sEndDt 				=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sPbpId				=	CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sBenefitAmt			=	CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sBoStatusCd			=	CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						sBusObjCd			=	CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
						sBenefitSubTypeFlg	=	CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
						
						if (sBENEFIT_ID.trim().substring(0,2).equalsIgnoreCase(sBenefitId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Benefit ID ->"+sBenefitId+" Actual Benefit ID is---->"+sBENEFIT_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Benefit ID ->"+sBenefitId+" Actual Benefit ID is---->"+sBENEFIT_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMEMBERSHIP_ID.trim().equalsIgnoreCase(sMembershipId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Membership ID ->"+sMembershipId+" Actual Membership ID is---->"+sMEMBERSHIP_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Membership ID ->"+sMembershipId+" Actual Membership ID is---->"+sMEMBERSHIP_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPER_ID.trim().equalsIgnoreCase(sPerId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Person ID ->"+sPerId+" Actual Person ID is---->"+sPER_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Person ID ->"+sPerId+" Actual Person ID is---->"+sPER_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBENEFIT_SRC_FLG.trim().equalsIgnoreCase(sBenefitSourceFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Benefit Source Flag ->"+sBenefitSourceFlg+" Actual Benefit Source Flag is---->"+sBENEFIT_SRC_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Benefit Source Flag ->"+sBenefitSourceFlg+" Actual Benefit Source Flag is---->"+sBENEFIT_SRC_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBENEFIT_TYPE_FLG.trim().equalsIgnoreCase(sBenefitTypeFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Benefit Type Flag ->"+sBenefitSourceFlg+" Actual Benefit Type Flag is---->"+sBENEFIT_TYPE_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Benefit Type Flag ->"+sBenefitSourceFlg+" Actual Benefit Type Flag is---->"+sBENEFIT_TYPE_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date  -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sPBP_ID.trim().equalsIgnoreCase(sPbpId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected PBP ID -> "+sPbpId+" Actual value of PBP ID is---->"+sPBP_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected PBP ID -> "+sPbpId+" Actual value of PBP ID is---->"+sPBP_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBENEFIT_AMT.trim().equalsIgnoreCase(sBenefitAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Benefit Amount -> "+sBenefitAmt+" Actual value of Benefit Amount is---->"+sBENEFIT_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Benefit Amount -> "+sBenefitAmt+" Actual value of Benefit Amount is---->"+sBENEFIT_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBO_STATUS_CD.trim().equalsIgnoreCase(sBoStatusCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BO Status CD -> "+sBoStatusCd+" Actual value of BO Status CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BO Status CD -> "+sBoStatusCd+" Actual value of BO Status CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBUS_OBJ_CD.trim().equalsIgnoreCase(sBusObjCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Business Object CD -> "+sBusObjCd+" Actual value of Business Object CD is---->"+sBUS_OBJ_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Business Object CD -> "+sBusObjCd+" Actual value of Business Object CD is---->"+sBUS_OBJ_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBENEFIT_SUB_TYPE_FLG.trim().equalsIgnoreCase(sBenefitSubTypeFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Benefit Sub Type Flag -> "+sBenefitSubTypeFlg+" Actual value of Benefit Sub Type Flag is---->"+sBENEFIT_SUB_TYPE_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Benefit Sub Type Flag -> "+sBenefitSubTypeFlg+" Actual value of Benefit Sub Type Flag is---->"+sBENEFIT_SUB_TYPE_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
										
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyMedicareBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyMedicareBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyMedicareBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyMedicareBillableChargesTimelineDetailsFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyMedicareBillableChargesTimelineDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyMedicareBillableChargesTimelineDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sCalcAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, P.START_DT, P.END_DT, P.CALC_AMT FROM CI_BILL_CHG B, CI_PRCE_CALC P WHERE B.BILLABLE_CHG_ID = P.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY P.START_DT,P.CALC_AMT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("CALC_AMT"+sCALC_AMT);
						
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCalcAmt = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date  -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sCALC_AMT.trim().equalsIgnoreCase(sCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
										
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyMedicareBillableChargesTimelineDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerify910BillingBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerify910BillingBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerify910BillingBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sSvcQty = CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerify910BillingBillableChargesTimelineDetailsFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerify910BillingBillableChargesTimelineDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerify910BillingBillableChargesTimelineDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sCalcAmt,sDisAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, P.START_DT, P.END_DT, P.CALC_AMT, P.DIS_AMT FROM CI_BILL_CHG B, CI_PRCE_CALC P WHERE B.BILLABLE_CHG_ID = P.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY P.START_DT,P.CALC_AMT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						String sDIS_AMT=(String)temp.get("DIS_AMT");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("CALC_AMT"+sCALC_AMT);
						System.out.println("DIS_AMT"+sDIS_AMT);
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCalcAmt = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sDisAmt = CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date  -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sCALC_AMT.trim().equalsIgnoreCase(sCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Calc Amount -> "+sCalcAmt+" Actual value of Calc Amount is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Calc Amount -> "+sCalcAmt+" Actual value of Calc Amount is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sDIS_AMT.trim().equalsIgnoreCase(sDisAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Dis Amount -> "+sDisAmt+" Actual value of Dis Amount is---->"+sDIS_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Dis Amount -> "+sDisAmt+" Actual value of Dis Amount is---->"+sDIS_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
										
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTotalGeneratedChrages
	'Function Description : To verify Bill Amount on the accounts after running billing batches 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyTotalGeneratedCharges(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTotalGeneratedCharges");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sPersonName, sBillAmt, sQuery;
					
					sPersonName		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					
					
					sQuery = "SELECT SUM(CALC_AMT) FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))))";
					System.out.println("sQuery = "+sQuery);
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL"))
						{
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Person Name "+sPersonName);
					
						if (sBillAmt.trim().contains(sbillAmount.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "No Bill found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTotalGeneratedChargesForIndividualMembership
	'Function Description : To verify Bill Amount on the accounts after running billing batches 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyTotalGeneratedChargesForIndividualMembership(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTotalGeneratedChargesForIndividualMembership");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sPersonName, sBillAmt,sBillDt, sQuery;
					
					sPersonName		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					sBillDt	=	(String)CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook);
					
					
					sQuery = "SELECT SUM(CALC_AMT) FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE BILL_DT = TO_DATE('"+sBillDt+"','MM-DD-YYYY') AND ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE  PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))))";
					System.out.println("sQuery = "+sQuery);
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL"))
						{
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Person Name "+sPersonName);
					
						if (sBillAmt.trim().contains(sbillAmount.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "No Bill found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	/*'###########################################################################################################################
	'Function Name        : FnVerifyDoNotExtractSwitchinDB
	'Function Description : To verify NO_BATCH_PRT_SW value in CI_BILL_ROUTING Table 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyDoNotExtractSwitchinDB(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyDoNotExtractSwitchinDB");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sBillId, sBillRouteTypeCd, sExpsDoNotExtractSw, sQuery;
					
					sBillId					=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillRouteTypeCd		=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					sExpsDoNotExtractSw		=	(String)CF.FnGetCellValue(sStartingRow,3, sSheetName, sWorkbook);
					
					sQuery = "SELECT NO_BATCH_PRT_SW FROM CI_BILL_ROUTING WHERE BILL_RTE_TYPE_CD = '"+sBillRouteTypeCd+"' AND BILL_ID  = '"+sBillId+"'";
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sDoNotExtractSw=(String)temp.get("NO_BATCH_PRT_SW");
						System.out.println("Actual DO NOT EXTRACT SW "+sDoNotExtractSw);
						if(sDoNotExtractSw.equalsIgnoreCase("NULL"))
						{
							sDoNotExtractSw = sDoNotExtractSw.replace("NULL","N").trim();
						}
						System.out.println("Actual DO NOT EXTRACT SW ---------------" +sDoNotExtractSw);
						
						System.out.println("Expected DO NOT EXTRACT SW "+sDoNotExtractSw);
						System.out.println("Bill Id "+sBillId);
					
						if (sExpsDoNotExtractSw.trim().equalsIgnoreCase(sDoNotExtractSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Do Not Extract Switch is : "+sExpsDoNotExtractSw+" Actual Do Not Extract Switch is---->"+sDoNotExtractSw);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Do Not Extract Switch is : "+sExpsDoNotExtractSw+" Actual Do Not Extract Switch is---->"+sDoNotExtractSw);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "No Do Not Extract Switch  found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnSetContractTypeRateScheduleInDB 
	'Function Description : Change Contract Type Rate schedule set as default Option Values in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnSetContractTypeRateScheduleInDB(int iStartingRow, int iEndingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				for (int i=iStartingRow; i<=iEndingRow; i++)
				{
					//Initailizing Variables 
					String sContractType		=   CF.FnGetCellValue(i ,1, sSheetName, sWorkbook).toString().trim(); 
					String sDivision			=   CF.FnGetCellValue(i ,2, sSheetName, sWorkbook).toString().trim(); 
					String sRSCd				=   CF.FnGetCellValue(i ,3, sSheetName, sWorkbook).toString().trim(); 
					String sDfltSw				=   CF.FnGetCellValue(i ,4, sSheetName, sWorkbook).toString().trim(); 
				
					FnUpdateValueInDb("UPDATE CI_SA_TYPE_RS SET DFLT_SW = '"+sDfltSw+"' WHERE SA_TYPE_CD = '"+sContractType+"' AND CIS_DIVISION ='"+sDivision+"' AND RS_CD = '"+sRSCd+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

					String sGetText   = (String) FnGetDBColumnValue("SELECT DFLT_SW FROM CI_SA_TYPE_RS WHERE SA_TYPE_CD = '"+sContractType+"' AND CIS_DIVISION ='"+sDivision+"'AND RS_CD = '"+sRSCd+"'","DFLT_SW", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("date format ->"+sGetText); 

					if(sGetText.equalsIgnoreCase(sDfltSw))
					{
						CF.FnTestCaseStatusReport("Pass", "Use Rate as Default is updated successfull" +sGetText);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail", "Use Rate as Default is updated successfull" +sGetText);
					}
				}
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnSetFieldMapValueForGoeRateFiledMapInDB 
	'Function Description : Change Geo Rate Field Map set as Y or N for UPDT Field Name Flag
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnSetFieldMapValueForGoeRateFiledMapInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				
				//Initailizing Variables 
				String sFieldMapCd, sFieldNameFlg, sFieldMapVal;
				
				sFieldMapCd			=   CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim(); 
				sFieldNameFlg		=   CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim(); 
				sFieldMapVal		=   CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim(); 
				
				FnUpdateValueInDb("UPDATE C1_FIELD_MAP_DTL SET FIELD_MAP_VALUE = '"+sFieldMapVal+"' WHERE FIELD_NAME_FLG = '"+sFieldNameFlg+"' AND FIELD_MAP_CD = '"+sFieldMapCd+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				String sGetText   = (String) FnGetDBColumnValue("SELECT FIELD_MAP_VALUE FROM C1_FIELD_MAP_DTL WHERE FIELD_NAME_FLG = '"+sFieldNameFlg+"' AND FIELD_MAP_CD = '"+sFieldMapCd+"'","FIELD_MAP_VALUE", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("date format ->"+sGetText); 

				if(sGetText.equalsIgnoreCase(sFieldMapVal))
				{
					CF.FnTestCaseStatusReport("Pass", "FIELD_MAP_VALUE =" +sGetText+" is upadated in C1_FIELD_MAP_DTL Table");
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail", "FIELD_MAP_VALUE =" +sGetText+" is not updated in C1_FIELD_MAP_DTL Table");
				}
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnUpdateRateScheduleOnContractInDB 
	'Function Description : Update Rate schedule Values for a contract in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnUpdateRateScheduleOnContractInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				//Initailizing Variables 
				String sPersonName		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sRSCd			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
				
				FnUpdateValueInDb("UPDATE CI_SA_RS_HIST SET RS_CD = '"+sRSCd+"' WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"'))))","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				String [] sRsCdArr =  (String[]) FnGetDBColumnValueInArray("SELECT RS_CD FROM CI_SA_RS_HIST WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"'))))","RS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			int sRsCdlen = sRsCdArr.length;
    			for(int k=0;k<sRsCdlen;k++)
    			{					
    				if(sRSCd.equalsIgnoreCase(sRsCdArr[k]))
    				{
    					CF.FnTestCaseStatusReport("Pass", "Use Rate Schedule Updated to " +sRsCdArr[k]+ "for the contract of person "+sPersonName );
    				}
    				else 
    				{
    					CF.FnTestCaseStatusReport("Fail", "Use Rate Schedule Updated to " +sRsCdArr[k]+ "for the contract of person "+sPersonName);
    				}
                }

					
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnUpdateRateScheduleOnDentalContractInDB 
	'Function Description : Update Rate schedule Values for a contract in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnUpdateRateScheduleOnDentalContractInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				//Initailizing Variables 
				String sPersonName		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sRSCd			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
				
				FnUpdateValueInDb("UPDATE CI_SA_RS_HIST SET RS_CD = '"+sRSCd+"' WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE SA_TYPE_CD = 'DENTAL' AND ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"'))))","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

				String [] sRsCdArr =  (String[]) FnGetDBColumnValueInArray("SELECT RS_CD FROM CI_SA_RS_HIST WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE SA_TYPE_CD = 'DENTAL' AND ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"'))))","RS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			int sRsCdlen = sRsCdArr.length;
    			for(int k=0;k<sRsCdlen;k++)
    			{					
    				if(sRSCd.equalsIgnoreCase(sRsCdArr[k]))
    				{
    					CF.FnTestCaseStatusReport("Pass", "Use Rate Schedule Updated to " +sRsCdArr[k]+ "for the contract of person "+sPersonName );
    				}
    				else 
    				{
    					CF.FnTestCaseStatusReport("Fail", "Use Rate Schedule Updated to " +sRsCdArr[k]+ "for the contract of person "+sPersonName);
    				}
                }

					
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	/*'###########################################################################################################################
	'Function Name        : FnBillAmountVerification
	'Function Description : To verify Bill Amount on the accounts after running billing batches 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnBillAmountVerification(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnBillAmountVerification");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sBillId, sBillAmt, sQuery;
					
					sBillId		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					
					
					sQuery = "select sum(calc_amt) from ci_bseg_calc where bseg_id in (select bseg_id from ci_bseg where bill_id = "+sBillId+")";
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL"))
						{
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Bill ID "+sBillId);
					
						if (sbillAmount.trim().equalsIgnoreCase(sBillAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount for Bill Id -> " + sBillId + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount for Bill Id -> " + sBillId + " is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> No Bill found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	

	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentEventStatusFromDB
	'Function Description : Verify payment event status
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentEventStatusFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
    {
		System.out.println(">>>>>>>>>>--FnVerifyPaymentEventStatusFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify payment event status";

				String sPaymentEventID,sExpPaystatus,sPaystatus;

				sPaymentEventID	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sExpPaystatus	= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();

				sPaystatus = (String)  FnGetDBColumnValue("SELECT PAY_STATUS_FLG FROM CI_PAY WHERE PAY_EVENT_ID = '"+sPaymentEventID+"'","PAY_STATUS_FLG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sPaystatus ---------------" +sPaystatus);
				
				if(sExpPaystatus.equalsIgnoreCase("Frozen"))
					sExpPaystatus = "50";
				
				if (sPaystatus.equalsIgnoreCase(sExpPaystatus))
				{
					CF.FnTestCaseStatusReport("Pass","Payment Event status matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Payment Event status not matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}

			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentEventStatusFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentEventSegmentFromDB
	'Function Description : Verify payment event Segment
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentEventSegmentFromDB(int iStartingRow,String sSheetName, String sWorkbook) throws Exception
    {
		System.out.println(">>>>>>>>>>--FnVerifyPaymentEventSegmentFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				BaseTest.sTestDescription ="Verify payment event Segment";

				String sPaymentEventID,sExpPaystatus,sPaystatus,sMatchValue;

				sPaymentEventID	= CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				sMatchValue		= CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				sExpPaystatus	= CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();

				sPaystatus = (String)  FnGetDBColumnValue("SELECT PAY_STATUS_FLG FROM CI_PAY WHERE PAY_EVENT_ID = '"+sPaymentEventID+"' and MATCH_VAL='"+sMatchValue+"'","PAY_STATUS_FLG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sPaystatus ---------------" +sPaystatus);
				
				if(sExpPaystatus.equalsIgnoreCase("Frozen"))
					sExpPaystatus = "50";
				if(sExpPaystatus.equalsIgnoreCase("Canceled"))
					sExpPaystatus = "60";
				
				if (sPaystatus.equalsIgnoreCase(sExpPaystatus))
				{
					CF.FnTestCaseStatusReport("Pass","Payment Event status matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Payment Event status not matched. Expected Value: "+sExpPaystatus+" And Actual Value: "+sPaystatus);
				}

			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentEventSegmentFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnChangeAlgoInstallationOption
	'Function Description : Changing the algorithm in installation options framework 
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnChangeAlgoInstallationOption(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnChangeAlgoInstallationOption");
		String sAlgorithm, sEntityFlag,sAlgCD,sInstallOptId,sSeqNo,sVersion,sExpEntityFlag;
		
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sAlgorithm		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sExpEntityFlag 	= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkBook).toString().trim();
				sInstallOptId  	= 	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkBook).toString().trim();
				sSeqNo  		= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkBook).toString().trim();
				sVersion  		= 	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkBook).toString().trim();
				
				sEntityFlag   = 	(String) FnGetDBColumnValue("select INS_ALG_ENTITY_FLG from ci_install_alg where INS_ALG_ENTITY_FLG='"+sExpEntityFlag+"'","INS_ALG_ENTITY_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("sEntityFlag========="+sEntityFlag);
				if (sExpEntityFlag.equalsIgnoreCase(sEntityFlag))
				{
				sAlgCD   = 	(String) FnGetDBColumnValue("select ALG_CD from ci_install_alg where INS_ALG_ENTITY_FLG='"+sExpEntityFlag+"'","ALG_CD" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("sAlgCD========="+sAlgCD);
				if (!sAlgorithm.equalsIgnoreCase(sAlgCD))
				{
					System.out.println(">------------Updated Algo------------<");
					FnSetValueInDb("update ci_install_alg set ALG_CD='"+sAlgorithm+"' where INS_ALG_ENTITY_FLG='"+sEntityFlag+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
				else
				{
					System.out.println("No need to change the Algo. Expected value '"+sAlgorithm+"' and actual value '"+sAlgCD+"'");
				}
				
				}
				else
				{
					System.out.println(">------------Inserted Algo------------<");
					FnSetValueInDb("INSERT INTO ci_install_alg (INSTALL_OPT_ID,INS_ALG_ENTITY_FLG,SEQ_NUM,ALG_CD,VERSION) VALUES('"+sInstallOptId+"','"+sExpEntityFlag+"','"+sSeqNo+"','"+sAlgorithm+"','"+sVersion+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnChangeAlgoInstallationOption");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnDeleteAlgoFromDivision
	'Function Description : Deleting algorithm from Division page
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnDeleteAlgoFromDivision(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnDeleteAlgoFromDivision");
		String sDivision, sExpEntityFlag,sEntityFlag;
		
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sDivision		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sExpEntityFlag  = 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkBook).toString().trim();
				
				sEntityFlag   = 	(String) FnGetDBColumnValue("select DIV_ALG_ENTITY_FLG from ci_cis_div_alg where CIS_DIVISION='"+sDivision+"' and div_alg_entity_flg='"+sExpEntityFlag+"'","DIV_ALG_ENTITY_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("sEntityFlag========="+sEntityFlag);
				if (sExpEntityFlag.equalsIgnoreCase(sEntityFlag))
				{
					System.out.println(">------------Algo found------------<");
					FnSetValueInDb("delete from ci_cis_div_alg where div_alg_entity_flg ='"+sExpEntityFlag+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
				else
				{
					System.out.println("No need to change the Algo. Expected value '"+sExpEntityFlag+"' and actual value '"+sEntityFlag+"'");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnDeleteAlgoFromDivision");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyFTDetailsForTrialBill
	'Function Description : Verification of Trial Bill FT Details
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyFTDetailsForTrialBill(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyFTDetailsForTrialBill");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sContractID,sExpFTCount,sRowCount,sFtId,sExpDstId,sExpFTAmount,sDstID,sFTAmt;
				int iExpFTCount,iRowCount,iCounter;
				
					BaseTest.sTestDescription ="Verification of Regular Bill FT details";
					//Get FT_ID from each contracts
					sContractID				=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
					sExpFTCount =   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
					iExpFTCount  =   Integer.parseInt(sExpFTCount);

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TRL_FT WHERE SA_ID = '"+sContractID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpFTCount)
					{
						String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT FT_ID FROM CI_TRL_FT WHERE SA_ID = '"+sContractID+"' ORDER BY FT_ID","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sFTIDlen = sFTIDArr.length;
						for(int k=0;k<sFTIDlen;k++,iCounter++)
						{					
							sFtId = sFTIDArr[k];
							CF.FnWriteCellValue((iStartingRow+iCounter),3, sFtId, sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass","FT's Count matched on contract "+sContractID);
						}

						//Verify Distribution Code
						sExpDstId			=	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
						String [] sDstIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT DST_ID FROM CI_TRL_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_TRL_FT WHERE SA_ID = '"+sContractID+"') ORDER BY DST_ID","DST_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected DST ID ----"+sExpDstId);
						sDstID = (String) Arrays.toString(sDstIDArr);
						System.out.println("Actual DST ID ----"+sDstID);

						if (sDstID.contains(sExpDstId))
						{
							CF.FnTestCaseStatusReport("Pass","DST_ID ="+sDstID.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","DST_ID ="+sDstID.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
						}

						//Verify FT amount
						sExpFTAmount		=	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkbook).toString().trim();
						String [] sFTAmtArr =  (String[]) FnGetDBColumnValueInArray("SELECT AMOUNT FROM CI_TRL_FT_GL WHERE FT_ID IN(SELECT FT_ID FROM CI_TRL_FT WHERE SA_ID = '"+sContractID+"') ORDER BY AMOUNT","AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						System.out.println("Expected FT Amount ---- "+sExpFTAmount);
						sFTAmt = (String) Arrays.toString(sFTAmtArr);
						System.out.println("Actual FT Amount ---- "+sFTAmt);

						if (sFTAmt.contains(sExpFTAmount))
						{
							CF.FnTestCaseStatusReport("Pass","FT_AMT ="+sFTAmt.replace(",", "")+" matched on contract "+sContractID+" for Regular Bill");
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","FT_AMT ="+sFTAmt.replace(",", "")+" NOT matched on contract "+sContractID+" for Regular Bill");
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","FT's Count NOT matched on contract "+sContractID);
					}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyFTDetailsForTrialBill");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerify_CI_FTTEMP_Table
	'Function Description : Verification CI_FTTEMP Table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerify_CI_FTTEMP_Table(int iStartingRow,String sSheetName, String sWorkbook ,String sBillType) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerify_CI_FTTEMP_Table");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sExpFTCount,sRowCount,sFtId,sDivision,sTrialBillId,sExpFtId,sCISDivision,sExpCISDivision,sTrialBillSW,sExpTrialBillSW,sSAId;
				int iExpFTCount,iRowCount,iCounter;

				BaseTest.sTestDescription ="Verification of CI_FTTEMP Table";
				//Get FT_ID from each contracts
				sExpFTCount =   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				iExpFTCount =   Integer.parseInt(sExpFTCount);
				sDivision 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				if(sBillType.equalsIgnoreCase("Trial"))
				{
					sTrialBillId 	=   (String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("select  COUNT(*) from CI_FTTEMP where  FT_ID in (select FT_ID from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpFTCount)
					{
						String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("select FT_ID from CI_FTTEMP where  FT_ID in (select FT_ID from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"')order by  FT_ID asc","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sFTIDlen = sFTIDArr.length;
						for(int k=0;k<sFTIDlen;k++,iCounter++)
						{					
							sFtId = sFTIDArr[k];
							sExpFtId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpFtId);
							System.out.println("Actual FT ID ----"+sFtId);

							if (sFtId.equalsIgnoreCase(sExpFtId))
							{
								CF.FnTestCaseStatusReport("Pass","Actual FT ID ='"+sFtId+"' matched with Expected FT ID "+sExpFtId);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual FT ID ='"+sFtId+"' not matched with Expected FT ID "+sExpFtId);
							}
						}

						String [] sDivisionArr =  (String[]) FnGetDBColumnValueInArray("select CIS_DIVISION from CI_FTTEMP where  FT_ID in (select FT_ID from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"')order by  FT_ID asc","CIS_DIVISION",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sDivisionlen = sDivisionArr.length;
						for(int k=0;k<sDivisionlen;k++,iCounter++)
						{					
							sCISDivision = sDivisionArr[k];
							sExpCISDivision =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpCISDivision);
							System.out.println("Actual FT ID ----"+sCISDivision);

							if (sCISDivision.equalsIgnoreCase(sExpCISDivision))
							{
								CF.FnTestCaseStatusReport("Pass","Actual CIS_DIVISION ='"+sCISDivision+"' matched with Expected CIS_DIVISION "+sExpCISDivision);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual CIS_DIVISION ='"+sCISDivision+"' not matched with Expected CIS_DIVISION "+sExpCISDivision);
							}
						}

						String [] sTrialBillSWArr =  (String[]) FnGetDBColumnValueInArray("select TRIAL_BILL_SW from CI_FTTEMP where  FT_ID in (select FT_ID from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"')order by  FT_ID asc","TRIAL_BILL_SW",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sTrialBillSWlen = sTrialBillSWArr.length;
						for(int k=0;k<sTrialBillSWlen;k++,iCounter++)
						{					
							sTrialBillSW = sTrialBillSWArr[k];
							sExpTrialBillSW =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpTrialBillSW);
							System.out.println("Actual FT ID ----"+sTrialBillSW);

							if (sTrialBillSW.equalsIgnoreCase(sExpTrialBillSW))
							{
								CF.FnTestCaseStatusReport("Pass","Actual TRIAL_BILL_SW ='"+sTrialBillSW+"' matched with Expected TRIAL_BILL_SW "+sExpTrialBillSW);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual TRIAL_BILL_SW ='"+sTrialBillSW+"' not matched with Expected TRIAL_BILL_SW "+sExpTrialBillSW);
							}
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","FT's Count NOT matched");
					}
				}

				if(sBillType.equalsIgnoreCase("Regular"))
				{

					sSAId 	=   (String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();

					//Get FT_ID on contract from CI_FT Table
					sRowCount            =      (String) FnGetDBColumnValue("select COUNT(*) from CI_FTTEMP where  FT_ID in (select FT_ID from CI_FT where CIS_DIVISION = '"+sDivision+"' and SA_ID = '"+sSAId+"')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					iRowCount            =      Integer.parseInt(sRowCount);
					System.out.println("iCount============================"+iRowCount);

					if (iRowCount==iExpFTCount)
					{
						String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("select FT_ID from CI_FTTEMP where  FT_ID in (select FT_ID from CI_FT where CIS_DIVISION = '"+sDivision+"' and SA_ID = '"+sSAId+"')order by  FT_ID asc","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sFTIDlen = sFTIDArr.length;
						for(int k=0;k<sFTIDlen;k++,iCounter++)
						{					
							sFtId = sFTIDArr[k];
							sExpFtId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpFtId);
							System.out.println("Actual FT ID ----"+sFtId);

							if (sFtId.equalsIgnoreCase(sExpFtId))
							{
								CF.FnTestCaseStatusReport("Pass","Actual FT ID ='"+sFtId+"' matched with Expected FT ID "+sExpFtId);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual FT ID ='"+sFtId+"' not matched with Expected FT ID "+sExpFtId);
							}
						}

						String [] sDivisionArr =  (String[]) FnGetDBColumnValueInArray("select CIS_DIVISION from CI_FTTEMP where  FT_ID in (select FT_ID from CI_FT where CIS_DIVISION = '"+sDivision+"' and SA_ID = '"+sSAId+"')order by  FT_ID asc","CIS_DIVISION",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sDivisionlen = sDivisionArr.length;
						for(int k=0;k<sDivisionlen;k++,iCounter++)
						{					
							sCISDivision = sDivisionArr[k];
							sExpCISDivision =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpCISDivision);
							System.out.println("Actual FT ID ----"+sCISDivision);

							if (sCISDivision.equalsIgnoreCase(sExpCISDivision))
							{
								CF.FnTestCaseStatusReport("Pass","Actual CIS_DIVISION ='"+sCISDivision+"' matched with Expected CIS_DIVISION "+sExpCISDivision);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual CIS_DIVISION ='"+sCISDivision+"' not matched with Expected CIS_DIVISION "+sExpCISDivision);
							}
						}

						String [] sTrialBillSWArr =  (String[]) FnGetDBColumnValueInArray("select TRIAL_BILL_SW from CI_FTTEMP where  FT_ID in (select FT_ID from CI_FT where CIS_DIVISION = '"+sDivision+"' and SA_ID = '"+sSAId+"')order by  FT_ID asc","TRIAL_BILL_SW",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						iCounter = 0;
						int sTrialBillSWlen = sTrialBillSWArr.length;
						for(int k=0;k<sTrialBillSWlen;k++,iCounter++)
						{					
							sTrialBillSW = sTrialBillSWArr[k];
							sExpTrialBillSW =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
							System.out.println("Expected FT ID ----"+sExpTrialBillSW);
							System.out.println("Actual FT ID ----"+sTrialBillSW);

							if (sTrialBillSW.equalsIgnoreCase(sExpTrialBillSW))
							{
								CF.FnTestCaseStatusReport("Pass","Actual TRIAL_BILL_SW ='"+sTrialBillSW+"' matched with Expected TRIAL_BILL_SW "+sExpTrialBillSW);
							}
							else 
							{
								CF.FnTestCaseStatusReport("Fail","Actual TRIAL_BILL_SW ='"+sTrialBillSW+"' not matched with Expected TRIAL_BILL_SW "+sExpTrialBillSW);
							}
						}
					}		
					else 
					{
						CF.FnTestCaseStatusReport("Fail","FT's Count NOT matched");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerify_CI_FTTEMP_Table");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerify_CI_TRL_FT_GL_Table
	'Function Description : Verification CI_TRL_FT_GL Table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerify_CI_TRL_FT_GL_Table(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerify_CI_TRL_FT_GL_Table");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFtId,sDstIds,sExpDstId,sValidateSW,sExpValidateSW,sGLAVALDT,sExpGLAVALDT,sAmount,sExpAmount,sGLAccount,sExpGLAccount;
				int iCounter;

				BaseTest.sTestDescription ="Verification of CI_TRL_FT_GL Table";
				//Get FT_ID from each contracts
				sFtId 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();

				String [] sDstIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT DST_ID FROM CI_TRL_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","DST_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sDstIDlen = sDstIDArr.length;
				for(int k=0;k<sDstIDlen;k++,iCounter++)
				{					
					sDstIds = sDstIDArr[k];
					sExpDstId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpDstId);
					System.out.println("Actual value ----"+sDstIds);

					if (sDstIds.trim().equalsIgnoreCase(sExpDstId))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sDstIds+"' matched with Expected value "+sExpDstId);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sDstIds+"' not matched with Expected value "+sExpDstId);
					}
				}
				
				String [] sValidateSWArr =  (String[]) FnGetDBColumnValueInArray("SELECT VALIDATE_SW FROM CI_TRL_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","VALIDATE_SW",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sValidateSWlen = sValidateSWArr.length;
				for(int k=0;k<sValidateSWlen;k++,iCounter++)
				{					
					sValidateSW = sValidateSWArr[k];
					sExpValidateSW =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpValidateSW);
					System.out.println("Actual value ----"+sValidateSW);

					if (sExpValidateSW.trim().equalsIgnoreCase(sValidateSW))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sValidateSW+"' matched with Expected value "+sExpValidateSW);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sValidateSW+"' not matched with Expected value "+sExpValidateSW);
					}
				}
				
				String [] sGLAVALDTArr =  (String[]) FnGetDBColumnValueInArray("SELECT GLA_VAL_DT FROM CI_TRL_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","GLA_VAL_DT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLAVALDTlen = sGLAVALDTArr.length;
				for(int k=0;k<sGLAVALDTlen;k++,iCounter++)
				{					
					sGLAVALDT = sGLAVALDTArr[k];
					sGLAVALDT=sGLAVALDT.substring(0, 10);
					sExpGLAVALDT =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpGLAVALDT);
					System.out.println("Actual value ----"+sGLAVALDT);

					if (sExpGLAVALDT.trim().equalsIgnoreCase(sGLAVALDT))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLAVALDT+"' matched with Expected value "+sExpGLAVALDT);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLAVALDT+"' not matched with Expected value "+sExpGLAVALDT);
					}
				}
				
				String [] sAmountArr =  (String[]) FnGetDBColumnValueInArray("SELECT AMOUNT FROM CI_TRL_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sAmountlen = sAmountArr.length;
				for(int k=0;k<sAmountlen;k++,iCounter++)
				{					
					sAmount = sAmountArr[k];
					sExpAmount =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpAmount);
					System.out.println("Actual value ----"+sAmount);

					if (sExpAmount.trim().equalsIgnoreCase(sAmount))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sAmount+"' matched with Expected value "+sExpAmount);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sAmount+"' not matched with Expected value "+sExpAmount);
					}
				}
				
				String [] sGLAccountArr =  (String[]) FnGetDBColumnValueInArray("SELECT GL_ACCT FROM CI_TRL_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","GL_ACCT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLAccountlen = sGLAccountArr.length;
				for(int k=0;k<sGLAccountlen;k++,iCounter++)
				{					
					sGLAccount = sGLAccountArr[k];
					sExpGLAccount =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpGLAccount);
					System.out.println("Actual value ----"+sGLAccount);

					if (sExpGLAccount.trim().equalsIgnoreCase(sGLAccount))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLAccount+"' matched with Expected value "+sExpGLAccount);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLAccount+"' not matched with Expected value "+sExpGLAccount);
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerify_CI_TRL_FT_GL_Table");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerify_CI_TRL_FT_Table
	'Function Description : Verification CI_TRL_FT Table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerify_CI_TRL_FT_Table(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerify_CI_TRL_FT_Table");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFtId,sDivision,sTrialBillId,sExpFtId,sGLDistStatus,sExpGLDistStatus,sSchDistDT,sExpSchDistDT,sTotAmt,sExpTotAmt;
				int iCounter;

				BaseTest.sTestDescription ="Verification of CI_TRL_FT Table";
				//Get FT_ID from each contracts
				sDivision 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sTrialBillId 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("select FT_ID from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"'order by  TOT_AMT","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sFTIDlen = sFTIDArr.length;
				for(int k=0;k<sFTIDlen;k++,iCounter++)
				{					
					sFtId = sFTIDArr[k];
					sExpFtId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected FT ID ----"+sExpFtId);
					System.out.println("Actual FT ID ----"+sFtId);

					if (sFtId.equalsIgnoreCase(sExpFtId))
					{
						CF.FnTestCaseStatusReport("Pass","Actual FT ID ='"+sFtId+"' matched with Expected FT ID "+sExpFtId);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual FT ID ='"+sFtId+"' not matched with Expected FT ID "+sExpFtId);
					}
				}
				
				String [] sGLDistStatusArr =  (String[]) FnGetDBColumnValueInArray("select GL_DISTRIB_STATUS from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"'order by  TOT_AMT","GL_DISTRIB_STATUS",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLDistStatuslen = sGLDistStatusArr.length;
				for(int k=0;k<sGLDistStatuslen;k++,iCounter++)
				{					
					sGLDistStatus = sGLDistStatusArr[k];
					sExpGLDistStatus =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpGLDistStatus);
					System.out.println("Actual value ----"+sGLDistStatus);

					if (sGLDistStatus.equalsIgnoreCase(sExpGLDistStatus))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLDistStatus+"' matched with Expected value "+sExpGLDistStatus);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLDistStatus+"' not matched with Expected value "+sExpGLDistStatus);
					}
				}
				
				String [] sSchDistDTArr =  (String[]) FnGetDBColumnValueInArray("select SCHED_DISTRIB_DT from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"'order by  TOT_AMT","SCHED_DISTRIB_DT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sSchDistDTlen = sSchDistDTArr.length;
				for(int k=0;k<sSchDistDTlen;k++,iCounter++)
				{					
					sSchDistDT = sSchDistDTArr[k];
					sSchDistDT=sSchDistDT.substring(0, 10);
					sExpSchDistDT =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpSchDistDT);
					System.out.println("Actual value ----"+sSchDistDT);

					if (sSchDistDT.trim().equalsIgnoreCase(sExpSchDistDT))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sSchDistDT+"' matched with Expected value "+sExpSchDistDT);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sSchDistDT+"' not matched with Expected value "+sExpSchDistDT);
					}
				}
				
				String [] sTotAmtArr =  (String[]) FnGetDBColumnValueInArray("select TOT_AMT from CI_TRL_FT where CIS_DIVISION = '"+sDivision+"' and BILL_ID = '"+sTrialBillId+"'order by  TOT_AMT","TOT_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sTotAmtlen = sTotAmtArr.length;
				for(int k=0;k<sTotAmtlen;k++,iCounter++)
				{					
					sTotAmt = sTotAmtArr[k];
					sExpTotAmt =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpTotAmt);
					System.out.println("Actual value ----"+sTotAmt);

					if (sTotAmt.equalsIgnoreCase(sExpTotAmt))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sTotAmt+"' matched with Expected value "+sExpTotAmt);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sTotAmt+"' not matched with Expected value "+sExpTotAmt);
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerify_CI_TRL_FT_Table");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerify_CI_FT_GL_Table
	'Function Description : Verification CI_FT_GL Table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerify_CI_FT_GL_Table(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerify_CI_FT_GL_Table");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFtId,sDstIds,sExpDstId,sValidateSW,sExpValidateSW,sGLAVALDT,sExpGLAVALDT,sAmount,sExpAmount,sGLAccount,sExpGLAccount;
				int iCounter;

				BaseTest.sTestDescription ="Verification of CI_FT_GL Table";
				//Get FT_ID from each contracts
				sFtId 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();

				String [] sDstIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT DST_ID FROM CI_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","DST_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sDstIDlen = sDstIDArr.length;
				for(int k=0;k<sDstIDlen;k++,iCounter++)
				{					
					sDstIds = sDstIDArr[k];
					sExpDstId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
					if (sDstIds.equalsIgnoreCase(" "))
						sDstIds ="NoValue";
					
					System.out.println("Expected value ----"+sExpDstId);
					System.out.println("Actual value ----"+sDstIds);

					if (sDstIds.trim().equalsIgnoreCase(sExpDstId))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sDstIds+"' matched with Expected value "+sExpDstId);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sDstIds+"' not matched with Expected value "+sExpDstId);
					}
				}
				
				String [] sValidateSWArr =  (String[]) FnGetDBColumnValueInArray("SELECT VALIDATE_SW FROM CI_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","VALIDATE_SW",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sValidateSWlen = sValidateSWArr.length;
				for(int k=0;k<sValidateSWlen;k++,iCounter++)
				{					
					sValidateSW = sValidateSWArr[k];
					sExpValidateSW =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					if (sValidateSW.equalsIgnoreCase(" "))
						sValidateSW ="NoValue";
						
					System.out.println("Expected value ----"+sExpValidateSW);
					System.out.println("Actual value ----"+sValidateSW);

					if (sExpValidateSW.trim().equalsIgnoreCase(sValidateSW))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sValidateSW+"' matched with Expected value "+sExpValidateSW);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sValidateSW+"' not matched with Expected value "+sExpValidateSW);
					}
				}
				
				String [] sGLAVALDTArr =  (String[]) FnGetDBColumnValueInArray("SELECT GLA_VAL_DT FROM CI_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","GLA_VAL_DT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLAVALDTlen = sGLAVALDTArr.length;
				for(int k=0;k<sGLAVALDTlen;k++,iCounter++)
				{					
					sGLAVALDT = sGLAVALDTArr[k];
					
					if (sGLAVALDT==null||sGLAVALDT.equalsIgnoreCase(" "))
					{
						sGLAVALDT ="NoValue";
					}
					
					else
					{
						sGLAVALDT=sGLAVALDT.substring(0, 10);
					}
					
					sExpGLAVALDT =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					
					System.out.println("Expected value ----"+sExpGLAVALDT);
					System.out.println("Actual value ----"+sGLAVALDT);

					if (sExpGLAVALDT.trim().equalsIgnoreCase(sGLAVALDT))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLAVALDT+"' matched with Expected value "+sExpGLAVALDT);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLAVALDT+"' not matched with Expected value "+sExpGLAVALDT);
					}
				}
				
				String [] sAmountArr =  (String[]) FnGetDBColumnValueInArray("SELECT AMOUNT FROM CI_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","AMOUNT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sAmountlen = sAmountArr.length;
				for(int k=0;k<sAmountlen;k++,iCounter++)
				{					
					sAmount = sAmountArr[k];
					sExpAmount =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
					if (sAmount.equalsIgnoreCase(" "))
						sAmount ="NoValue";
					
					System.out.println("Expected value ----"+sExpAmount);
					System.out.println("Actual value ----"+sAmount);

					if (sExpAmount.trim().equalsIgnoreCase(sAmount))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sAmount+"' matched with Expected value "+sExpAmount);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sAmount+"' not matched with Expected value "+sExpAmount);
					}
				}
				
				String [] sGLAccountArr =  (String[]) FnGetDBColumnValueInArray("SELECT GL_ACCT FROM CI_FT_GL WHERE FT_ID = '"+sFtId+"'ORDER BY AMOUNT","GL_ACCT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLAccountlen = sGLAccountArr.length;
				for(int k=0;k<sGLAccountlen;k++,iCounter++)
				{					
					sGLAccount = sGLAccountArr[k];
					sExpGLAccount =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
					if (sGLAccount.equalsIgnoreCase(" "))
						sGLAccount ="NoValue";
					
					System.out.println("Expected value ----"+sExpGLAccount);
					System.out.println("Actual value ----"+sGLAccount);

					if (sExpGLAccount.trim().equalsIgnoreCase(sGLAccount))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLAccount+"' matched with Expected value "+sExpGLAccount);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLAccount+"' not matched with Expected value "+sExpGLAccount);
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerify_CI_FT_GL_Table");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerify_CI_FT_Table
	'Function Description : Verification CI_FT Table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerify_CI_FT_Table(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerify_CI_FT_Table");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFtId,sDivision,sSAID,sExpFtId,sGLDistStatus,sExpGLDistStatus,sSchDistDT,sExpSchDistDT,sTotAmt,sExpTotAmt;
				int iCounter;

				BaseTest.sTestDescription ="Verification of CI_FT Table";
				//Get FT_ID from each contracts
				sDivision 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sSAID 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				String [] sFTIDArr =  (String[]) FnGetDBColumnValueInArray("select FT_ID from CI_FT where CIS_DIVISION = '"+sDivision+"' and sa_id = '"+sSAID+"'  and GL_DISTRIB_STATUS ='D' order by TOT_AMT","FT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sFTIDlen = sFTIDArr.length;
				for(int k=0;k<sFTIDlen;k++,iCounter++)
				{					
					sFtId = sFTIDArr[k];
					sExpFtId =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected FT ID ----"+sExpFtId);
					System.out.println("Actual FT ID ----"+sFtId);

					if (sFtId.equalsIgnoreCase(sExpFtId))
					{
						CF.FnTestCaseStatusReport("Pass","Actual FT ID ='"+sFtId+"' matched with Expected FT ID "+sExpFtId);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual FT ID ='"+sFtId+"' not matched with Expected FT ID "+sExpFtId);
					}
				}
				
				String [] sGLDistStatusArr =  (String[]) FnGetDBColumnValueInArray("select GL_DISTRIB_STATUS from CI_FT where CIS_DIVISION = '"+sDivision+"' and sa_id = '"+sSAID+"' and GL_DISTRIB_STATUS ='D' order by  TOT_AMT","GL_DISTRIB_STATUS",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sGLDistStatuslen = sGLDistStatusArr.length;
				for(int k=0;k<sGLDistStatuslen;k++,iCounter++)
				{					
					sGLDistStatus = sGLDistStatusArr[k];
					sExpGLDistStatus =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpGLDistStatus);
					System.out.println("Actual value ----"+sGLDistStatus);

					if (sGLDistStatus.equalsIgnoreCase(sExpGLDistStatus))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sGLDistStatus+"' matched with Expected value "+sExpGLDistStatus);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sGLDistStatus+"' not matched with Expected value "+sExpGLDistStatus);
					}
				}
				
				String [] sSchDistDTArr =  (String[]) FnGetDBColumnValueInArray("select SCHED_DISTRIB_DT from CI_FT where CIS_DIVISION = '"+sDivision+"' and sa_id = '"+sSAID+"' and GL_DISTRIB_STATUS ='D'order by  TOT_AMT","SCHED_DISTRIB_DT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sSchDistDTlen = sSchDistDTArr.length;
				for(int k=0;k<sSchDistDTlen;k++,iCounter++)
				{					
					sSchDistDT = sSchDistDTArr[k];
					sSchDistDT=sSchDistDT.substring(0, 10);
					sExpSchDistDT =   (String)CF.FnGetCellValue(iStartingRow+iCounter,5,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpSchDistDT);
					System.out.println("Actual value ----"+sSchDistDT);
					if(!sExpSchDistDT.equalsIgnoreCase("NoValue"))
					{
						if (sSchDistDT.trim().equalsIgnoreCase(sExpSchDistDT))
						{
							CF.FnTestCaseStatusReport("Pass","Actual value ='"+sSchDistDT+"' matched with Expected value "+sExpSchDistDT);
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail","Actual value ='"+sSchDistDT+"' not matched with Expected value "+sExpSchDistDT);
						}
					}
				}
				
				String [] sTotAmtArr =  (String[]) FnGetDBColumnValueInArray("select TOT_AMT from CI_FT where CIS_DIVISION = '"+sDivision+"' and sa_id = '"+sSAID+"' and GL_DISTRIB_STATUS ='D'order by  TOT_AMT","TOT_AMT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sTotAmtlen = sTotAmtArr.length;
				for(int k=0;k<sTotAmtlen;k++,iCounter++)
				{					
					sTotAmt = sTotAmtArr[k];
					sExpTotAmt =   (String)CF.FnGetCellValue(iStartingRow+iCounter,6,sSheetName, sWorkbook).toString().trim();
					System.out.println("Expected value ----"+sExpTotAmt);
					System.out.println("Actual value ----"+sTotAmt);

					if (sTotAmt.equalsIgnoreCase(sExpTotAmt))
					{
						CF.FnTestCaseStatusReport("Pass","Actual value ='"+sTotAmt+"' matched with Expected value "+sExpTotAmt);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Actual value ='"+sTotAmt+"' not matched with Expected value "+sExpTotAmt);
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerify_CI_FT_Table");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnDeleteAlgoFromInstallationOption
	'Function Description : Deleting algorithm from Installation Option page
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnDeleteAlgoFromInstallationOption(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnDeleteAlgoFromInstallationOption");
		String sExpEntityFlag,sEntityFlag;
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sExpEntityFlag  = 	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				
				sEntityFlag   = 	(String) FnGetDBColumnValue("select INS_ALG_ENTITY_FLG from ci_install_alg where INS_ALG_ENTITY_FLG='"+sExpEntityFlag+"'","INS_ALG_ENTITY_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("sEntityFlag========="+sEntityFlag);
				if (sExpEntityFlag.equalsIgnoreCase(sEntityFlag))
				{
					System.out.println(">------------Algo found------------<");
					FnSetValueInDb("delete from ci_install_alg where INS_ALG_ENTITY_FLG ='"+sExpEntityFlag+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
				else
				{
					System.out.println("No need to change the Algo. Expected value '"+sExpEntityFlag+"' and actual value '"+sEntityFlag+"'");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnDeleteAlgoFromInstallationOption");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*#########################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnInsertAlgoInDivision
	'Function Description : Inserting algorithm in Division page
	'Input Parameters     : iStartingRow   	-> Starting Row
	'Created By			  :	Shweta Sakharkar
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnInsertAlgoInDivision(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnInsertAlgoInDivision");
		String sDivision,sExpEntityFlag,sEntityFlag,sAlgo,sExpAlgo,sSeqNo,sVersion;
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				sDivision		=	(String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkBook).toString().trim();
				sSeqNo		  	= 	(String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkBook).toString().trim();
				sExpAlgo	  	= 	(String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkBook).toString().trim();
				sVersion	  	= 	(String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkBook).toString().trim();
				sExpEntityFlag  = 	(String)CF.FnGetCellValue(iStartingRow,5,sSheetName, sWorkBook).toString().trim();
				
				sEntityFlag   = 	(String) FnGetDBColumnValue("select div_alg_entity_flg from ci_cis_div_alg where CIS_DIVISION='"+sDivision+"' and div_alg_entity_flg='"+sExpEntityFlag+"'","div_alg_entity_flg" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("sEntityFlag========="+sEntityFlag);
				if (sExpEntityFlag.equalsIgnoreCase(sEntityFlag))
				{
					sAlgo   = 	(String) FnGetDBColumnValue("select ALG_CD from ci_cis_div_alg where CIS_DIVISION='"+sDivision+"' and div_alg_entity_flg='"+sExpEntityFlag+"'","ALG_CD" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					
					if (sExpAlgo.equalsIgnoreCase(sAlgo))
					{
						System.out.println(">------------Algo found------------<");
						System.out.println("No need to insert the Algo. Expected value '"+sExpAlgo+"' and actual value '"+sAlgo+"'");
					}
					else
					{
						System.out.println(">------------Updated Algo------------<");
						FnSetValueInDb("update ci_cis_div_alg set ALG_CD='"+sExpAlgo+"' CIS_DIVISION='"+sDivision+"' and div_alg_entity_flg='"+sExpEntityFlag+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						Thread.sleep(2000);
						FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						Thread.sleep(2000);
					}
				}
				else
				{
					System.out.println(">------------Inserted Algo------------<");
					FnSetValueInDb("INSERT INTO ci_cis_div_alg (CIS_DIVISION,SEQ_NUM,ALG_CD,VERSION,DIV_ALG_ENTITY_FLG) VALUES('"+sDivision+"','"+sSeqNo+"','"+sExpAlgo+"','"+sVersion+"','"+sExpEntityFlag+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnInsertAlgoInDivision");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyPaymentAgreement
	'Function Description : Verification of Payment Agreement details
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyPaymentAgreement(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyPaymentAgreement");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountID,sStatus,sExpStatus,sPaymentAgreementID;
				int iCounter;
				
				BaseTest.sTestDescription ="Verification of Payment Agreement details";
				
				sAccountID 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
	
				String []sStatusArr   = 	(String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM C1_PA_REQ where PAYOR_ACCT_ID ='"+sAccountID+"'ORDER BY BO_STATUS_CD","BO_STATUS_CD" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sStatuslen = sStatusArr.length;
				for(int k=0;k<sStatuslen;k++,iCounter++)
				{					
					sStatus = sStatusArr[k];
					sExpStatus 	=   (String)CF.FnGetCellValue((iStartingRow+iCounter),3,sSheetName, sWorkbook).toString().trim();
					if(sExpStatus.equalsIgnoreCase("Broken Promise"))
						sExpStatus = "BP";
					if(sStatus.trim().equalsIgnoreCase(sExpStatus))
					{
						CF.FnTestCaseStatusReport("Pass","PaymentAgreement created and status matched : Expected: "+sExpStatus+" Actual: "+sStatus);
						
						sPaymentAgreementID   = 	(String) FnGetDBColumnValue("SELECT PA_REQ_ID FROM C1_PA_REQ where PAYOR_ACCT_ID ='"+sAccountID+"' and BO_STATUS_CD='"+sStatus+"'","PA_REQ_ID" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
						CF.FnWriteCellValue((iStartingRow+iCounter),4, sPaymentAgreementID, sSheetName, sWorkbook);
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail","PaymentAgreement created and status not matched : Expected: "+sExpStatus+" Actual: "+sStatus);
					}	
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentAgreement");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyOverdueProcess
	'Function Description : Verification of Overdue Process
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Sumit Saraf
	'#########################################################################################################*/
	public void FnVerifyOverdueProcess(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyOverdueProcess");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountID,sExpCount,sCount,sStatus,sExpStatus;
				int iCounter;
				
				BaseTest.sTestDescription ="Verification of Overdue Process";
				
				sAccountID 	=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sExpCount 	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				sCount   = 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_OD_PROC WHERE ACCT_ID='"+sAccountID+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("sCount========="+sCount);

				if(sCount.equalsIgnoreCase(sExpCount))
				{
					CF.FnTestCaseStatusReport("Pass"," Overdue process created for the bill.");
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail"," Overdue process does not created for the bill.");
				}

				String []sStatusArr   = (String[]) FnGetDBColumnValueInArray("SELECT OD_STATUS_FLG FROM CI_OD_PROC where ACCT_ID ='"+sAccountID+"'ORDER BY OD_STATUS_FLG","OD_STATUS_FLG" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sStatuslen = sStatusArr.length;
				for(int k=0;k<sStatuslen;k++,iCounter++)
				{					
					sStatus = sStatusArr[k];
					sExpStatus 	=   (String)CF.FnGetCellValue((iStartingRow+iCounter),3,sSheetName, sWorkbook).toString().trim();
					if(sExpStatus.equalsIgnoreCase("Inactive"))
						sExpStatus = "20";
					
					if(sExpStatus.equalsIgnoreCase("Active"))
						sExpStatus = "10";
					System.out.println("sStatus========="+sStatus);
					System.out.println("sExpStatus========="+sExpStatus);
					if(sExpStatus.equalsIgnoreCase(sStatus.trim()))
					{
						CF.FnTestCaseStatusReport("Pass","Overdue process status matched");
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail","Overdue process status not matched");
					}
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOverdueProcess");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
			
		}
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnAddFeatureConfigOptionsInDB 
	'Function Description : Add Feature Configuration Option Values in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be add 
							sValue -> Value to be added 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnAddFeatureConfigOptionsInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				
				//Initializing Variables 
				String sFeatureConfig		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sOptionType			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
				String sSeqNo				=   CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				String sVersion				=   CF.FnGetCellValue(iStartingRow ,4, sSheetName, sWorkbook).toString().trim();
				String sValue				=   CF.FnGetCellValue(iStartingRow ,5, sSheetName, sWorkbook).toString().trim(); 
				 
				if(sOptionType.equalsIgnoreCase("System Override Date"))
					sOptionType = "F1SD";
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT WFM_NAME FROM CI_WFM_OPT WHERE WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sOptionType+"'","WFM_NAME", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sFeatureConfig))
				{
					System.out.println("No need to add the feature configuration");
				}
				else
				{
					FnSetValueInDb("INSERT INTO CI_WFM_OPT (WFM_NAME,SEQ_NUM,VERSION,WFM_OPT_VAL,EXT_OPT_TYPE) VALUES('"+sFeatureConfig+"','"+sSeqNo+"','"+sVersion+"','"+sValue+"','"+sOptionType+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					FnSetValueInDb("Commit",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

					sGetText   = (String) FnGetDBColumnValue("SELECT WFM_OPT_VAL FROM CI_WFM_OPT WHERE WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sOptionType+"'","WFM_OPT_VAL", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("date format ->"+sGetText); 

					if(sGetText.equalsIgnoreCase(sValue))
					{
						CF.FnTestCaseStatusReport("Pass", "Freature config option for "+sFeatureConfig+" added successfully" +sGetText);
					} 
					else 
					{
						CF.FnTestCaseStatusReport("Fail", "Freature config option for "+sFeatureConfig+" not added successfully" +sGetText);
					}		
				}
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
			
		}	 
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnDeleteFeatureConfigOptionsInDB 
	'Function Description : Delete Feature Configuration Option Values in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be delete 
							sValue -> Value to be deleted 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnDeleteFeatureConfigOptionsInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				
				//Initializing Variables 
				String sFeatureConfig		=   CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim(); 
				String sOptionType			=   CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim(); 
	
				if(sOptionType.equalsIgnoreCase("System Override Date"))
					sOptionType = "F1SD";
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT WFM_NAME FROM CI_WFM_OPT WHERE WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sOptionType+"'","WFM_NAME", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sFeatureConfig))
				{
					System.out.println(">------------FeatureConfig found------------<");
					FnSetValueInDb("delete from CI_WFM_OPT where WFM_NAME = '"+sFeatureConfig+"' AND EXT_OPT_TYPE = '"+sOptionType+"'", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
					FnSetValueInDb("Commit", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					Thread.sleep(2000);
				}
				else
				{
					System.out.println("No need to change the FeatureConfig");
				}
				
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
			
		}	 
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyCobraBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyCobraBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyCobraBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_STAT = '10' AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							CF.FnWriteCellValue(sStartingRow, 1,sBILLABLE_CHG_ID, sSheetName, sWorkbook);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							CF.FnWriteCellValue(sStartingRow, 1,sBILLABLE_CHG_ID, sSheetName, sWorkbook);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyCobraBillableChargesFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyCobraBillableChargesTimelineDetailsFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyCobraBillableChargesTimelineDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyCobraBillableChargesTimelineDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sStartDt,sEndDt,sCalcAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT UNIQUE B.BILLABLE_CHG_ID, P.START_DT, P.END_DT, P.CALC_AMT FROM CI_BILL_CHG B, CI_PRCE_CALC P WHERE B.BILLABLE_CHG_ID = P.BILLABLE_CHG_ID AND B.BILLABLE_CHG_STAT = '10' AND P.BO_STATUS_CD = 'C' AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY P.START_DT,P.END_DT, P.CALC_AMT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("CALC_AMT"+sCALC_AMT);
						
						
						sBillableChgId	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCalcAmt = CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date  -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date -> "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date -> "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sCALC_AMT.trim().equalsIgnoreCase(sCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CALC_AMT -> "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
										
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyCobraBillableChargesTimelineDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}

	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyMembershipLogError
	'Function Description : To verify Membership Log error Message For Geo Rate 
	'Input Parameters     : sHeaderID  		-> Transaction Header Id
	'					  : sTransactionIDs -> comma seperated Expected transaction ids 	
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyMembershipLogError(int sStartRow,int sEndRow,String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyMembershipLogError");
		String sSMembershipID,sSMessageCat,sSMessageNum,sSMessageText;
		String sQuery;
		int j;
		
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					j = sStartingRow;
					System.out.println("sStartingRow"+sStartingRow);
		            System.out.println("sSheetName"+sSheetName);
		            
		            sSMembershipID   =    (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
		           		            
		            sQuery = "SELECT MLOG.MEMBERSHIP_ID, MSG.MESSAGE_CAT_NBR,MSG.MESSAGE_NBR,MSG.MESSAGE_TEXT FROM CI_MSG_L MSG, CI_MEMBERSHIP_LOG MLOG WHERE MSG.MESSAGE_NBR = (SELECT MESSAGE_NBR FROM CI_MEMBERSHIP_LOG WHERE MEMBERSHIP_ID = '"+sSMembershipID+"' AND LOG_ENTRY_TYPE_FLG = 'F1EX') AND MSG.MESSAGE_CAT_NBR = (SELECT MESSAGE_CAT_NBR FROM CI_MEMBERSHIP_LOG WHERE MEMBERSHIP_ID = '"+sSMembershipID+"' AND LOG_ENTRY_TYPE_FLG = 'F1EX') AND MSG.MESSAGE_NBR = MLOG.MESSAGE_NBR";
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
					
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					
						// To Get value of corresponding column
	                    String sMEMBERSHIP_ID 	=	(String)temp.get("MEMBERSHIP_ID");
						String sMessageCat		=	(String)temp.get("MESSAGE_CAT_NBR");
						String sMessageNum		=	(String)temp.get("MESSAGE_NBR");
						String sMessageText		=	(String)temp.get("MESSAGE_TEXT");
																		
						sSMembershipID		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sSMessageCat		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sSMessageNum		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sSMessageText		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						System.out.println("Data from data sheet->"+sSMembershipID+sSMessageCat+sSMessageNum);	
						
						if (sSMembershipID.trim().equalsIgnoreCase(sMEMBERSHIP_ID.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSMembershipID + " Actual value of Transaction ID is---->"+sMEMBERSHIP_ID);
							
							if (sSMessageCat.trim().equalsIgnoreCase(sMessageCat.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Message Category -> Expected->" + sSMessageCat + "  Actual->"+sMessageCat);
							}
							if (sSMessageNum.trim().equalsIgnoreCase(sMessageNum.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Message Number -> Expected->" + sSMessageNum + "  Actual->"+sMessageNum);
							}
							if (sSMessageText.trim().equalsIgnoreCase(sMessageText.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Message Number -> Expected->" + sSMessageText + "  Actual->"+sMessageText);
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail","Row No: "+j+" -> Message Number -> Expected->" + sSMessageText + "  Actual->"+sMessageText);
							}
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Transaction ID is -> " + sSMembershipID + " Actual value of Transaction ID is---->"+sMEMBERSHIP_ID);
						}
					}
					else
						CF.FnTestCaseStatusReport("Fail", "Expected Transaction ID -> Not found");
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'####################################################################################################################### 
	'Function Name        : FnUpdatePlanCharEffDateInDB 
	'Function Description : Update Plan Char Effective Date Values for a Plan ID in database
	'Input Parameters     : sFeatureConfig  -> Searched Feature Config 
							sOptionType	->	Option Type for which the value to be chanaged 
							sValue -> Value to be changed 
	'Output Parameters    : 
	'########################################################################################################################*/ 
	public void FnUpdatePlanCharEffDateInDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception 
	{ 
		try	
		{ 
			if (BaseTest.eFlgFound.equalsIgnoreCase("true")) 
			{ 
				String todayDate = CF.FnGetCurrentDate();
				System.out.println("todays_date= "+todayDate);
				String uptEffDate = CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook);
				System.out.println("uptEffDate == "+uptEffDate);
				String [] sPlanIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT UNIQUE PLAN_ID FROM CI_POLICY_PLAN_CHAR WHERE CHAR_TYPE_CD IN ('C1-AGCAL', 'C1-AGREC', 'MAGEDEP', 'DEPORPRI', 'MNODEP', 'C1-MRDDB','NOOFGIFT', 'NEWBORNA', 'YADULTAG', 'YADLIAPP', 'C1-ADSRC','C1-ADTYP', 'C1-MRDDB', 'C1-MRLST', 'C1-STRST') AND EFFDT = TO_DATE('"+todayDate+"','MM-DD-YYYY') ORDER BY PLAN_ID","PLAN_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int sPlanIDlen = sPlanIDArr.length;
				
    			for(int k=0;k<sPlanIDlen;k++)
    			{
    				CF.FnWriteCellValue(iStartingRow+k, 1, sPlanIDArr[k], sSheetName, sWorkbook);
    				FnUpdateValueInDb("UPDATE CI_POLICY_PLAN_CHAR SET EFFDT = TO_DATE('"+uptEffDate+"','MM-DD-YYYY') WHERE CHAR_TYPE_CD IN ('C1-AGCAL', 'C1-AGREC', 'MAGEDEP', 'DEPORPRI', 'MNODEP', 'C1-MRDDB', 'NOOFGIFT', 'NEWBORNA', 'YADULTAG', 'YADLIAPP', 'C1-ADSRC', 'C1-ADTYP', 'C1-MRDDB', 'C1-MRLST', 'C1-STRST') AND EFFDT = TO_DATE('"+todayDate+"','MM-DD-YYYY') AND PLAN_ID = '"+sPlanIDArr[k]+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			}
			}	 
		} 
		catch (Exception e) 
		{ 
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage());  
			e.printStackTrace(); 
			BaseTest.eFlgFound = "false"; 
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e)); 
		}	 
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipIdFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipIdFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipIdFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName;
						
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				
				String sRowCount            =   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_MEMBERSHIP_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iRowCount            	=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				if (iRowCount==1)
				{
					//Verify entry in table ci_bill table
					String sGetText =  FnGetDBColumnValue("SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"')","MEMBERSHIP_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("MEMBERSHIP_ID ---------------" +sGetText);
					CF.FnWriteCellValue(iStartingRow, 2, sGetText, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Membership Id for " +sPersonName+ " = "+sGetText);
				}
				else 
				{
					String [] sMemberIDArr =  (String[]) FnGetDBColumnValueInArray("SELECT MEMBERSHIP_ID FROM CI_MEMBERSHIP_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"')","MEMBERSHIP_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					int iCounter = 0;
					int sMemberIDlen = sMemberIDArr.length;
					for(int k=0;k<sMemberIDlen;k++,iCounter++)
					{					
						String sMemberId = sMemberIDArr[k];
						CF.FnWriteCellValue(iStartingRow,2+iCounter, sMemberId, sSheetName, sWorkbook);
						CF.FnTestCaseStatusReport("Pass","Membership ID is: "+sMemberId);
					}
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipIdFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBinderDetailsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBinderDetailsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBinderDetailsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sAutoRenewSw,sBinderPayApplSw,sBinderPayGraceDays,sBinderPayThres,sHoldBillingSw;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT AUTO_RENEW_SW, BINDER_PAY_APPL_SW, BINDER_PAY_GRACE_DAYS, BINDER_PAY_THRES, HOLD_BILLING_SW FROM CI_MEMBERSHIP WHERE MEMBERSHIP_ID = '"+sMembershipId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sAUTO_RENEW_SW=(String)temp.get("AUTO_RENEW_SW");
						String sBINDER_PAY_APPL_SW=(String)temp.get("BINDER_PAY_APPL_SW");
						String sBINDER_PAY_GRACE_DAYS=(String)temp.get("BINDER_PAY_GRACE_DAYS");
						String sBINDER_PAY_THRES=(String)temp.get("BINDER_PAY_THRES");
						String sHOLD_BILLING_SW=(String)temp.get("HOLD_BILLING_SW");
						
												
						System.out.println("AUTO_RENEW_SW "+sAUTO_RENEW_SW);
						System.out.println("BINDER_PAY_APPL_SW "+sBINDER_PAY_APPL_SW);
						System.out.println("BINDER_PAY_GRACE_DAYS"+sBINDER_PAY_GRACE_DAYS);
						System.out.println("BINDER_PAY_THRES"+sBINDER_PAY_THRES);
						System.out.println("HOLD_BILLING_SW "+sHOLD_BILLING_SW);
												
						sAutoRenewSw		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sBinderPayApplSw	=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sBinderPayGraceDays	=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBinderPayThres		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sHoldBillingSw		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						
						
						if (sAUTO_RENEW_SW.trim().equalsIgnoreCase(sAutoRenewSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Auto Renew Switch ->"+sAutoRenewSw+" Actual Auto Renew Switch is---->"+sAUTO_RENEW_SW);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Auto Renew Switch ->"+sAutoRenewSw+" Actual Auto Renew Switch is---->"+sAUTO_RENEW_SW);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sBINDER_PAY_APPL_SW.trim().equalsIgnoreCase(sBinderPayApplSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Binder Pay Appl Switch is : "+sBinderPayApplSw+" Actual value of Binder Pay Appl Switch is---->"+sBINDER_PAY_APPL_SW);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Binder Pay Appl Switch is : "+sBinderPayApplSw+" Actual value of Binder Pay Appl Switch is---->"+sBINDER_PAY_APPL_SW);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBINDER_PAY_GRACE_DAYS.trim().equalsIgnoreCase(sBinderPayGraceDays.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Binder Pay Grace Days is : "+sBinderPayGraceDays+" Actual value of Binder Pay Grace Days is---->"+sBINDER_PAY_GRACE_DAYS);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Binder Pay Grace Days is : "+sBinderPayGraceDays+" Actual value of Binder Pay Grace Days is---->"+sBINDER_PAY_GRACE_DAYS);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBINDER_PAY_THRES.trim().equalsIgnoreCase(sBinderPayThres.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Binder Pay Thres is : "+sBinderPayThres+" Actual value of Binder Pay Thres is---->"+sBINDER_PAY_THRES);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Binder Pay Thres is : "+sBinderPayThres+" Actual value of Binder Pay Thres is---->"+sBINDER_PAY_THRES);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sHOLD_BILLING_SW.trim().equalsIgnoreCase(sHoldBillingSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Hold Billing Switch is : "+sHoldBillingSw+" Actual value of Hold Billing Switch is---->"+sHOLD_BILLING_SW);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Hold Billing Switch is : "+sHoldBillingSw+" Actual value of Hold Billing Switch is---->"+sHOLD_BILLING_SW);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBinderDetailsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipLogsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipLogsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipLogsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sSeqNo,sBOStatusCd,sBOStatusReasonCd;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT SEQNO, BO_STATUS_CD, BO_STATUS_REASON_CD FROM CI_MEMBERSHIP_LOG WHERE MEMBERSHIP_ID = '"+sMembershipId+"' ORDER BY SEQNO";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sSEQNO=(String)temp.get("SEQNO");
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
						String sBO_STATUS_REASON_CD=(String)temp.get("BO_STATUS_REASON_CD");
						if (sBO_STATUS_REASON_CD.equalsIgnoreCase("")||sBO_STATUS_REASON_CD.equalsIgnoreCase("NULL"))
						{
							sBO_STATUS_REASON_CD = "NOVAL";
						}
						
												
						System.out.println("AUTO_RENEW_SW "+sSEQNO);
						System.out.println("BINDER_PAY_APPL_SW "+sBO_STATUS_CD);
						System.out.println("BINDER_PAY_GRACE_DAYS"+sBO_STATUS_REASON_CD);
						
												
						sSeqNo				=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sBOStatusCd			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sBOStatusReasonCd	=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						
						
						if (sSEQNO.trim().equalsIgnoreCase(sSeqNo.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Sequence No ->"+sSeqNo+" Actual Sequence No is---->"+sSEQNO);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Sequence No ->"+sSeqNo+" Actual Sequence No is---->"+sSEQNO);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sBO_STATUS_CD.trim().equalsIgnoreCase(sBOStatusCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of BO Status Code is : "+sBOStatusCd+" Actual value of BO Status Code is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BO Status Code is : "+sBOStatusCd+" Actual value of BO Status Code is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBO_STATUS_REASON_CD.trim().equalsIgnoreCase(sBOStatusReasonCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of BO Status Reason Code is : "+sBOStatusReasonCd+" Actual value of BO Status Reason Code is---->"+sBO_STATUS_REASON_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BO Status Reason Code is : "+sBOStatusReasonCd+" Actual value of BO Status Reason Code is---->"+sBO_STATUS_REASON_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
							
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipLogsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipPersonLogsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipPersonLogsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipPersonLogsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sSeqNo,sMembPerStatFlg,sMembPersStatRsnFlg;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT SEQNO, MEMBER_PER_STATUS_FLG, MEMB_PERS_STAT_RSN_FLG FROM CI_MEMBERSHIP_PER_LOG WHERE MEMBERSHIP_ID = '"+sMembershipId+"' ORDER BY SEQNO";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sSEQNO=(String)temp.get("SEQNO");
						String sMEMBER_PER_STATUS_FLG=(String)temp.get("MEMBER_PER_STATUS_FLG");
						String sMEMB_PERS_STAT_RSN_FLG=(String)temp.get("MEMB_PERS_STAT_RSN_FLG");
						
						
												
						System.out.println("AUTO_RENEW_SW "+sSEQNO);
						System.out.println("BINDER_PAY_APPL_SW "+sMEMBER_PER_STATUS_FLG);
						System.out.println("BINDER_PAY_GRACE_DAYS"+sMEMB_PERS_STAT_RSN_FLG);
						
												
						sSeqNo					=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sMembPerStatFlg			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sMembPersStatRsnFlg		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						
						
						if (sSEQNO.trim().equalsIgnoreCase(sSeqNo.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Sequence No ->"+sSeqNo+" Actual Sequence No is---->"+sSEQNO);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Sequence No ->"+sSeqNo+" Actual Sequence No is---->"+sSEQNO);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sMEMBER_PER_STATUS_FLG.trim().equalsIgnoreCase(sMembPerStatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Member Person Status Flag is : "+sMembPerStatFlg+" Actual value of Member Person Status Flag is---->"+sMEMBER_PER_STATUS_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Member Person Status Flag is : "+sMembPerStatFlg+" Actual value of Member Person Status Flag is---->"+sMEMBER_PER_STATUS_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sMEMB_PERS_STAT_RSN_FLG.trim().equalsIgnoreCase(sMembPersStatRsnFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Member Person Status Reason Flag is : "+sMembPersStatRsnFlg+" Actual value of Member Person Status Reason Flag is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Member Person Status Reason Flag is : "+sMembPersStatRsnFlg+" Actual value of Member Person Status Reason Flag is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
							
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipPersonLogsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBinderContractIdFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBinderContractIdFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBinderContractIdFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName;
						
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				
				//Verify entry in table ci_bill table
				String sAccountId =  FnGetDBColumnValue("SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"')","ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("ACCT_ID ---------------" +sAccountId);
				CF.FnWriteCellValue(iStartingRow, 2, sAccountId, sSheetName, sWorkbook);
				CF.FnTestCaseStatusReport("Pass","Account Id for " +sPersonName+ " = "+sAccountId);
				
				//Get the Binder Contract Id
				String sContractId =  FnGetDBColumnValue("SELECT SA_ID FROM CI_SA WHERE SA_TYPE_CD = 'BND1' AND ACCT_ID = '"+sAccountId+"'","SA_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("SA_ID ---------------" +sContractId);
				CF.FnWriteCellValue(iStartingRow, 3, sContractId, sSheetName, sWorkbook);
				CF.FnTestCaseStatusReport("Pass","Binder Contract Id for " +sAccountId+ " = "+sContractId);
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBinderContractIdFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetContractIdFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetContractIdFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetContractIdFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sContractType;
						
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sContractType 	=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim(); 
				//Get the Binder Contract Id
				String sContractId =  FnGetDBColumnValue("SELECT SA_ID FROM CI_SA WHERE SA_TYPE_CD = '"+sContractType+"' AND ACCT_ID IN(SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"'))","SA_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("SA_ID ---------------" +sContractId);
				CF.FnWriteCellValue(iStartingRow, 3, sContractId, sSheetName, sWorkbook);
				CF.FnTestCaseStatusReport("Pass","Contract Id for " +sContractType+ " = "+sContractId);
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetContractIdFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnInsertPaymentCharInDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnInsertPaymentCharInDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnInsertPaymentCharInDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountId,sCharTypeCd,sSeqNo,sAdhocCharVal,sVersion,sSearchCharVal;
						
				sAccountId			=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sCharTypeCd			=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sSeqNo				=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
				sAdhocCharVal		=	 CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
				sVersion			=	 CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
				sSearchCharVal		=	 CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
				
				
				//Verify entry in table ci_bill table
				String sPayId =  FnGetDBColumnValue("SELECT PAY_ID FROM CI_PAY WHERE ACCT_ID = '"+sAccountId+"' AND PAY_STATUS_FLG = '50'","PAY_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("PAY_ID ---------------" +sPayId);
				CF.FnWriteCellValue(iStartingRow, 2, sPayId, sSheetName, sWorkbook);
				CF.FnTestCaseStatusReport("Pass","Pay Id for " +sAccountId+ " = "+sPayId);
				
				//insert Binder Payment Char type in Payment Characteristic
				FnSetValueInDb("INSERT INTO CI_PAY_CHAR (PAY_ID, CHAR_TYPE_CD, SEQ_NUM, CHAR_VAL, ADHOC_CHAR_VAL, VERSION, CHAR_VAL_FK1, CHAR_VAL_FK2, CHAR_VAL_FK3, CHAR_VAL_FK4, CHAR_VAL_FK5, SRCH_CHAR_VAL) VALUES ('"+sPayId+"', '"+sCharTypeCd+"', '"+sSeqNo+"', '                ', '"+sAdhocCharVal+"', '"+sVersion+"', ' ', ' ', ' ', ' ', ' ', '"+sSearchCharVal+"')", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				FnSetValueInDb("COMMIT",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnInsertPaymentCharInDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetAutoRenewSwitchDetailsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetAutoRenewSwitchDetailsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetAutoRenewSwitchDetailsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sAutoRenewSw;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT AUTO_RENEW_SW FROM CI_MEMBERSHIP WHERE MEMBERSHIP_ID = '"+sMembershipId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sAUTO_RENEW_SW=(String)temp.get("AUTO_RENEW_SW");
						
						
												
						System.out.println("AUTO_RENEW_SW "+sAUTO_RENEW_SW);
						
												
						sAutoRenewSw		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						
						
						
						if (sAUTO_RENEW_SW.trim().equalsIgnoreCase(sAutoRenewSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Auto Renew Switch ->"+sAutoRenewSw+" Actual Auto Renew Switch is---->"+sAUTO_RENEW_SW);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Auto Renew Switch ->"+sAutoRenewSw+" Actual Auto Renew Switch is---->"+sAUTO_RENEW_SW);
							sAllTxnStatus = "NOTPROCESS";
						}
						
							
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAutoRenewSwitchDetailsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetAutoRenewalStatusDetailsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetAutoRenewalStatusDetailsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetAutoRenewalStatusDetailsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sMemPrcStatFlg,sMembProcessFlg,sProcessDt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT MEM_PRC_STAT_FLG, MEMB_PROCESS_FLG, PROCESS_DT FROM CI_MEMBERSHIP_PROCESS WHERE MEMBERSHIP_ID = '"+sMembershipId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sMEM_PRC_STAT_FLG=(String)temp.get("MEM_PRC_STAT_FLG");
						String sMEMB_PROCESS_FLG=(String)temp.get("MEMB_PROCESS_FLG");
						String sPROCESS_DT=(String)temp.get("PROCESS_DT");
						
												
						System.out.println("MEM_PRC_STAT_FLG "+sMEM_PRC_STAT_FLG);
						System.out.println("MEMB_PROCESS_FLG "+sMEMB_PROCESS_FLG);
						System.out.println("PROCESS_DT "+sPROCESS_DT);
						
												
						sMemPrcStatFlg		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sMembProcessFlg		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sProcessDt			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						
						
						if (sMEM_PRC_STAT_FLG.trim().equalsIgnoreCase(sMemPrcStatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Member Pricing Status Flag ->"+sMemPrcStatFlg+" Actual Member Pricing Status Flag is---->"+sMEM_PRC_STAT_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Member Pricing Status Flag ->"+sMemPrcStatFlg+" Actual Member Pricing Status Flag is---->"+sMEM_PRC_STAT_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMEMB_PROCESS_FLG.trim().equalsIgnoreCase(sMembProcessFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Member Process Flag ->"+sMembProcessFlg+" Actual Member Process Flag is---->"+sMEMB_PROCESS_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Member Process Flag ->"+sMembProcessFlg+" Actual Member Process Flag is---->"+sMEMB_PROCESS_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPROCESS_DT.trim().equalsIgnoreCase(sProcessDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Processing Date ->"+sProcessDt+" Actual Processing Date is---->"+sPROCESS_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Processing Date ->"+sProcessDt+" Actual Processing Date is---->"+sPROCESS_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAutoRenewalStatusDetailsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipDetailsFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipDetailsFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipDetailsFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sQuery,sEntityName,sStartDt,sEndDt,sMembPerStatusFlg,sMembPersStatFlg;
				String sAllTxnStatus = "NOTPROCESS";
				sPersonName		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT MEMB.START_DT, MEMB.END_DT, PER.ENTITY_NAME, MEMB.MEMBER_PER_STATUS_FLG, MEMB.MEMB_PERS_STAT_RSN_FLG FROM CI_MEMBERSHIP_PER MEMB, CI_PER_NAME PER WHERE MEMB.PER_ID = PER.PER_ID AND PER.PER_ID IN(SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME LIKE '"+sPersonName+"') ORDER BY ENTITY_NAME";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sENTITY_NAME=(String)temp.get("ENTITY_NAME");
						String sMEMBER_PER_STATUS_FLG=(String)temp.get("MEMBER_PER_STATUS_FLG");
						String sMEMB_PERS_STAT_RSN_FLG=(String)temp.get("MEMB_PERS_STAT_RSN_FLG");
						
												
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT "+sEND_DT);
						System.out.println("ENTITY_NAME "+sENTITY_NAME);
						System.out.println("MEMBER_PER_STATUS_FLG "+sMEMBER_PER_STATUS_FLG);
						System.out.println("MEMB_PERS_STAT_RSN_FLG "+sMEMB_PERS_STAT_RSN_FLG);
						
						
												
						sEntityName			=	CF.FnGetCellValue(sStartingRow+i ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow+i ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow+i ,3, sSheetName, sWorkbook).toString().trim();
						sMembPerStatusFlg	=	CF.FnGetCellValue(sStartingRow+i ,4, sSheetName, sWorkbook).toString().trim();
						sMembPersStatFlg	=	CF.FnGetCellValue(sStartingRow+i ,5, sSheetName, sWorkbook).toString().trim();
						
						if (sENTITY_NAME.trim().equalsIgnoreCase(sEntityName.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Entity Name ->"+sEntityName+" Actual Entity Name is---->"+sENTITY_NAME);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Entity Name ->"+sEntityName+" Actual Entity Name is---->"+sENTITY_NAME);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Start Date ->"+sSTART_DT+" Actual Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Start Date ->"+sSTART_DT+" Actual Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected End Date ->"+sEndDt+" Actual End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected End Date ->"+sEndDt+" Actual End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMEMBER_PER_STATUS_FLG.trim().equalsIgnoreCase(sMembPerStatusFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Member Person Status Flag ->"+sMembPerStatusFlg+" Actual Member Person Status Flag is---->"+sMEMBER_PER_STATUS_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Member Person Status Flag ->"+sMembPerStatusFlg+" Actual Member Person Status Flag is---->"+sMEMBER_PER_STATUS_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMEMB_PERS_STAT_RSN_FLG.trim().equalsIgnoreCase(sMembPersStatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Member Persons Stat Flag ->"+sMembPersStatFlg+" Actual Member Persons Stat Flag is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Member Persons Stat Flag ->"+sMembPersStatFlg+" Actual Member Persons Stat Flag is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipDetailsFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetAccrualDetailsFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetAccrualDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		
		System.out.println("--FnGetAccrualDetailsFromDB");
		try
		{
			
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountId,sQuery,sPostMethod,sAccrDt,sAccrualAmt,sPIAccrualAmt,sBillTotalAmt,sBillDesc;
				
				sAccountId		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sPostMethod		=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sAccrDt			=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sBillTotalAmt	=	 CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
				
				sQuery = "SELECT TOT_AMT FROM C1_ACCRUAL WHERE ACCT_ID = '"+sAccountId+"' AND BO_STATUS_CD!='CNCL' AND ACCR_DT = TO_DATE('"+sAccrDt+"','mm-dd-yyyy')";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sTOT_AMT=(String)temp.get("TOT_AMT");
						System.out.println("TOT_AMT "+sTOT_AMT);
						
						sAccrualAmt		=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
						
						if (sTOT_AMT.trim().equalsIgnoreCase(sAccrualAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected ACCRUAL AMOUNT ->"+sAccrualAmt+" Actual ACCRUAL AMOUNT is---->"+sTOT_AMT);
							
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected ACCRUAL AMOUNT ->"+sAccrualAmt+" Actual ACCRUAL AMOUNT is---->"+sTOT_AMT);
							
						}
						sStartingRow = sStartingRow + 1;
					}
				}
				
				
				if(!sPostMethod.equalsIgnoreCase("NoValue"))
				{
					sQuery = "SELECT AMOUNT FROM C1_ACCRUAL_DTLS WHERE ACCR_ID = (SELECT ACCR_ID FROM C1_ACCRUAL WHERE ACCT_ID = '"+sAccountId+"' AND POST_METH = '"+sPostMethod+"' AND BO_STATUS_CD!='CNCL' AND ACCR_DT = TO_DATE('"+sAccrDt+"','mm-dd-yyyy'))";
					AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						int sStartingRow = iStartingRow;
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						int iColCounter = 0;
						for(int i=0;i<AL.size();i++)
						{
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						      
							// To Get value of corresponding column
							String sAMOUNT=(String)temp.get("AMOUNT");
							System.out.println("AMOUNT "+sAMOUNT);
							
							sPIAccrualAmt		=	 CF.FnGetCellValue(iStartingRow,5+iColCounter, sSheetName, sWorkbook).toString().trim();
							System.out.println("iColCounter = "+iColCounter);
							System.out.println("sPIAccrualAmt = "+sPIAccrualAmt);
							if (sAMOUNT.trim().equalsIgnoreCase(sPIAccrualAmt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected ACCRUAL AMOUNT ->"+sPIAccrualAmt+" Actual ACCRUAL AMOUNT is---->"+sAMOUNT);
								
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected ACCRUAL AMOUNT ->"+sPIAccrualAmt+" Actual ACCRUAL AMOUNT is---->"+sAMOUNT);
								
							}
							iColCounter = iColCounter + 1;
							
						}
					}
				}
				
				if(!sBillTotalAmt.equalsIgnoreCase("NoValue"))
				{
					sBillDesc 	=	 CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
					sQuery = "SELECT SUM(TOT_AMT) FROM CI_TRL_FT WHERE BILL_ID IN (SELECT BILL_ID FROM CI_TRL_BILL WHERE ACCT_ID = '"+sAccountId+"' AND BILL_DESCR = '"+sBillDesc+"')";
					AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						int sStartingRow = iStartingRow;
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						for(int i=0;i<AL.size();i++)
						{
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						      
							// To Get value of corresponding column
							String sTOT_AMT=(String)temp.get("SUM(TOT_AMT)");
							System.out.println("SUM(TOT_AMT) "+sTOT_AMT);
							
							if (sTOT_AMT.trim().equalsIgnoreCase(sBillTotalAmt.trim()))
							{
								CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BILL TOTAL AMOUNT ->"+sBillTotalAmt+" Actual ACCRUAL AMOUNT is---->"+sTOT_AMT);
								
							}
							else
							{
								CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BILL TOTAL AMOUNT ->"+sBillTotalAmt+" Actual ACCRUAL AMOUNT is---->"+sTOT_AMT);
								
							}
							iStartingRow = iStartingRow + 1;
							
						}
					}
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAccrualDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnVerifyTotalAmount
	'Function Description : To Get Batch Number From Database
	'Input Parameters     : sAccountID.
	'Output Parameters    : sBatchNo
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyTotalAmount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		BaseTest.eFlgFound = "true";
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				System.out.println("FnGetTotalAmountFromFTTable-->");
				String sBillId, sQuery,sTotalAmt; 
				sBillId 	=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				
				sQuery = "SELECT SUM(TOT_AMT) FROM CI_FT WHERE BILL_ID = '"+sBillId+"'";
				
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sTOT_AMT=(String)temp.get("SUM(TOT_AMT)");
						System.out.println("SUM(TOT_AMT) "+sTOT_AMT);
						
						sTotalAmt		=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
						
						if (sTOT_AMT.trim().equalsIgnoreCase(sTotalAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected TOTAL BILL AMOUNT ->"+sTotalAmt+" Actual TOTAL BILL AMOUNT is---->"+sTOT_AMT);
							
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected TOTAL BILL AMOUNT ->"+sTotalAmt+" Actual TOTAL BILL AMOUNT is---->"+sTOT_AMT);
							
						}
						iStartingRow = iStartingRow + 1;
					}
				}
				
			}
			
		}
		catch (Exception e) {
			System.out.println("Script Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBinderDetailsFromMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBinderDetailsFromMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		
		System.out.println("--FnGetBinderDetailsFromMembership");
		try
		{
			
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sPlanId,sPolicyId,sStartDate,sEndDate,sExtMemberId,sBoStatusCd,sBoStatusReasonCd,sAutoRenewSw,sExchangeFlg,sExchangeId,
				sBinderPayGraceDays,sBinderPayThres,sHoldBillingSw,sBinderLiabilityAmt,sThresholdAmt,sRenewalDt,sContractPeriod,sMembershipCatFlg,sHealthPlanCd,sQuery;
				
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				sPlanId				=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sPolicyId			=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sStartDate			=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sEndDate			=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
				sExtMemberId		=	 CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
				sBoStatusCd			=	 CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
				sBoStatusReasonCd	=	 CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
				sAutoRenewSw		=	 CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
				sExchangeFlg		=	 CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
				sExchangeId			=	 CF.FnGetCellValue(iStartingRow,10, sSheetName, sWorkbook).toString().trim();
				sBinderPayGraceDays	=	 CF.FnGetCellValue(iStartingRow,11, sSheetName, sWorkbook).toString().trim();
				sBinderPayThres		=	 CF.FnGetCellValue(iStartingRow,12, sSheetName, sWorkbook).toString().trim();
				sHoldBillingSw		=	 CF.FnGetCellValue(iStartingRow,13, sSheetName, sWorkbook).toString().trim();
				sBinderLiabilityAmt	=	 CF.FnGetCellValue(iStartingRow,14, sSheetName, sWorkbook).toString().trim();
				sThresholdAmt		=	 CF.FnGetCellValue(iStartingRow,15, sSheetName, sWorkbook).toString().trim();
				sRenewalDt			=	 CF.FnGetCellValue(iStartingRow,16, sSheetName, sWorkbook).toString().trim();
				sContractPeriod		=	 CF.FnGetCellValue(iStartingRow,17, sSheetName, sWorkbook).toString().trim();
				sMembershipCatFlg	=	 CF.FnGetCellValue(iStartingRow,18, sSheetName, sWorkbook).toString().trim();
				sHealthPlanCd		=	 CF.FnGetCellValue(iStartingRow,19, sSheetName, sWorkbook).toString().trim();
				
				sQuery = "SELECT PLAN_ID, POLICY_ID, START_DT, END_DT, EXT_MEMBER_ID, BO_STATUS_CD, BO_STATUS_REASON_CD, AUTO_RENEW_SW, EXCHANGE_FLG, EXCHANGE_ID, BINDER_PAY_GRACE_DAYS, BINDER_PAY_THRES, HOLD_BILLING_SW, BINDER_LIABILITY_AMT, THRESHOLD_AMT, RENEWAL_DT, CONTRACT_PERIOD, MEMBERSHIP_CAT_FLG, HEALTH_PLAN_CD  FROM CI_MEMBERSHIP WHERE MEMBERSHIP_ID = '"+sMembershipId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sPLAN_ID=(String)temp.get("PLAN_ID");
						if (sPLAN_ID.equalsIgnoreCase("               "))
						{
							sPLAN_ID = "NOVAL";
						}
						
						String sPOLICY_ID=(String)temp.get("POLICY_ID");
						if (sPOLICY_ID.equalsIgnoreCase("NULL"))
						{
							sPOLICY_ID = "NOVAL";
						}
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sEXT_MEMBER_ID=(String)temp.get("EXT_MEMBER_ID");
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
						String sBO_STATUS_REASON_CD=(String)temp.get("BO_STATUS_REASON_CD");
						String sAUTO_RENEW_SW=(String)temp.get("AUTO_RENEW_SW");
						String sEXCHANGE_FLG=(String)temp.get("EXCHANGE_FLG");
						String sEXCHANGE_ID=(String)temp.get("EXCHANGE_ID");
						String sBINDER_PAY_GRACE_DAYS=(String)temp.get("BINDER_PAY_GRACE_DAYS");
						String sBINDER_PAY_THRES=(String)temp.get("BINDER_PAY_THRES");
						String sHOLD_BILLING_SW=(String)temp.get("HOLD_BILLING_SW");
						if (sHOLD_BILLING_SW.equalsIgnoreCase(" "))
						{
							sHOLD_BILLING_SW = "NOVAL";
						}
						String sBINDER_LIABILITY_AMT=(String)temp.get("BINDER_LIABILITY_AMT");
						String sTHRESHOLD_AMT=(String)temp.get("THRESHOLD_AMT");
						String sRENEWAL_DT=(String)temp.get("RENEWAL_DT");
						if (sRENEWAL_DT.equalsIgnoreCase("NULL"))
						{
							sRENEWAL_DT = "NOVAL";
						}
						String sCONTRACT_PERIOD=(String)temp.get("CONTRACT_PERIOD");
						String sMEMBERSHIP_CAT_FLG=(String)temp.get("MEMBERSHIP_CAT_FLG");
						String sHEALTH_PLAN_CD=(String)temp.get("HEALTH_PLAN_CD");
						
						
							
						if (sPLAN_ID.trim().equalsIgnoreCase(sPlanId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected PLAN_ID ->"+sPlanId+" Actual PLAN_ID is---->"+sPLAN_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected PLAN_ID ->"+sPlanId+" Actual PLAN_ID is---->"+sPLAN_ID);
						}
						
						if (sPOLICY_ID.trim().equalsIgnoreCase(sPolicyId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected POLICY_ID ->"+sPlanId+" Actual POLICY_ID is---->"+sPOLICY_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected POLICY_ID ->"+sPlanId+" Actual POLICY_ID is---->"+sPOLICY_ID);
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDate.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						
						if (sEND_DT.trim().equalsIgnoreCase(sEndDate.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected END_DT ->"+sEndDate+" Actual START_DT is---->"+sEND_DT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected END_DT ->"+sEndDate+" Actual START_DT is---->"+sEND_DT);
						}
						
						if (sEXT_MEMBER_ID.trim().equalsIgnoreCase(sExtMemberId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected EXT_MEMBER_ID ->"+sEndDate+" Actual EXT_MEMBER_ID is---->"+sEXT_MEMBER_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected EXT_MEMBER_ID ->"+sEndDate+" Actual EXT_MEMBER_ID is---->"+sEXT_MEMBER_ID);
						}
						
						if (sBO_STATUS_CD.trim().equalsIgnoreCase(sBoStatusCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BO_STATUS_CD ->"+sBoStatusCd+" Actual BO_STATUS_CD is---->"+sBO_STATUS_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BO_STATUS_CD ->"+sBoStatusCd+" Actual BO_STATUS_CD is---->"+sBO_STATUS_CD);
						}
						
						if (sBO_STATUS_REASON_CD.trim().equalsIgnoreCase(sBoStatusReasonCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BO_STATUS_REASON_CD ->"+sBoStatusReasonCd+" Actual BO_STATUS_REASON_CD is---->"+sBO_STATUS_REASON_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BO_STATUS_REASON_CD ->"+sBoStatusReasonCd+" Actual BO_STATUS_REASON_CD is---->"+sBO_STATUS_REASON_CD);
						}
						
						if (sAUTO_RENEW_SW.trim().equalsIgnoreCase(sAutoRenewSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected AUTO_RENEW_SW ->"+sAutoRenewSw+" Actual AUTO_RENEW_SW is---->"+sAUTO_RENEW_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected AUTO_RENEW_SW ->"+sAutoRenewSw+" Actual AUTO_RENEW_SW is---->"+sAUTO_RENEW_SW);
						}
						
						if (sEXCHANGE_FLG.trim().equalsIgnoreCase(sExchangeFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected EXCHANGE_FLG ->"+sExchangeFlg+" Actual EXCHANGE_FLG is---->"+sEXCHANGE_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected EXCHANGE_FLG ->"+sExchangeFlg+" Actual EXCHANGE_FLG is---->"+sEXCHANGE_FLG);
						}
						
						if (sEXCHANGE_ID.trim().equalsIgnoreCase(sExchangeId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected EXCHANGE_ID ->"+sExchangeFlg+" Actual EXCHANGE_ID is---->"+sEXCHANGE_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected EXCHANGE_ID ->"+sExchangeFlg+" Actual EXCHANGE_ID is---->"+sEXCHANGE_ID);
						}
						
						if (sBINDER_PAY_GRACE_DAYS.trim().equalsIgnoreCase(sBinderPayGraceDays.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BINDER_PAY_GRACE_DAYS ->"+sBinderPayGraceDays+" Actual BINDER_PAY_GRACE_DAYS is---->"+sBINDER_PAY_GRACE_DAYS);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BINDER_PAY_GRACE_DAYS ->"+sBinderPayGraceDays+" Actual BINDER_PAY_GRACE_DAYS is---->"+sBINDER_PAY_GRACE_DAYS);
						}
						
						if (sBINDER_PAY_THRES.trim().equalsIgnoreCase(sBinderPayThres.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BINDER_PAY_THRES ->"+sBinderPayThres+" Actual BINDER_PAY_THRES is---->"+sBINDER_PAY_THRES);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BINDER_PAY_THRES ->"+sBinderPayThres+" Actual BINDER_PAY_THRES is---->"+sBINDER_PAY_THRES);
						}
						
						if (sHOLD_BILLING_SW.trim().equalsIgnoreCase(sHoldBillingSw.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected HOLD_BILLING_SW ->"+sHoldBillingSw+" Actual HOLD_BILLING_SW is---->"+sHOLD_BILLING_SW);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected HOLD_BILLING_SW ->"+sHoldBillingSw+" Actual HOLD_BILLING_SW is---->"+sHOLD_BILLING_SW);
						}
						
						if (sBINDER_LIABILITY_AMT.trim().equalsIgnoreCase(sBinderLiabilityAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BINDER_LIABILITY_AMT ->"+sBinderLiabilityAmt+" Actual BINDER_LIABILITY_AMT is---->"+sBINDER_LIABILITY_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BINDER_LIABILITY_AMT ->"+sBinderLiabilityAmt+" Actual BINDER_LIABILITY_AMT is---->"+sBINDER_LIABILITY_AMT);
						}
						
						if (sTHRESHOLD_AMT.trim().equalsIgnoreCase(sThresholdAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected THRESHOLD_AMT ->"+sThresholdAmt+" Actual THRESHOLD_AMT is---->"+sTHRESHOLD_AMT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected THRESHOLD_AMT ->"+sThresholdAmt+" Actual THRESHOLD_AMT is---->"+sTHRESHOLD_AMT);
						}
						
						
						if (sRENEWAL_DT.trim().equalsIgnoreCase(sRenewalDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected RENEWAL_DT ->"+sRenewalDt+" Actual RENEWAL_DT is---->"+sRENEWAL_DT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected RENEWAL_DT ->"+sRenewalDt+" Actual RENEWAL_DT is---->"+sRENEWAL_DT);
						}
						
						if (sCONTRACT_PERIOD.trim().equalsIgnoreCase(sContractPeriod.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CONTRACT_PERIOD ->"+sContractPeriod+" Actual CONTRACT_PERIOD is---->"+sCONTRACT_PERIOD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CONTRACT_PERIOD ->"+sContractPeriod+" Actual CONTRACT_PERIOD is---->"+sCONTRACT_PERIOD);
						}
						
						if (sMEMBERSHIP_CAT_FLG.trim().equalsIgnoreCase(sMembershipCatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected MEMBERSHIP_CAT_FLG ->"+sMembershipCatFlg+" Actual MEMBERSHIP_CAT_FLG is---->"+sMEMBERSHIP_CAT_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected MEMBERSHIP_CAT_FLG ->"+sMembershipCatFlg+" Actual MEMBERSHIP_CAT_FLG is---->"+sMEMBERSHIP_CAT_FLG);
						}
						
						if (sHEALTH_PLAN_CD.trim().equalsIgnoreCase(sHealthPlanCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected HEALTH_PLAN_CD ->"+sHealthPlanCd+" Actual HEALTH_PLAN_CD is---->"+sHEALTH_PLAN_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected HEALTH_PLAN_CD ->"+sHealthPlanCd+" Actual HEALTH_PLAN_CD is---->"+sHEALTH_PLAN_CD);
						}
						sStartingRow = sStartingRow + 1;
					}
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBinderDetailsFromMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyContractInformationforBinderPayments
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyContractInformationforBinderPayments(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyContractInformationforBinderPayments");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sStartDate,sContractStatusFlg,sContractTypeCd,sDivision,sQuery;
				
				sPersonName			=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				sStartDate			=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sContractStatusFlg	=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sContractTypeCd		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sDivision			=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
								
				sQuery = "SELECT START_DT, SA_STATUS_FLG, SA_TYPE_CD, CIS_DIVISION FROM CI_SA WHERE ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"'))";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sSTART_DT=(String)temp.get("START_DT");
						String sSA_STATUS_FLG=(String)temp.get("SA_STATUS_FLG");
						String sSA_TYPE_CD=(String)temp.get("SA_TYPE_CD");
						String sCIS_DIVISION=(String)temp.get("CIS_DIVISION");
						
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDate.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						
						if (sSA_STATUS_FLG.trim().equalsIgnoreCase(sContractStatusFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected SA_STATUS_FLG ->"+sContractStatusFlg+" Actual SA_STATUS_FLG is---->"+sSA_STATUS_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected SA_STATUS_FLG ->"+sContractStatusFlg+" Actual SA_STATUS_FLG is---->"+sSA_STATUS_FLG);
						}
						
						if (sSA_TYPE_CD.trim().equalsIgnoreCase(sContractTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected SA_TYPE_CD ->"+sContractTypeCd+" Actual SA_TYPE_CD is---->"+sSA_TYPE_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected SA_TYPE_CD ->"+sContractTypeCd+" Actual SA_TYPE_CD is---->"+sSA_TYPE_CD);
						}
						
						if (sCIS_DIVISION.trim().equalsIgnoreCase(sDivision.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CIS_DIVISION ->"+sDivision+" Actual CIS_DIVISION is---->"+sCIS_DIVISION);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CIS_DIVISION ->"+sDivision+" Actual CIS_DIVISION is---->"+sCIS_DIVISION);
						}
						
						
						sStartingRow = sStartingRow + 1;
					}
				}
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyContractInformationforBinderPayments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnDRRVerifyScheduleStatusBeforeScheduleGeneration
	'Function Description : Verification of ScheduleStatusofDRR
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	AkshataS
	'#########################################################################################################*/
	public void FnDRRVerifyScheduleStatusBeforeScheduleGeneration(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnDRRVerifyScheduleStatusBeforeScheduleGeneration");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sREV_REC_ID,sStatus,sExpStatus;
				int iCounter;
				
				BaseTest.sTestDescription ="Verification of ScheduleStatusOfDRR";
				
				sREV_REC_ID 	= CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();

				String []sStatusArr   = (String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM CI_REV_REC_SCH where REV_REC_ID ='"+sREV_REC_ID+"'ORDER BY BO_STATUS_CD","BO_STATUS_CD" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;
				int sStatuslen = sStatusArr.length;
				for(int k=0;k<sStatuslen;k++,iCounter++)
				{					
					sStatus = sStatusArr[k];
					sExpStatus 	=   (String)CF.FnGetCellValue((iStartingRow+iCounter++),3,sSheetName, sWorkbook).toString().trim();
					if(sExpStatus.equalsIgnoreCase("Draft"))
					
					if(sExpStatus.equalsIgnoreCase("Active"))
					System.out.println("sStatus========="+sStatus);
					System.out.println("sExpStatus========="+sExpStatus);
					if(sExpStatus.equalsIgnoreCase(sStatus.trim()))
					{
						CF.FnTestCaseStatusReport("Pass","ScheduleStatus of DRR matched: Expected: "+sExpStatus+"Actual: "+sStatus);
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail","ScheduleStatus of DRR not matched:"+sExpStatus+"Actual: "+sStatus);
					}
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnDRRVerifyScheduleStatusBeforeScheduleGeneration");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
			
		}
	}
	
	
	/*'###############################################################
	'Function Name        : FnReturnCancelRevRecIdForOriginalFt
	'Function Description : this function return cancelled revenue recognition id for original FT 
	'Input Parameters  
	'                     : sFtId1 		-> Give the value to be search
	'                     
	'Output Parameters    : sREV_REC_ID_Cancel1  as String 
	'################################################################*/	
	public String FnReturnCancelRevRecIdForOriginalFt( String sFtId1 ) throws Exception 
	{
		System.out.println("----->>>>FnReturnCancelRevRecIdForOriginalFt");
		
		String sREV_REC_ID_Cancel1 = null;
		try
		{
			String  siblingId1	=  FnGetDBColumnValue("SELECT SIBLING_ID FROM CI_FT WHERE FT_ID="+sFtId1+" ", "SIBLING_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			System.out.println(">--------------***siblingId1*****************************--------------->"+siblingId1);   
			String  sftIdCancel1 = FnGetDBColumnValue("SELECT FT_ID FROM CI_FT WHERE SIBLING_ID="+siblingId1+" AND FT_TYPE_FLG='BX' ", "FT_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			
			 sREV_REC_ID_Cancel1 = FnGetDBColumnValue("SELECT REV_REC_ID FROM CI_REV_REC_SCH WHERE FT_ID="+sftIdCancel1+" ", "REV_REC_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			 System.out.println(">--------------********************************--------------->"+sREV_REC_ID_Cancel1);
			 return sREV_REC_ID_Cancel1;
		}
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("FnReturnCancelRevRecIdForOriginalFt not working ->"+e.getMessage());
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","DRR Function Exception occured ->\n"+CF.erromsg(e));
		}
		return sREV_REC_ID_Cancel1;	
	}		



	/*'###############################################################
	'Function Name        : FnGetAllREVRECIDusingFTID
	'Function Description : this function return cancelled revenue recognition id for original FT 
	'Input Parameters  
	'                     : sFtId1 		-> Give the value to be search
	'                     
	'Output Parameters    :  
	'################################################################*/	
	public String FnGetAllREVRECIDusingFTID( String sREV_REC_ID ,int iStartingRow,String sSheetName,String sWorkbook) throws Exception 
	{
		System.out.println("----->>>>FnGetAllREVRECIDusingFTID");
		try 
		{
			
			String sFtId1=(String)CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook);
			String sExpREV_REC_Count =   (String)CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
			int iExpFTCount  =   Integer.parseInt(sExpREV_REC_Count);

			//Get FT_ID on contract from CI_FT Table
			String sRowCount            =      (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_REV_REC_SCH WHERE FT_ID = '"+sFtId1+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
			int iRowCount            =      Integer.parseInt(sRowCount);
			System.out.println("iCount============================"+iRowCount);
			if (iRowCount==iExpFTCount)
			{
				
				String [] sREV_REC_ID1Arr =  (String[])FnGetDBColumnValueInArray("SELECT REV_REC_ID FROM CI_REV_REC_SCH WHERE FT_ID="+sFtId1+" ", "REV_REC_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iCounter = 0;
				int sREV_REC_ID1len = sREV_REC_ID1Arr.length;
				for(int k=0;k<sREV_REC_ID1len;k++,iCounter++)
				{					
					sREV_REC_ID = sREV_REC_ID1Arr[k];
					CF.FnWriteCellValue((53+iCounter),1, sREV_REC_ID, sSheetName, sWorkbook);
				}
			}
		}
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("FnGetAllREVRECIDusingFTID not working ->"+e.getMessage());
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","DRR Function Exception occured ->\n"+CF.erromsg(e));
		}
		return sREV_REC_ID;
	}
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnCheckFtDistributionCharValue
	'Function Description : 
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnCheckFtDistributionCharValue(int iStartingRow,int iEndRow, int ftDistIdColumn, String sSheetName,String sWorkbook) throws Exception 
	{
		System.out.println("--------->>>>>>>>FnCheckFtDistributionCharValue");
		try 
		{
			
			if(BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
		
				String ftDistributionId,charVal,sExpectedCharVal;
			
				for(int i=iStartingRow;i<=iEndRow;i++)
				{
					ftDistributionId = CF.FnGetCellValue(i, ftDistIdColumn, sSheetName, sWorkbook).toString().trim();
					sExpectedCharVal=CF.FnGetCellValue(i, ftDistIdColumn-2, sSheetName, sWorkbook).toString().trim();
				
					charVal = (String) FnGetDBColumnValue("select SRCH_CHAR_VAL from C1_FT_DISTRIBUTION_CHAR  where  FT_DISTRIBUTION_ID  ='"+ftDistributionId+"'" ,"SRCH_CHAR_VAL",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					System.out.println("ExpectedCharValue---> "+sExpectedCharVal);
					System.out.println("ActualCharValue---> "+charVal);
					if(sExpectedCharVal.equalsIgnoreCase(charVal))
					{
						CF.FnTestCaseStatusReport("Pass", "Expected Char value "+sExpectedCharVal+" matches actual char value "+charVal);								
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "Expected Char value "+sExpectedCharVal+" does not matches actual char value "+charVal);
					}
				}
			}
		}
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("FnCheckFtDistributionCharValue not working ->"+e.getMessage());
			BaseTest.eFlgFound="false";
			CF.FnTestCaseStatusReport("Fail","Database Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBinderContractInformation
	'Function Description : This function gets the Binder Contract Information from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBinderContractInformation(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBinderContractInformation");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sStartDate,sContractStatusFlg,sContractTypeCd,sDivision,sQuery;
				
				sPersonName			=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				sStartDate			=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sContractStatusFlg	=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				sContractTypeCd		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				sDivision			=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
								
				sQuery = "SELECT START_DT, SA_STATUS_FLG, SA_TYPE_CD, CIS_DIVISION FROM CI_SA WHERE SA_TYPE_CD = '"+sContractTypeCd+"' AND ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"'))";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sSTART_DT=(String)temp.get("START_DT");
						String sSA_STATUS_FLG=(String)temp.get("SA_STATUS_FLG");
						String sSA_TYPE_CD=(String)temp.get("SA_TYPE_CD");
						String sCIS_DIVISION=(String)temp.get("CIS_DIVISION");
						
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDate.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected START_DT ->"+sStartDate+" Actual START_DT is---->"+sSTART_DT);
						}
						
						if (sSA_STATUS_FLG.trim().equalsIgnoreCase(sContractStatusFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected SA_STATUS_FLG ->"+sContractStatusFlg+" Actual SA_STATUS_FLG is---->"+sSA_STATUS_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected SA_STATUS_FLG ->"+sContractStatusFlg+" Actual SA_STATUS_FLG is---->"+sSA_STATUS_FLG);
						}
						
						if (sSA_TYPE_CD.trim().equalsIgnoreCase(sContractTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected SA_TYPE_CD ->"+sContractTypeCd+" Actual SA_TYPE_CD is---->"+sSA_TYPE_CD);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected SA_TYPE_CD ->"+sContractTypeCd+" Actual SA_TYPE_CD is---->"+sSA_TYPE_CD);
						}
						
						if (sCIS_DIVISION.trim().equalsIgnoreCase(sDivision.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected CIS_DIVISION ->"+sDivision+" Actual CIS_DIVISION is---->"+sCIS_DIVISION);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected CIS_DIVISION ->"+sDivision+" Actual CIS_DIVISION is---->"+sCIS_DIVISION);
						}
						
						
						sStartingRow = sStartingRow + 1;
					}
				}
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBinderContractInformation");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBusinessRuleTable
	'Function Description : This function verifies Business Rule from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBusinessRuleTable(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBusinessRuleTable");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sBusRuleEntTypeFlg,sBusRuleId,sBusRuleCatFlg,sBusRuleEntStatFlg,sQuery;
				
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();	
				sQuery = "SELECT BUS_RULE_ENT_TYPE_FLG, BUS_RULE_ID, BUS_RULE_CAT_FLG, BUS_RULE_ENT_STAT_FLG FROM C1_ENT_BUS_RULE WHERE BUS_RULE_ENT_ID='"+sMembershipId+"' AND BUS_RULE_ENT_STAT_FLG = 'ACTV'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sBUS_RULE_ENT_TYPE_FLG=(String)temp.get("BUS_RULE_ENT_TYPE_FLG");
						String sBUS_RULE_ID=(String)temp.get("BUS_RULE_ID");
						sBUS_RULE_ID = "GET"+sBUS_RULE_ID;
						String sBUS_RULE_CAT_FLG=(String)temp.get("BUS_RULE_CAT_FLG");
						String sBUS_RULE_ENT_STAT_FLG=(String)temp.get("BUS_RULE_ENT_STAT_FLG");
						
						
						sBusRuleEntTypeFlg	=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
						sBusRuleId			=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
						sBusRuleCatFlg		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
						sBusRuleEntStatFlg	=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
						
						
						if (sBUS_RULE_ENT_TYPE_FLG.trim().equalsIgnoreCase(sBusRuleEntTypeFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_TYPE_FLG ->"+sBusRuleEntTypeFlg+" Actual BUS_RULE_ENT_TYPE_FLG is---->"+sBUS_RULE_ENT_TYPE_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_TYPE_FLG ->"+sBusRuleEntTypeFlg+" Actual BUS_RULE_ENT_TYPE_FLG is---->"+sBUS_RULE_ENT_TYPE_FLG);
						}
						
						if (sBUS_RULE_ID.trim().substring(0,2).equalsIgnoreCase(sBusRuleId.trim().substring(0,2)))
						{
							CF.FnWriteCellValue(iStartingRow,2, sBUS_RULE_ID,sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ID ->"+sBusRuleId+" Actual BUS_RULE_ID is---->"+sBUS_RULE_ID);
						}
						else
						{
							CF.FnWriteCellValue(iStartingRow,2, sBUS_RULE_ID,sSheetName, sWorkbook);
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ID ->"+sBusRuleId+" Actual BUS_RULE_ID is---->"+sBUS_RULE_ID);
						}
						
						if (sBUS_RULE_CAT_FLG.trim().equalsIgnoreCase(sBusRuleCatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_CAT_FLG ->"+sBusRuleCatFlg+" Actual BUS_RULE_CAT_FLG is---->"+sBUS_RULE_CAT_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_CAT_FLG ->"+sBusRuleCatFlg+" Actual BUS_RULE_CAT_FLG is---->"+sBUS_RULE_CAT_FLG);
						}
						
						if (sBUS_RULE_ENT_STAT_FLG.trim().equalsIgnoreCase(sBusRuleEntStatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_STAT_FLG ->"+sBusRuleEntStatFlg+" Actual BUS_RULE_ENT_STAT_FLG is---->"+sBUS_RULE_ENT_STAT_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_STAT_FLG ->"+sBusRuleEntStatFlg+" Actual BUS_RULE_ENT_STAT_FLG is---->"+sBUS_RULE_ENT_STAT_FLG);
						}
						
						
						iStartingRow = iStartingRow + 1;
					}
				}
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBusinessRuleTable");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBusinessRuleTableForBinderRules
	'Function Description : This function verifies Business Rule from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBusinessRuleTableForBinderRules(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBusinessRuleTableForBinderRules");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sBusRuleEntTypeFlg,sBusRuleId,sBusRuleCatFlg,sBusRuleEntStatFlg,sQuery;
				
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();	
				sQuery = "SELECT BUS_RULE_ENT_TYPE_FLG, BUS_RULE_ID, BUS_RULE_CAT_FLG, BUS_RULE_ENT_STAT_FLG FROM C1_ENT_BUS_RULE WHERE BUS_RULE_ENT_ID='"+sMembershipId+"' AND BUS_RULE_CAT_FLG = 'BRBD' ORDER BY BUS_RULE_ENT_STAT_FLG";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					for(int i=0;i<AL.size();i++)
					{
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
					      
						// To Get value of corresponding column
						String sBUS_RULE_ENT_TYPE_FLG=(String)temp.get("BUS_RULE_ENT_TYPE_FLG");
						String sBUS_RULE_ID=(String)temp.get("BUS_RULE_ID");
						sBUS_RULE_ID = "GET"+sBUS_RULE_ID;
						String sBUS_RULE_CAT_FLG=(String)temp.get("BUS_RULE_CAT_FLG");
						String sBUS_RULE_ENT_STAT_FLG=(String)temp.get("BUS_RULE_ENT_STAT_FLG");
						
						
						sBusRuleEntTypeFlg	=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
						sBusRuleId			=	 CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
						sBusRuleCatFlg		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
						sBusRuleEntStatFlg	=	 CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
						
						
						if (sBUS_RULE_ENT_TYPE_FLG.trim().equalsIgnoreCase(sBusRuleEntTypeFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_TYPE_FLG ->"+sBusRuleEntTypeFlg+" Actual BUS_RULE_ENT_TYPE_FLG is---->"+sBUS_RULE_ENT_TYPE_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_TYPE_FLG ->"+sBusRuleEntTypeFlg+" Actual BUS_RULE_ENT_TYPE_FLG is---->"+sBUS_RULE_ENT_TYPE_FLG);
						}
						
						if (sBUS_RULE_ID.trim().substring(0,2).equalsIgnoreCase(sBusRuleId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ID ->"+sBusRuleId+" Actual BUS_RULE_ID is---->"+sBUS_RULE_ID);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ID ->"+sBusRuleId+" Actual BUS_RULE_ID is---->"+sBUS_RULE_ID);
						}
						
						if (sBUS_RULE_CAT_FLG.trim().equalsIgnoreCase(sBusRuleCatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_CAT_FLG ->"+sBusRuleCatFlg+" Actual BUS_RULE_CAT_FLG is---->"+sBUS_RULE_CAT_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_CAT_FLG ->"+sBusRuleCatFlg+" Actual BUS_RULE_CAT_FLG is---->"+sBUS_RULE_CAT_FLG);
						}
						
						if (sBUS_RULE_ENT_STAT_FLG.trim().equalsIgnoreCase(sBusRuleEntStatFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_STAT_FLG ->"+sBusRuleEntStatFlg+" Actual BUS_RULE_ENT_STAT_FLG is---->"+sBUS_RULE_ENT_STAT_FLG);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" -> Expected BUS_RULE_ENT_STAT_FLG ->"+sBusRuleEntStatFlg+" Actual BUS_RULE_ENT_STAT_FLG is---->"+sBUS_RULE_ENT_STAT_FLG);
						}
						
						
						iStartingRow = iStartingRow + 1;
					}
				}
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBusinessRuleTableForBinderRules");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesFromDBForBinderPayment
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBillableChargesFromDBForBinderPayment(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBillableChargesFromDBForBinderPayment");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sDescOnBill,sRecuringFlg,sBillPeriodCd,sBillableChrgStat,sGrpRefVal,sBillAfterDt;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT BC.BILLABLE_CHG_ID, BC.START_DT, BC.END_DT, BC.DESCR_ON_BILL, BC.RECURRING_FLG, BC.BILL_PERIOD_CD, BC.BILLABLE_CHG_STAT, BC.PRICEITEM_CD, BC.GRP_REF_VAL, BC.BILL_AFTER_DT FROM CI_BILL_CHG BC, CI_BILL_CHG_CHAR BCH, CI_MEMBERSHIP MC  WHERE BC.BILLABLE_CHG_ID = BCH.BILLABLE_CHG_ID AND BCH.CHAR_TYPE_CD    =(SELECT WFM_OPT_VAL  FROM CI_WFM_OPT WHERE WFM_NAME = 'C1-ASOBLLNG' AND EXT_OPT_TYPE = 'CTME' AND rownum=1) AND BCH.SRCH_CHAR_VAL = MC.MEMBERSHIP_ID AND MC.MEMBERSHIP_ID ='"+sMembershipId+"' AND trim(BC.BILLABLE_CHG_STAT) = '10' ORDER BY BC.PRICEITEM_CD, BC.START_DT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sDESCR_ON_BILL=(String)temp.get("DESCR_ON_BILL");
						String sRECURRING_FLG=(String)temp.get("RECURRING_FLG");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sBILLABLE_CHG_STAT=(String)temp.get("BILLABLE_CHG_STAT");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sGRP_REF_VAL=(String)temp.get("GRP_REF_VAL");
						String sBILL_AFTER_DT=(String)temp.get("BILL_AFTER_DT");
						if(sBILL_AFTER_DT == "NULL")
							sBILL_AFTER_DT = "NOVAL";
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("DESCR_ON_BILL"+sDESCR_ON_BILL);
						System.out.println("RECURRING_FLG"+sRECURRING_FLG);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("BILLABLE_CHG_STAT"+sBILLABLE_CHG_STAT);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("GRP_REF_VAL"+sGRP_REF_VAL);
						System.out.println("BILL_AFTER_DT"+sBILL_AFTER_DT);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sDescOnBill			=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sRecuringFlg		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sBillableChrgStat	=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sGrpRefVal			=	CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sBillAfterDt		=	CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sDescOnBill.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of DESCR_ON_BILL is : "+sDescOnBill+" Actual value of DESCR_ON_BILL is---->"+sDESCR_ON_BILL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of DESCR_ON_BILL is : "+sDescOnBill+" Actual value of DESCR_ON_BILL is---->"+sDESCR_ON_BILL);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sRECURRING_FLG.trim().equalsIgnoreCase(sRecuringFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of RECURRING_FLG is : "+sRecuringFlg+" Actual value of RECURRING_FLG is---->"+sRECURRING_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of RECURRING_FLG is : "+sRecuringFlg+" Actual value of RECURRING_FLG is---->"+sRECURRING_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBILLABLE_CHG_STAT.trim().equalsIgnoreCase(sBillableChrgStat.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of BILLABLE_CHG_STAT is : "+sBillableChrgStat+" Actual value of BILLABLE_CHG_STAT is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BILLABLE_CHG_STAT is : "+sBillableChrgStat+" Actual value of BILLABLE_CHG_STAT is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sGRP_REF_VAL.trim().equalsIgnoreCase(sGrpRefVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of GRP_REF_VAL is : "+sGrpRefVal+" Actual value of GRP_REF_VAL is---->"+sGRP_REF_VAL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of GRP_REF_VAL is : "+sGrpRefVal+" Actual value of GRP_REF_VAL is---->"+sGRP_REF_VAL);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBILL_AFTER_DT.trim().equalsIgnoreCase(sBillAfterDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of BILL_AFTER_DT is : "+sBillAfterDt+" Actual value of BILL_AFTER_DT is---->"+sBILL_AFTER_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BILL_AFTER_DT is : "+sBillAfterDt+" Actual value of BILL_AFTER_DT is---->"+sBILL_AFTER_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillableChargesFromDBForBinderPayment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPaymentStagingTableForBinderPayment
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPaymentStagingTableForBinderPayment(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPaymentStagingTableForBinderPayment");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sCustId,sQuery,sExtSourceId,sExtBatchId,sExtRefId,sPayAmt,sMatchVal,sMatchTypeCd;
				String sAllTxnStatus = "NOTPROCESS";
				sCustId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT EXT_SOURCE_ID, EXT_BATCH_ID, EXT_REFERENCE_ID, CUST_ID, PAY_AMT, MATCH_VAL, MATCH_TYPE_CD FROM CI_PAY_ST WHERE CUST_ID = '"+sCustId+"' ORDER BY PAY_AMT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sEXT_SOURCE_ID=(String)temp.get("EXT_SOURCE_ID");
						String sEXT_BATCH_ID=(String)temp.get("EXT_BATCH_ID");
						String sEXT_REFERENCE_ID=(String)temp.get("EXT_REFERENCE_ID");
						String sCUST_ID=(String)temp.get("CUST_ID");
						String sPAY_AMT=(String)temp.get("PAY_AMT");
						String sMATCH_VAL=(String)temp.get("MATCH_VAL");
						String sMATCH_TYPE_CD=(String)temp.get("MATCH_TYPE_CD");
						
						System.out.println("EXT_SOURCE_ID "+sEXT_SOURCE_ID);
						System.out.println("EXT_BATCH_ID"+sEXT_BATCH_ID);
						System.out.println("EXT_REFERENCE_ID"+sEXT_REFERENCE_ID);
						System.out.println("CUST_ID"+sCUST_ID);
						System.out.println("PAY_AMT"+sPAY_AMT);
						System.out.println("MATCH_VAL"+sMATCH_VAL);
						System.out.println("MATCH_TYPE_CD "+sMATCH_TYPE_CD);

						
						sExtSourceId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sExtBatchId			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sExtRefId			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCustId				=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPayAmt				=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sMatchVal			=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sMatchTypeCd		=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						
						
						if (sEXT_SOURCE_ID.trim().equalsIgnoreCase(sExtSourceId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of EXT_SOURCE_ID is : "+sExtSourceId+" Actual value of EXT_SOURCE_ID is---->"+sEXT_SOURCE_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_SOURCE_ID is : "+sExtSourceId+" Actual value of EXT_SOURCE_ID is---->"+sEXT_SOURCE_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEXT_BATCH_ID.trim().equalsIgnoreCase(sExtBatchId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of EXT_BATCH_ID is : "+sExtBatchId+" Actual value of EXT_BATCH_ID is---->"+sEXT_BATCH_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_BATCH_ID is : "+sExtBatchId+" Actual value of EXT_BATCH_ID is---->"+sEXT_BATCH_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEXT_REFERENCE_ID.trim().equalsIgnoreCase(sExtRefId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of EXT_REFERENCE_ID is : "+sExtRefId+" Actual value of EXT_REFERENCE_ID is---->"+sEXT_REFERENCE_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_REFERENCE_ID is : "+sExtRefId+" Actual value of EXT_REFERENCE_ID is---->"+sEXT_REFERENCE_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCUST_ID.trim().equalsIgnoreCase(sCustId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of CUST_ID is : "+sCustId+" Actual value of CUST_ID is---->"+sCUST_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CUST_ID is : "+sCustId+" Actual value of CUST_ID is---->"+sCUST_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPAY_AMT.trim().equalsIgnoreCase(sPayAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PAY_AMT is : "+sPayAmt+" Actual value of PAY_AMT is---->"+sPAY_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PAY_AMT is : "+sPayAmt+" Actual value of PAY_AMT is---->"+sPAY_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMATCH_VAL.trim().equalsIgnoreCase(sMatchVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sMATCH_TYPE_CD.trim().equalsIgnoreCase(sMatchTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentStagingTableForBinderPayment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPaymentStagingCharTableForBinderPayment
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPaymentStagingCharTableForBinderPayment(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPaymentStagingCharTableForBinderPayment");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sCustId,sQuery,sExtSourceId,sExtBatchId,sExtRefId,sMatchVal,sMatchTypeCd,sCharTypeCd,sAdhocCharVal;
				String sAllTxnStatus = "NOTPROCESS";
				sCustId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT EXT_SOURCE_ID, EXT_BATCH_ID, EXT_REFERENCE_ID, CUST_ID, MATCH_VAL, MATCH_TYPE_CD, CHAR_TYPE_CD, ADHOC_CHAR_VAL FROM CI_PAY_ST_CHAR WHERE CUST_ID = '"+sCustId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sEXT_SOURCE_ID=(String)temp.get("EXT_SOURCE_ID");
						String sEXT_BATCH_ID=(String)temp.get("EXT_BATCH_ID");
						String sEXT_REFERENCE_ID=(String)temp.get("EXT_REFERENCE_ID");
						String sCUST_ID=(String)temp.get("CUST_ID");
						String sMATCH_VAL=(String)temp.get("MATCH_VAL");
						String sMATCH_TYPE_CD=(String)temp.get("MATCH_TYPE_CD");
						String sCHAR_TYPE_CD=(String)temp.get("CHAR_TYPE_CD");
						String sADHOC_CHAR_VAL=(String)temp.get("ADHOC_CHAR_VAL");
						
						System.out.println("EXT_SOURCE_ID "+sEXT_SOURCE_ID);
						System.out.println("EXT_BATCH_ID"+sEXT_BATCH_ID);
						System.out.println("EXT_REFERENCE_ID"+sEXT_REFERENCE_ID);
						System.out.println("CUST_ID"+sCUST_ID);
						System.out.println("MATCH_VAL"+sMATCH_VAL);
						System.out.println("MATCH_TYPE_CD "+sMATCH_TYPE_CD);
						System.out.println("CHAR_TYPE_CD"+sCHAR_TYPE_CD);
						System.out.println("ADHOC_CHAR_VAL "+sADHOC_CHAR_VAL);

						
						sExtSourceId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sExtBatchId			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sExtRefId			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCustId				=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sMatchVal			=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sMatchTypeCd		=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sCharTypeCd			=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sAdhocCharVal		=	CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						
						
						if (sEXT_SOURCE_ID.trim().equalsIgnoreCase(sExtSourceId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of EXT_SOURCE_ID is : "+sExtSourceId+" Actual value of EXT_SOURCE_ID is---->"+sEXT_SOURCE_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_SOURCE_ID is : "+sExtSourceId+" Actual value of EXT_SOURCE_ID is---->"+sEXT_SOURCE_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEXT_BATCH_ID.trim().equalsIgnoreCase(sExtBatchId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of EXT_BATCH_ID is : "+sExtBatchId+" Actual value of EXT_BATCH_ID is---->"+sEXT_BATCH_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_BATCH_ID is : "+sExtBatchId+" Actual value of EXT_BATCH_ID is---->"+sEXT_BATCH_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEXT_REFERENCE_ID.trim().equalsIgnoreCase(sExtRefId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of EXT_REFERENCE_ID is : "+sExtRefId+" Actual value of EXT_REFERENCE_ID is---->"+sEXT_REFERENCE_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of EXT_REFERENCE_ID is : "+sExtRefId+" Actual value of EXT_REFERENCE_ID is---->"+sEXT_REFERENCE_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCUST_ID.trim().equalsIgnoreCase(sCustId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of CUST_ID is : "+sCustId+" Actual value of CUST_ID is---->"+sCUST_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CUST_ID is : "+sCustId+" Actual value of CUST_ID is---->"+sCUST_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMATCH_VAL.trim().equalsIgnoreCase(sMatchVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sMATCH_TYPE_CD.trim().equalsIgnoreCase(sMatchTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCHAR_TYPE_CD.trim().equalsIgnoreCase(sCharTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of CHAR_TYPE_CD is : "+sCharTypeCd+" Actual value of CHAR_TYPE_CD is---->"+sCHAR_TYPE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CHAR_TYPE_CD is : "+sCharTypeCd+" Actual value of CHAR_TYPE_CD is---->"+sCHAR_TYPE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sADHOC_CHAR_VAL.trim().equalsIgnoreCase(sAdhocCharVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of ADHOC_CHAR_VAL is : "+sAdhocCharVal+" Actual value of ADHOC_CHAR_VAL is---->"+sADHOC_CHAR_VAL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of ADHOC_CHAR_VAL is : "+sAdhocCharVal+" Actual value of ADHOC_CHAR_VAL is---->"+sADHOC_CHAR_VAL);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentStagingCharTableForBinderPayment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPaymentTableForBinderPayment
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPaymentTableForBinderPayment(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPaymentTableForBinderPayment");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAcctId,sQuery,sPayId,sPayEventId,sCanReasonCd,sCurrencyCd,sMatchVal,sMatchTypeCd,sPayStatusFlg,sPayAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sAcctId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT PAY_ID, PAY_EVENT_ID, CAN_RSN_CD, CURRENCY_CD, ACCT_ID, PAY_STATUS_FLG, PAY_AMT, MATCH_TYPE_CD, MATCH_VAL FROM CI_PAY WHERE ACCT_ID = '"+sAcctId+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sPAY_ID=(String)temp.get("PAY_ID");
						sPAY_ID = "GET"+sPAY_ID;
						String sPAY_EVENT_ID=(String)temp.get("PAY_EVENT_ID");
						sPAY_EVENT_ID = "GET"+sPAY_EVENT_ID;
						String sCAN_RSN_CD=(String)temp.get("CAN_RSN_CD");
						if(sCAN_RSN_CD.equalsIgnoreCase("    "))
							sCAN_RSN_CD = "NOVAL";
						String sCURRENCY_CD=(String)temp.get("CURRENCY_CD");
						String sACCT_ID=(String)temp.get("ACCT_ID");
						String sPAY_STATUS_FLG=(String)temp.get("PAY_STATUS_FLG");
						String sPAY_AMT=(String)temp.get("PAY_AMT");
						String sMATCH_TYPE_CD=(String)temp.get("MATCH_TYPE_CD");
						String sMATCH_VAL=(String)temp.get("MATCH_VAL");
						
						System.out.println("PAY_ID "+sPAY_ID);
						
						System.out.println("PAY_EVENT_ID "+sPAY_EVENT_ID);
						System.out.println("CAN_RSN_CD"+sCAN_RSN_CD);
						System.out.println("CURRENCY_CD"+sCURRENCY_CD);
						System.out.println("ACCT_ID"+sACCT_ID);
						System.out.println("PAY_STATUS_FLG"+sPAY_STATUS_FLG);
						System.out.println("PAY_AMT "+sPAY_AMT);
						System.out.println("MATCH_TYPE_CD"+sMATCH_TYPE_CD);
						System.out.println("MATCH_VAL "+sMATCH_VAL);

						
						sPayId				=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sPayEventId			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sCanReasonCd		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sCurrencyCd			=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sAcctId				=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sPayStatusFlg		=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sPayAmt				=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sMatchTypeCd		=	CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sMatchVal			=	CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						
						
						if (sPAY_ID.trim().substring(0,2).equalsIgnoreCase(sPayId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of PAY_ID is : "+sPayId+" Actual value of PAY_ID is---->"+sPAY_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PAY_ID is : "+sPayId+" Actual value of PAY_ID is---->"+sPAY_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sPAY_EVENT_ID.trim().substring(0,2).equalsIgnoreCase(sPayEventId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PAY_EVENT_ID is : "+sPayEventId+" Actual value of PAY_EVENT_ID is---->"+sPAY_EVENT_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PAY_EVENT_ID is : "+sPayEventId+" Actual value of PAY_EVENT_ID is---->"+sPAY_EVENT_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCAN_RSN_CD.trim().equalsIgnoreCase(sCanReasonCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of CAN_RSN_CD is : "+sCanReasonCd+" Actual value of CAN_RSN_CD is---->"+sCAN_RSN_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CAN_RSN_CD is : "+sCanReasonCd+" Actual value of CAN_RSN_CD is---->"+sCAN_RSN_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sCURRENCY_CD.trim().equalsIgnoreCase(sCurrencyCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of CURRENCY_CD is : "+sCurrencyCd+" Actual value of EXT_REFERENCE_ID is---->"+sCURRENCY_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CURRENCY_CD is : "+sCurrencyCd+" Actual value of EXT_REFERENCE_ID is---->"+sCURRENCY_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sACCT_ID.trim().equalsIgnoreCase(sAcctId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of ACCT_ID is : "+sAcctId+" Actual value of ACCT_ID is---->"+sACCT_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of ACCT_ID is : "+sAcctId+" Actual value of ACCT_ID is---->"+sACCT_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPAY_STATUS_FLG.trim().equalsIgnoreCase(sPayStatusFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PAY_STATUS_FLG is : "+sPayStatusFlg+" Actual value of PAY_STATUS_FLG is---->"+sPAY_STATUS_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PAY_STATUS_FLG is : "+sPayStatusFlg+" Actual value of PAY_STATUS_FLG is---->"+sPAY_STATUS_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPAY_AMT.trim().equalsIgnoreCase(sPayAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PAY_AMT is : "+sPayAmt+" Actual value of PAY_AMT is---->"+sPAY_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PAY_AMT is : "+sPayAmt+" Actual value of PAY_AMT is---->"+sPAY_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMATCH_TYPE_CD.trim().equalsIgnoreCase(sMatchTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_TYPE_CD is : "+sMatchTypeCd+" Actual value of MATCH_TYPE_CD is---->"+sMATCH_TYPE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMATCH_VAL.trim().equalsIgnoreCase(sMatchVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MATCH_VAL is : "+sMatchVal+" Actual value of MATCH_VAL is---->"+sMATCH_VAL);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentTableForBinderPayment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyToDoEntryTableForBinderPayment
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyToDoEntryTableForBinderPayment(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyToDoEntryTableForBinderPayment");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sTdEntryId,sMsgCatNbr,sMsgNum,sTdTypeCd,sRoleId,sEntryStatusFlg,sCreDttm;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT TD_ENTRY_ID, MESSAGE_CAT_NBR, MESSAGE_NBR, TD_TYPE_CD, ROLE_ID, ENTRY_STATUS_FLG, TO_CHAR(CRE_DTTM,'MM-DD-YYYY') \"CRE_DTTM\" FROM CI_TD_ENTRY WHERE TD_ENTRY_ID IN (SELECT TD_ENTRY_ID FROM CI_TD_DRLKEY WHERE KEY_VALUE = '"+sMembershipId+"') AND TD_TYPE_CD IN('C1-BPREC','C1-BPNRE','C1-BPCNA')";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTD_ENTRY_ID=(String)temp.get("TD_ENTRY_ID");
						sTD_ENTRY_ID = "GET"+sTD_ENTRY_ID;
						String sMESSAGE_CAT_NBR=(String)temp.get("MESSAGE_CAT_NBR");
						String sMESSAGE_NBR=(String)temp.get("MESSAGE_NBR");
						String sTD_TYPE_CD=(String)temp.get("TD_TYPE_CD");
						String sROLE_ID=(String)temp.get("ROLE_ID");
						String sENTRY_STATUS_FLG=(String)temp.get("ENTRY_STATUS_FLG");
						String sCRE_DTTM=(String)temp.get("CRE_DTTM");
						
						
						System.out.println("TD_ENTRY_ID "+sTD_ENTRY_ID);
						System.out.println("MESSAGE_CAT_NBR "+sMESSAGE_CAT_NBR);
						System.out.println("MESSAGE_NBR"+sMESSAGE_NBR);
						System.out.println("TD_TYPE_CD"+sTD_TYPE_CD);
						System.out.println("ROLE_ID"+sROLE_ID);
						System.out.println("ENTRY_STATUS_FLG"+sENTRY_STATUS_FLG);
						System.out.println("CRE_DTTM "+sCRE_DTTM);
						
						
						sTdEntryId			=	CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sMsgCatNbr			=	CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sMsgNum				=	CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sTdTypeCd			=	CF.FnGetCellValue(iStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sRoleId				=	CF.FnGetCellValue(iStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sEntryStatusFlg		=	CF.FnGetCellValue(iStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sCreDttm			=	CF.FnGetCellValue(iStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						
						
						if (sTD_ENTRY_ID.trim().substring(0,2).equalsIgnoreCase(sTdEntryId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" -> Expected value of TD_ENTRY_ID is : "+sTdEntryId+" Actual value of TD_ENTRY_ID is---->"+sTD_ENTRY_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of TD_ENTRY_ID is : "+sTdEntryId+" Actual value of TD_ENTRY_ID is---->"+sTD_ENTRY_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sMESSAGE_CAT_NBR.trim().substring(0,2).equalsIgnoreCase(sMsgCatNbr.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of MESSAGE_CAT_NBR is : "+sMsgCatNbr+" Actual value of MESSAGE_CAT_NBR is---->"+sMESSAGE_CAT_NBR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of MESSAGE_CAT_NBR is : "+sMsgCatNbr+" Actual value of MESSAGE_CAT_NBR is---->"+sMESSAGE_CAT_NBR);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sMESSAGE_NBR.trim().equalsIgnoreCase(sMsgNum.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of MESSAGE_NBR is : "+sMsgNum+" Actual value of CAN_RSN_CD is---->"+sMESSAGE_NBR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of MESSAGE_NBR is : "+sMsgNum+" Actual value of CAN_RSN_CD is---->"+sMESSAGE_NBR);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sTD_TYPE_CD.trim().equalsIgnoreCase(sTdTypeCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of TD_TYPE_CD is : "+sTdTypeCd+" Actual value of TD_TYPE_CD is---->"+sTD_TYPE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of TD_TYPE_CD is : "+sTdTypeCd+" Actual value of TD_TYPE_CD is---->"+sTD_TYPE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sROLE_ID.trim().equalsIgnoreCase(sRoleId.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of ROLE_ID is : "+sRoleId+" Actual value of ROLE_ID is---->"+sROLE_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of ROLE_ID is : "+sRoleId+" Actual value of ROLE_ID is---->"+sROLE_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sENTRY_STATUS_FLG.trim().equalsIgnoreCase(sEntryStatusFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of ENTRY_STATUS_FLG is : "+sEntryStatusFlg+" Actual value of ENTRY_STATUS_FLG is---->"+sENTRY_STATUS_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of ENTRY_STATUS_FLG is : "+sEntryStatusFlg+" Actual value of ENTRY_STATUS_FLG is---->"+sENTRY_STATUS_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCRE_DTTM.trim().equalsIgnoreCase(sCreDttm.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+iStartingRow+" ->Expected value of CRE_DTTM is : "+sCreDttm+" Actual value of CRE_DTTM is---->"+sCRE_DTTM);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+iStartingRow+" ->Expected value of CRE_DTTM is : "+sCreDttm+" Actual value of CRE_DTTM is---->"+sCRE_DTTM);
							sAllTxnStatus = "NOTPROCESS";
						}
						
											
						iStartingRow = iStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyToDoEntryTableForBinderPayment");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMembershipStatusReasonFromDBForIndividualMembership
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMembershipStatusReasonFromDBForIndividualMembership(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMembershipStatusReasonFromDBForIndividualMembership");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sQuery,sMembPerStatRsnFlg,sBoStatusReasonCd;
				String sAllTxnStatus = "NOTPROCESS";
				sPersonName		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT MP.MEMB_PERS_STAT_RSN_FLG, M.BO_STATUS_REASON_CD FROM CI_MEMBERSHIP_PER MP, CI_MEMBERSHIP M WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"') AND MP.MEMBERSHIP_ID = M.MEMBERSHIP_ID";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sMEMB_PERS_STAT_RSN_FLG=(String)temp.get("MEMB_PERS_STAT_RSN_FLG");
						String sBO_STATUS_REASON_CD=(String)temp.get("BO_STATUS_REASON_CD");
						
						
						sMembPerStatRsnFlg			=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sBoStatusReasonCd			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
							
						
						if (sMEMB_PERS_STAT_RSN_FLG.trim().equalsIgnoreCase(sMembPerStatRsnFlg.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of MEMB_PERS_STAT_RSN_FLG is : "+sMembPerStatRsnFlg+" Actual value of MEMB_PERS_STAT_RSN_FLG is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MEMB_PERS_STAT_RSN_FLG is : "+sMembPerStatRsnFlg+" Actual value of MEMB_PERS_STAT_RSN_FLG is---->"+sMEMB_PERS_STAT_RSN_FLG);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBO_STATUS_REASON_CD.trim().equalsIgnoreCase(sBoStatusReasonCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of BO_STATUS_REASON_CD is : "+sBoStatusReasonCd+" Actual value of BO_STATUS_REASON_CD is---->"+sBO_STATUS_REASON_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BO_STATUS_REASON_CD is : "+sBoStatusReasonCd+" Actual value of BO_STATUS_REASON_CD is---->"+sBO_STATUS_REASON_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMembershipStatusReasonFromDBForIndividualMembership");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetDealIdFromDB
	'Function Description : This function gets the Alternate Bill Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetDealIdFromDB(int iStartingRow, String sSheetName, String sWorkBook) throws Exception
	{
		System.out.println("--FnGetDealIdFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sDealIdentifier;
				
				sDealIdentifier			 =	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkBook).toString().trim();
				
				//Verify entry in table ci_bill table
				String sDealId   = (String) FnGetDBColumnValue("SELECT DEAL_ID FROM C1_DEAL WHERE DEAL_IDENTIFIER = '"+sDealIdentifier+"'","DEAL_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("DEAL ID ---------------" +sDealId);
				
				CF.FnWriteCellValue(iStartingRow,18, sDealId, sSheetName, sWorkBook);
    			System.out.println("Deal Id is-->"+sDealId);
				
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetDealIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesFromDBForRetireeManagement
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBillableChargesFromDBForRetireeManagement(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBillableChargesFromDBForRetireeManagement");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sPersonName, sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				sPersonName			=	 CF.FnGetCellValue(iStartingRow-2,4, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_STAT = '10' AND SQ.SQI_CD IN('PREMAMT','LISSQ') AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"') AND SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID = (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"'))) ORDER BY B.START_DT, SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillableChargesFromDBForRetireeManagement");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadFileHeaderVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadFileHeaderVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FileRecordTypeUploadFileHeaderVerification");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sFileHeader;
				
				//Verify count of Regular Bill Segments generated
				sFileName		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sFileHeader	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				String sFileHeaderStr =  (String) FnGetDBColumnValue("SELECT FILE_HEADER FROM CI_FILE_REQUEST WHERE FILE_NAME = '"+sFileName+"'","FILE_HEADER",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if (sFileHeaderStr.equalsIgnoreCase(sFileHeader))
				{
					CF.FnTestCaseStatusReport("Pass","File Header Information matched. Expected File Header Value = "+sFileHeader+ " Actual File Header Value = "+sFileHeaderStr);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","File Header Information not matched. Expected File Header Value = "+sFileHeader+ " Actual File Header Value = "+sFileHeaderStr);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileHeaderVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadFileFooterVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadFileFooterVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FileRecordTypeUploadFileFooterVerification");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sFileHeader;
				
				//Verify count of Regular Bill Segments generated
				sFileName		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sFileHeader	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				String sFileHeaderStr =  (String) FnGetDBColumnValue("SELECT FILE_FOOTER FROM CI_FILE_REQUEST WHERE FILE_NAME = '"+sFileName+"'","FILE_FOOTER",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if (sFileHeaderStr.equalsIgnoreCase(sFileHeader))
				{
					CF.FnTestCaseStatusReport("Pass","File Footer Information matched. Expected File Footer Value = "+sFileHeader+ " Actual File Footer Value = "+sFileHeaderStr);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","File Footer Information not matched. Expected File Footer Value = "+sFileHeader+ " Actual File Footer Value = "+sFileHeaderStr);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileFooterVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FileRecordTypeUploadVerification");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sTxnStgCount,sErrorDesc, sRowCount;
				int iRowCount, iTxnStgCount;
				//Verify count of Regular Bill Segments generated
				sFileName		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sTxnStgCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				sErrorDesc		=   (String)CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();
				
				iTxnStgCount	=	Integer.parseInt(sTxnStgCount);
				
				sRowCount		=   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_TXN_DETAIL_STG WHERE TXN_HEADER_ID = (SELECT TXN_HEADER_ID FROM CI_TXN_HEADER WHERE FILENAME = '"+sFileName+"')","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iRowCount		=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				
				if(iTxnStgCount == 0 && !sErrorDesc.equalsIgnoreCase("NoValue"))
				{
					String sErrDesc =  (String) FnGetDBColumnValue("SELECT DESCRLONG FROM  CI_FILE_REQUEST_DTL_MSG WHERE STATUS_CD = 'ERR' AND LOG_ENTRY_TYPE_FLG = 'F1ST' AND REQUEST_ID = ( SELECT REQUEST_ID FROM CI_FILE_REQUEST_DETAIL WHERE FILE_ID  = (SELECT FILE_ID FROM CI_FILE_REQUEST WHERE FILE_NAME = '"+sFileName+"'))","DESCRLONG",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
					if (sErrDesc.contains(sErrorDesc))
					{
						CF.FnTestCaseStatusReport("Pass","Error matched. Expected Status = "+sErrorDesc+ " Actual Status = "+sErrDesc);
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail","Error not matched Expected Status = "+sErrorDesc+ " Actual Status = "+sErrDesc);
					}
				}
				else 
				{
					if(iTxnStgCount == iRowCount)
						CF.FnTestCaseStatusReport("Pass","File is Processed Successfully. "+sFileName);
					else
						CF.FnTestCaseStatusReport("Fail","File is not Processed. "+sFileName);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadTransactionHeaderVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadTransactionHeaderVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FileRecordTypeUploadTransactionHeaderVerification");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sQuery,sTxnHeaderId,sTxnSrcCd,sTxnHeaderDttm,sHeaderNbrRecs,sHeaderTxnVol,sHeaderTxnAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sFileName		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT TXN_HEADER_ID, TXN_SOURCE_CD, TXN_HEADER_DTTM, HEADER_NBR_RECS, HEADER_TXN_VOL, HEADER_TXN_AMT FROM CI_TXN_HEADER WHERE FILENAME = '"+sFileName+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sTXN_HEADER_ID=(String)temp.get("TXN_HEADER_ID");
						sTXN_HEADER_ID = "GET"+sTXN_HEADER_ID;
						String sTXN_SOURCE_CD=(String)temp.get("TXN_SOURCE_CD");
						String sTXN_HEADER_DTTM=(String)temp.get("TXN_HEADER_DTTM");
						String sHEADER_NBR_RECS=(String)temp.get("HEADER_NBR_RECS");
						String sHEADER_TXN_VOL=(String)temp.get("HEADER_TXN_VOL");
						String sHEADER_TXN_AMT=(String)temp.get("HEADER_TXN_AMT");
												
						System.out.println("TXN_HEADER_ID "+sTXN_HEADER_ID);
						System.out.println("TXN_SOURCE_CD "+sTXN_SOURCE_CD);
						System.out.println("TXN_HEADER_DTTM"+sTXN_HEADER_DTTM);
						System.out.println("HEADER_NBR_RECS"+sHEADER_NBR_RECS);
						System.out.println("HEADER_TXN_VOL "+sHEADER_TXN_VOL);
						System.out.println("HEADER_TXN_AMT"+sHEADER_TXN_AMT);
						
						sTxnHeaderId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sTxnSrcCd			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sTxnHeaderDttm		=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sHeaderNbrRecs		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sHeaderTxnVol		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sHeaderTxnAmt		=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sTXN_HEADER_ID.trim().substring(0,2).equalsIgnoreCase(sTxnHeaderId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected TXN_HEADER_ID ->"+sTxnHeaderId+" Actual TXN_HEADER_ID is---->"+sTXN_HEADER_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected TXN_HEADER_ID ->"+sTxnHeaderId+" Actual TXN_HEADER_ID is---->"+sTXN_HEADER_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sTXN_SOURCE_CD.trim().equalsIgnoreCase(sTxnSrcCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of TXN_SOURCE_CD is : "+sTxnSrcCd+" Actual value of TXN_SOURCE_CD is---->"+sTXN_SOURCE_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of TXN_SOURCE_CD is : "+sTxnSrcCd+" Actual value of TXN_SOURCE_CD is---->"+sTXN_SOURCE_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sTXN_HEADER_DTTM.trim().equalsIgnoreCase(sTxnHeaderDttm.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of TXN_HEADER_DTTM is : "+sTxnHeaderDttm+" Actual value of TXN_HEADER_DTTM is---->"+sTXN_HEADER_DTTM);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of TXN_HEADER_DTTM is : "+sTxnHeaderDttm+" Actual value of TXN_HEADER_DTTM is---->"+sTXN_HEADER_DTTM);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sHEADER_NBR_RECS.trim().equalsIgnoreCase(sHeaderNbrRecs.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of HEADER_NBR_RECS is : "+sHeaderNbrRecs+" Actual value of HEADER_NBR_RECS is---->"+sHEADER_NBR_RECS);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of HEADER_NBR_RECS is : "+sHeaderNbrRecs+" Actual value of HEADER_NBR_RECS is---->"+sHEADER_NBR_RECS);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sHEADER_TXN_VOL.trim().equalsIgnoreCase(sHeaderTxnVol.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of HEADER_TXN_VOL is : "+sHeaderTxnVol+" Actual value of HEADER_TXN_VOL is---->"+sHEADER_TXN_VOL);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of HEADER_TXN_VOL is : "+sHeaderTxnVol+" Actual value of HEADER_TXN_VOL is---->"+sHEADER_TXN_VOL);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sHEADER_TXN_AMT.trim().equalsIgnoreCase(sHeaderTxnAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of HEADER_TXN_AMT is : "+sHeaderTxnAmt+" Actual value of HEADER_TXN_AMT is---->"+sHEADER_TXN_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of SHEADER_TXN_AMT is : "+sHeaderTxnAmt+" Actual value of HEADER_TXN_AMT is---->"+sHEADER_TXN_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadTransactionHeaderVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadFileRequestTableVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadFileRequestTableVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FileRecordTypeUploadFileRequestTableVerification");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sQuery,sBoStatusCd,sTotalRec,sIgrRec,sInProgRec,sRetryLimit,sDatArchival,sPendingRec,sProcessedRec,sSkippedRec,sErrorRec,sRetryRec;
				String sAllTxnStatus = "NOTPROCESS";
				sFileName		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT BO_STATUS_CD, NUM_TOTAL_REC, NUM_IGNORE_REC, NUM_INPROGRESS_REC, NUM_RETRY_LIMIT_EXC_REC, NUM_DATA_ARCHIVAL_REC, NUM_PENDING_REC, NUM_PROCESSED_REC, NUM_SKIPPED_REC, NUM_ERROR_REC, NUM_RETRY_REC FROM CI_FILE_REQUEST WHERE FILE_NAME = '"+sFileName+"'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
						String sNUM_TOTAL_REC=(String)temp.get("NUM_TOTAL_REC");
						String sNUM_IGNORE_REC=(String)temp.get("NUM_IGNORE_REC");
						String sNUM_INPROGRESS_REC=(String)temp.get("NUM_INPROGRESS_REC");
						String sNUM_RETRY_LIMIT_EXC_REC=(String)temp.get("NUM_RETRY_LIMIT_EXC_REC");
						String sNUM_DATA_ARCHIVAL_REC=(String)temp.get("NUM_DATA_ARCHIVAL_REC");
						String sNUM_PENDING_REC=(String)temp.get("NUM_PENDING_REC");
						String sNUM_PROCESSED_REC=(String)temp.get("NUM_PROCESSED_REC");
						String sNUM_SKIPPED_REC=(String)temp.get("NUM_SKIPPED_REC");
						String sNUM_ERROR_REC=(String)temp.get("NUM_ERROR_REC");
						String sNUM_RETRY_REC=(String)temp.get("NUM_RETRY_REC");			
						
						System.out.println("BO_STATUS_CD "+sBO_STATUS_CD);
						System.out.println("NUM_TOTAL_REC "+sNUM_TOTAL_REC);
						System.out.println("NUM_IGNORE_REC"+sNUM_IGNORE_REC);
						System.out.println("NUM_INPROGRESS_REC"+sNUM_INPROGRESS_REC);
						System.out.println("NUM_RETRY_LIMIT_EXC_REC "+sNUM_RETRY_LIMIT_EXC_REC);
						System.out.println("NUM_DATA_ARCHIVAL_REC"+sNUM_DATA_ARCHIVAL_REC);
						System.out.println("NUM_PENDING_REC"+sNUM_PENDING_REC);
						System.out.println("NUM_PROCESSED_REC"+sNUM_PROCESSED_REC);
						System.out.println("NUM_SKIPPED_REC"+sNUM_SKIPPED_REC);
						System.out.println("NUM_ERROR_REC"+sNUM_ERROR_REC);
						System.out.println("NUM_RETRY_REC"+sNUM_RETRY_REC);
						
						sBoStatusCd		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sTotalRec		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sIgrRec			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sInProgRec		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sRetryLimit		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sDatArchival	=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sPendingRec		=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						sProcessedRec	=	CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
						sSkippedRec		=	CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
						sErrorRec		=	CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
						sRetryRec		=	CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
						
						
						if (sBO_STATUS_CD.trim().equalsIgnoreCase(sBoStatusCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected BO_STATUS_CD ->"+sBoStatusCd+" Actual BO_STATUS_CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected BO_STATUS_CD ->"+sBoStatusCd+" Actual BO_STATUS_CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sNUM_TOTAL_REC.trim().equalsIgnoreCase(sTotalRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of NUM_TOTAL_REC is : "+sTotalRec+" Actual value of NUM_TOTAL_REC is---->"+sNUM_TOTAL_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_TOTAL_REC is : "+sTotalRec+" Actual value of NUM_TOTAL_REC is---->"+sNUM_TOTAL_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sNUM_IGNORE_REC.trim().equalsIgnoreCase(sIgrRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_IGNORE_REC is : "+sIgrRec+" Actual value of NUM_IGNORE_REC is---->"+sNUM_IGNORE_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_IGNORE_REC is : "+sIgrRec+" Actual value of NUM_IGNORE_REC is---->"+sNUM_IGNORE_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sNUM_INPROGRESS_REC.trim().equalsIgnoreCase(sInProgRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_INPROGRESS_REC is : "+sInProgRec+" Actual value of NUM_INPROGRESS_REC is---->"+sNUM_INPROGRESS_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_INPROGRESS_REC is : "+sInProgRec+" Actual value of NUM_INPROGRESS_REC is---->"+sNUM_INPROGRESS_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_RETRY_LIMIT_EXC_REC.trim().equalsIgnoreCase(sRetryLimit.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_RETRY_LIMIT_EXC_REC is : "+sRetryLimit+" Actual value of NUM_RETRY_LIMIT_EXC_REC is---->"+sNUM_RETRY_LIMIT_EXC_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_RETRY_LIMIT_EXC_REC is : "+sRetryLimit+" Actual value of NUM_RETRY_LIMIT_EXC_REC is---->"+sNUM_RETRY_LIMIT_EXC_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sNUM_DATA_ARCHIVAL_REC.trim().equalsIgnoreCase(sDatArchival.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_DATA_ARCHIVAL_REC is : "+sDatArchival+" Actual value of NUM_DATA_ARCHIVAL_REC is---->"+sNUM_DATA_ARCHIVAL_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_DATA_ARCHIVAL_REC is : "+sDatArchival+" Actual value of NUM_DATA_ARCHIVAL_REC is---->"+sNUM_DATA_ARCHIVAL_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_PENDING_REC.trim().equalsIgnoreCase(sPendingRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_PENDING_REC is : "+sPendingRec+" Actual value of NUM_PENDING_REC is---->"+sNUM_PENDING_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_PENDING_REC is : "+sPendingRec+" Actual value of NUM_PENDING_REC is---->"+sNUM_PENDING_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_PROCESSED_REC.trim().equalsIgnoreCase(sProcessedRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_PROCESSED_REC is : "+sProcessedRec+" Actual value of NUM_PROCESSED_REC is---->"+sNUM_PROCESSED_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_PROCESSED_REC is : "+sProcessedRec+" Actual value of NUM_PROCESSED_REC is---->"+sNUM_PROCESSED_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_SKIPPED_REC.trim().equalsIgnoreCase(sSkippedRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_SKIPPED_REC is : "+sSkippedRec+" Actual value of NUM_SKIPPED_REC is---->"+sNUM_SKIPPED_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_SKIPPED_REC is : "+sSkippedRec+" Actual value of NUM_SKIPPED_REC is---->"+sNUM_SKIPPED_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_ERROR_REC.trim().equalsIgnoreCase(sErrorRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_ERROR_REC is : "+sErrorRec+" Actual value of NUM_ERROR_REC is---->"+sNUM_ERROR_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_ERROR_REC is : "+sErrorRec+" Actual value of NUM_ERROR_REC is---->"+sNUM_ERROR_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNUM_RETRY_REC.trim().equalsIgnoreCase(sRetryRec.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NUM_RETRY_REC is : "+sRetryRec+" Actual value of NUM_RETRY_REC is---->"+sNUM_RETRY_REC);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NUM_RETRY_REC is : "+sRetryRec+" Actual value of NUM_RETRY_REC is---->"+sNUM_RETRY_REC);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadPersonVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadPersonVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FileRecordTypeUploadPersonVerification");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName,sRecCount,sRowCount;
				int iRowCount, iRecCount;
				//Verify count of Regular Bill Segments generated
				sPersonName		=   (String)CF.FnGetCellValue(iStartingRow,1,sSheetName, sWorkbook).toString().trim();
				sRecCount	=   (String)CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				iRecCount	=	Integer.parseInt(sRecCount);
				
				sRowCount		=   (String) FnGetDBColumnValue("SELECT COUNT(*) FROM CI_PER_NAME WHERE ENTITY_NAME LIKE '"+sPersonName+"'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iRowCount		=   Integer.parseInt(sRowCount);
				System.out.println("iCount============================"+iRowCount);
				
				if(iRowCount == iRecCount)
				{
					CF.FnTestCaseStatusReport("Pass","Error matched. Expected Count  = "+iRecCount+ " Actual Count = "+iRowCount);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Error not matched Expected Count = "+iRecCount+ " Actual Count = "+iRowCount);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadPersonVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FileRecordTypeUploadFileRequestTableVerification
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FileRecordTypeUploadRecordStatusVerification(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FileRecordTypeUploadRecordStatusVerification");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sFileName,sRequestType,sEmailAddr,sQuery,sStatusCd;
				String sAllTxnStatus = "NOTPROCESS";
				sFileName			=	 CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
				sRequestType		=	 CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
				sEmailAddr			=	 CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT UNIQUE(STATUS_CD) FROM CI_FILE_REQUEST_DETAIL WHERE REQUEST_TYPE = '"+sRequestType+"' AND REQUEST_ID IN (SELECT REQUEST_ID FROM C1_FILE_REQUEST_IDENTIFIER  WHERE RECORD_IDENTIFIER1 = '"+sEmailAddr+"' AND FILE_ID = (SELECT FILE_ID FROM CI_FILE_REQUEST WHERE FILE_NAME = '"+sFileName+"'))";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sSTATUS_CD=(String)temp.get("STATUS_CD");
									
						
						System.out.println("STATUS_CD "+sSTATUS_CD);
						
						
						sStatusCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						
						
						
						if (sSTATUS_CD.trim().equalsIgnoreCase(sStatusCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected STATUS_CD ->"+sStatusCd+" Actual STATUS_CD is---->"+sSTATUS_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected STATUS_CD ->"+sStatusCd+" Actual STATUS_CD is---->"+sSTATUS_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FileRecordTypeUploadRecordStatusVerification");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyNewBornWaiverCreditFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyNewBornWaiverCreditFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyNewBornWaiverCreditFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sPriceItemCd,sStartDt,sEndDt,sSvcQty,sBillableChgId,sBillPeriodCd;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();


				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND SQ.SEQ_NUM=10 AND B.BILLABLE_CHG_STAT='10' AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"' )  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);

				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();

					for(int i=0;i<AL.size();i++)
					{

						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column

						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
						
						

						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD"+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);

						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd	    =   CF.FnGetCellValue(sStartingRow, 5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}

						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code Quantity is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sPriceItemCd+" Actual value of Service Quantity is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sPriceItemCd+" Actual value of Service Quantity is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}

						sStartingRow = sStartingRow + 1;
					}
				}	

				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyCobraBillableChargesFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifySQDetailsForNewBornWaiver
	'Function Description : Verification of SQ Details generated on bill segments after bill is generated
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	Abhishek Kumar
	'#########################################################################################################*/
	public void FnVerifySQDetailsForNewBornWaiver(int iStartingRow, int sCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifySQDetailsForNewBornWaiver");
		try 
		{
			String sQuery1;
			String sBillId,sBillSegId,sSqiCd,sExpSqiCd,sExpInitSq,sInitSq,sBillSq,sExpBillSq,sRowCount,sCountFlg = "F";
			String [] sBillSegIdArr,sSqiCdArr,sInitSqArr,sBillSqArr;

			int iCounter,iBillSegIdlen,iSqiCdlen,iInitSqlen,iBillSqlen;
			
			String sStartDate  =    CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
			String sEndDate  =      CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
			sBillId		=   (String)CF.FnGetCellValue(sCountRow,1, sSheetName, sWorkbook).toString().trim();
			sRowCount  	=	(String)CF.FnGetCellValue(sCountRow,2, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT count(*) FROM CI_BSEG_SQ WHERE BSEG_ID IN(SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"' and START_DT=to_date('"+sStartDate+"','mm/dd/yyyy') and END_DT=to_date('"+sEndDate+"','mm/dd/yyyy')) and  SQI_CD in ('NBCRAMT ','NOWEAMT ','PREMAMT ')";
			System.out.println("Count is : "+sQuery1);
			sCountFlg = FnGetTxnRowCount(sRowCount,sQuery1);
			
			System.out.println("Validating the SQ Details for date range "+ sStartDate+ "And " +sEndDate);

			System.out.println("Printing the value if sCountFlg================="+sCountFlg);

			if(sCountFlg.equalsIgnoreCase("T"))
			{
				//Get Bill Segment Ids
				BaseTest.sTestDescription = "Verify Bill Segements";
				sBillSegIdArr =  (String[]) FnGetDBColumnValueInArray("SELECT BSEG_ID FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID = '"+sBillId+"' and START_DT=to_date('"+sStartDate+"','mm/dd/yyyy') and END_DT=to_date('"+sEndDate+"','mm/dd/yyyy')) and  SQI_CD in ('NBCRAMT ','NOWEAMT ','PREMAMT ') ORDER BY SQI_CD","BSEG_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;

				iBillSegIdlen = sBillSegIdArr.length;
				System.out.println("Length of Array = "+iBillSegIdlen);

				for(int k=0;k<iBillSegIdlen;k++,iCounter++)
				{					
					sBillSegId = sBillSegIdArr[k];
					CF.FnWriteCellValue(iStartingRow+iCounter, 1, "GET"+sBillSegId, sSheetName, sWorkbook);
					CF.FnTestCaseStatusReport("Pass","Bill Segment Id present in CI_BSEG_SQ "+sBillSegIdArr[k]);
				}

				//Get SQI_CDs
				BaseTest.sTestDescription = "Verify Service Quantity Identifiers";
				sSqiCdArr =  (String[]) FnGetDBColumnValueInArray("SELECT SQI_CD FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG where BILL_ID = '"+sBillId+"' and START_DT=to_date('"+sStartDate+"','mm/dd/yyyy') and END_DT=to_date('"+sEndDate+"','mm/dd/yyyy')) and  SQI_CD in ('NBCRAMT ','NOWEAMT ','PREMAMT ') ORDER BY SQI_CD","SQI_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;

				iSqiCdlen = sSqiCdArr.length;
				System.out.println("Length of Array = "+iSqiCdlen);

				for(int k=0;k<iSqiCdlen;k++,iCounter++)
				{					
					sSqiCd = sSqiCdArr[k];
					sExpSqiCd	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,2,sSheetName, sWorkbook).toString().trim();
					if(sExpSqiCd.equalsIgnoreCase(sSqiCd.trim()))
						CF.FnTestCaseStatusReport("Pass","SQI_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpSqiCd+". Actual Value = "+sSqiCd);
					else
						CF.FnTestCaseStatusReport("Fail","SQI_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpSqiCd+". Actual Value = "+sSqiCd);
				}

				//Get INIT_SQ
				BaseTest.sTestDescription = "Verify Init SQs";
				sInitSqArr =  (String[]) FnGetDBColumnValueInArray("SELECT INIT_SQ FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG where BILL_ID = '"+sBillId+"' and START_DT=to_date('"+sStartDate+"','mm/dd/yyyy') and END_DT=to_date('"+sEndDate+"','mm/dd/yyyy')) and  SQI_CD in ('NBCRAMT ','NOWEAMT ','PREMAMT ') ORDER BY SQI_CD","INIT_SQ",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;

				iInitSqlen = sInitSqArr.length;
				System.out.println("Length of Array = "+iInitSqlen);

				for(int k=0;k<iInitSqlen;k++,iCounter++)
				{					
					sInitSq = sInitSqArr[k];
					sExpInitSq	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,3,sSheetName, sWorkbook).toString().trim();
					if(sExpInitSq.equalsIgnoreCase(sInitSq))
						CF.FnTestCaseStatusReport("Pass","INIT_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpInitSq+". Actual Value = "+sInitSq);
					else
						CF.FnTestCaseStatusReport("Fail","INIT_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpInitSq+". Actual Value = "+sInitSq);
				}

				//Get BILL_SQ
				BaseTest.sTestDescription = "Verify Billable SQs";
				sBillSqArr =  (String[]) FnGetDBColumnValueInArray("SELECT BILL_SQ FROM CI_BSEG_SQ WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG where BILL_ID = '"+sBillId+"' and START_DT=to_date('"+sStartDate+"','mm/dd/yyyy') and END_DT=to_date('"+sEndDate+"','mm/dd/yyyy')) and  SQI_CD in ('NBCRAMT ','NOWEAMT ','PREMAMT ') ORDER BY SQI_CD","BILL_SQ",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				iCounter = 0;

				iBillSqlen = sBillSqArr.length;
				System.out.println("Length of Array = "+iBillSqlen);

				for(int k=0;k<iBillSqlen;k++,iCounter++)
				{					
					sBillSq = sBillSqArr[k];
					sExpBillSq	 =   (String)CF.FnGetCellValue(iStartingRow+iCounter,4,sSheetName, sWorkbook).toString().trim();
					if(sExpBillSq.equalsIgnoreCase(sBillSq))
						CF.FnTestCaseStatusReport("Pass","INIT_CD matched C1_CI_BSEG_SQ. Expected Value = "+sExpBillSq+". Actual Value = "+sBillSq);
					else
						CF.FnTestCaseStatusReport("Fail","INIT_CD NOT matched C1_CI_BSEG_SQ. Expected Value = "+sExpBillSq+". Actual Value = "+sBillSq);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyOffSetAdjustments");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	   
    /*##########################################################################################################################################################################################################################/
    'Function Name        : FnGetErrorMessageText
    'Function Description : This function gets the Price Item Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnGetErrorMessageText(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
    {
    	System.out.println("--FnGetErrorMessageText");
    	try
    	{      
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String sQuery,sPersonName,sMsgText;
    			sPersonName          =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
                     
    			sQuery = "SELECT MESSAGE_TEXT FROM CI_MSG_L WHERE MESSAGE_NBR IN (SELECT MESSAGE_NBR FROM CI_TD_ENTRY WHERE MESSAGE_NBR IN (SELECT MESSAGE_NBR FROM C1_INBOUND_MESSAGE_LOG WHERE C1_INBOUND_MESSAGE_ID IN (SELECT C1_INBOUND_MESSAGE_ID FROM C1_INBOUND_MESSAGE_LOG_PARM WHERE MESSAGE_PARM = '"+sPersonName+"')))";
    			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
                        
    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
    				
    				for(int i=0;i<AL.size();i++)
    				{
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                      
    					sMsgText		=  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
                                      
    					// To Get value of corresponding column
    					String sMESSAGE_TEXT=(String)temp.get("MESSAGE_TEXT");
    					System.out.println("MESSAGE_TEXT "+sMESSAGE_TEXT);
                        		
    					if (sMESSAGE_TEXT.trim().equalsIgnoreCase(sMsgText.trim()))
    					{
    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of MESSAGE_TEXT is : "+sMsgText+" Actual value of MESSAGE_TEXT is---->"+sMESSAGE_TEXT);
    					}
    					else
    					{
    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of MESSAGE_TEXT is : "+sMsgText+" Actual value of MESSAGE_TEXT is---->"+sMESSAGE_TEXT);
    					}
    					
    					sStartingRow = sStartingRow + 1;
    				}
    			}      
    			else
    			{
    				System.out.println("Data not available in db");
    			}
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FnGetErrorMessageText");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    /*'###############################################################
	'Function Name        : FnUpdateRateValueOfPriceItemForDeal
	'Function Description : Execute update and commit
	'Input Parameters  
	'                     : 
	'                     
	'Output Parameters    : Not Applicable
	'################################################################*/	
	public void FnUpdateRateValueOfPriceItemForDeal(String sPriceItem,String sPriceItemValue, String sDealID) throws SQLException {
			
		try {
			
			FnUpdateValueInDb("UPDATE CI_PRICECOMP SET VALUE_AMT ='"+sPriceItemValue+"' WHERE PRICE_ASGN_ID IN (SELECT PRICE_ASGN_ID FROM CI_PRICEASGN WHERE PRICE_ASGN_ID IN(SELECT PRICE_ASGN_ID FROM C1_DEAL_SIMULATION_DTL WHERE DEAL_ID = '"+sDealID+"' AND PRICEITEM_CD = '"+sPriceItem+"'))","COMMIT", "QASCRIPT", "qaadm", "qaadm", "10.40.72.101", "1521");

		} 
		catch(Exception e) 
		{
			e.printStackTrace();
			System.out.println("Oracle DB connection Fail.");
		}

	}

	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnGetPriceItemDetails
    'Function Description : This function gets the Price Item Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnGetPriceItemDetails(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
    {
    	System.out.println("--FnGetPriceItemDetails");
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String sQuery,sPriceItem,sPersonID,sAssignementLevel,sRateInfo,sPricingCurrency,sTrigger,sEffectiveStartDate,sEffectiveEndDate,sRateSchedule;
    			sPriceItem          =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
    			sPersonID           =  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
    			sAssignementLevel   =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
    			sEffectiveStartDate =  CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
    			sEffectiveEndDate   =  CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
    			sRateSchedule       =  CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
    			
    			
    			sQuery = "SELECT PRICE_ASSIGNMENT_START_DATE,PRICE_ASSIGNMENT_END_DATE,ASSGN_PRICE_CURRENCY,RATE_VALUE FROM CI_EFF_PER_PRICING_VW WHERE PERSON_ID ='"+sPersonID+"' AND PRICE_ITEM_CODE='"+sPriceItem+"' AND PRICE_ASSIGNMENT_LEVEL='"+sAssignementLevel+"' AND PRICE_ASSIGNMENT_START_DATE=TO_DATE('"+sEffectiveStartDate+"','YYYY-MM-DD')";
    			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
    			
    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
    				
    				for(int i=0;i<AL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
    					
    					sRateInfo           =  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
    					sPricingCurrency    =  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
    					sTrigger            =  CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
    					
    					System.out.println("price Item Information is "+sPriceItem +sPersonID +sAssignementLevel +sRateInfo +sPricingCurrency +sTrigger +sEffectiveStartDate +sEffectiveEndDate +sRateSchedule);
 
    					// To Get value of corresponding column
                                                                               
    					String PRICE_ASSIGNMENT_START_DATE=(String)temp.get("PRICE_ASSIGNMENT_START_DATE");
    					String PRICE_ASSIGNMENT_END_DATE=(String)temp.get("PRICE_ASSIGNMENT_END_DATE");
    					String ASSGN_PRICE_CURRENCY=(String)temp.get("ASSGN_PRICE_CURRENCY");
    					String RATE_VALUE=(String)temp.get("RATE_VALUE");                     
    					
    					System.out.println("PRICE_ASSIGNMENT_START_DATE "+PRICE_ASSIGNMENT_START_DATE);
    					System.out.println("PRICE_ASSIGNMENT_END_DATE "+PRICE_ASSIGNMENT_END_DATE);
    					System.out.println("ASSGN_PRICE_CURRENCY"+ASSGN_PRICE_CURRENCY);
    					System.out.println("RATE_VALUE"+RATE_VALUE);     
    					
    					
    					if(!sEffectiveStartDate.equalsIgnoreCase("NoValue"))
    					{
    						String sUpdatedEffectiveStartDate = sEffectiveStartDate + " 00:00:00";
    						Thread.sleep(2000);
    						if (sUpdatedEffectiveStartDate.equalsIgnoreCase(PRICE_ASSIGNMENT_START_DATE))
    						{
    							CF.FnTestCaseStatusReport("Pass", "Start date from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "Start date from excel is Not matching with DB"); 
    						}	
    						//   assertEquals(sUpdatedEffectiveStartDate,PRICE_ASSIGNMENT_START_DATE,"Start date from excel is matching with DB");   	
    						Thread.sleep(5000);
    					}
                                      
    					if(!sEffectiveEndDate.equalsIgnoreCase("NoValue"))
    					{
    						String sUpdatedEffectiveEndDate = sEffectiveEndDate + " 00:00:00";
    						Thread.sleep(2000);
    						if (sUpdatedEffectiveEndDate.equalsIgnoreCase(PRICE_ASSIGNMENT_END_DATE))
    						{
    							CF.FnTestCaseStatusReport("Pass", "End date from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "End date from excel is NOT matching with DB"); 
    						}
    						//  assertEquals(sUpdatedEffectiveEndDate,PRICE_ASSIGNMENT_END_DATE,"End date from excel is matching with DB");   	
    						Thread.sleep(5000);
    					}
                                      
    					if(!sPricingCurrency.equalsIgnoreCase("NoValue"))
    					{
    						if (sPricingCurrency.equalsIgnoreCase(ASSGN_PRICE_CURRENCY))
    						{
    							CF.FnTestCaseStatusReport("Pass", "Currency from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "Currency from excel is NOT matching with DB"); 
    						}  
    						//  assertEquals(sPricingCurrency,ASSGN_PRICE_CURRENCY,"Currency from excel is matching with DB");   	
    						Thread.sleep(5000);
    					}
    					
    					if(!sRateInfo.equalsIgnoreCase("NoValue"))
    					{
    						if (sRateInfo.equalsIgnoreCase(RATE_VALUE))
    						{
    							CF.FnTestCaseStatusReport("Pass", "Rate value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "Rate value from excel is matching with DB"); 
    						}   
    						// assertEquals(sRateInfo,RATE_VALUE,"Rate value from excel is matching with DB");   	
    						Thread.sleep(5000);
    					}
    					
    					sStartingRow = sStartingRow + 1;
    				}
    			}      
    			
    			else
    			{
    				System.out.println("Data not available in db");
    			}
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
    /*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPricingDetailsFromDB
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPricingDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPricingDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName, sQuery,sParmStr,sCalcAmt,sProFactor,sDistAmt,sNoOfMonth,sTotCalcAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sPersonName			=	 CF.FnGetCellValue(iStartingRow-2,1, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT PARM_STR,CALC_AMT,PRO_FACTOR,SM_DIST_AMT,NO_OF_MONTH,TOT_CALC_AMT FROM CI_PRICEITEM_PARM_GRP_K, CI_PRCE_CALC_LN  WHERE PRICEITEM_PARM_GRP_ID = DESCR_ON_BILL AND REFERENCE_ENTITY_ID IN (SELECT PER_ID  FROM CI_PER_NAME where ENTITY_NAME LIKE ('"+sPersonName+"')) GROUP BY PRICEITEM_PARM_GRP_ID, PARM_STR,CALC_AMT,DESCR_ON_BILL,PRO_FACTOR,SM_DIST_AMT,NO_OF_MONTH,TOT_CALC_AMT,REFERENCE_ENTITY_ID ORDER BY PARM_STR";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sPARM_STR=(String)temp.get("PARM_STR");
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						String sPRO_FACTOR=(String)temp.get("PRO_FACTOR");
						String sSM_DIST_AMT=(String)temp.get("SM_DIST_AMT");
						String sNO_OF_MONTH=(String)temp.get("NO_OF_MONTH");
						String sTOT_CALC_AMT=(String)temp.get("TOT_CALC_AMT");
												
						System.out.println("PARM_STR "+sPARM_STR);
						System.out.println("CALC_AMT "+sCALC_AMT);
						System.out.println("PRO_FACTOR"+sPRO_FACTOR);
						System.out.println("SM_DIST_AMT"+sSM_DIST_AMT);
						System.out.println("NO_OF_MONTH "+sNO_OF_MONTH);
						System.out.println("TOT_CALC_AMT"+sTOT_CALC_AMT);
						
						sParmStr			=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sCalcAmt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sProFactor			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sDistAmt			=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sNoOfMonth			=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sTotCalcAmt			=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sPARM_STR.trim().equalsIgnoreCase(sParmStr.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected PARM_STR ->"+sParmStr+" Actual PARM_STR is---->"+sPARM_STR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected PARM_STR ->"+sParmStr+" Actual PARM_STR is---->"+sPARM_STR);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sCALC_AMT.trim().equalsIgnoreCase(sCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of CALC_AMT is : "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CALC_AMT is : "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sPRO_FACTOR.trim().equalsIgnoreCase(sProFactor.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PRO_FACTOR is : "+sProFactor+" Actual value of PRO_FACTOR is---->"+sPRO_FACTOR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PRO_FACTOR is : "+sProFactor+" Actual value of PRO_FACTOR is---->"+sPRO_FACTOR);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSM_DIST_AMT.trim().equalsIgnoreCase(sDistAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of SM_DIST_AMT is : "+sDistAmt+" Actual value of SM_DIST_AMT is---->"+sSM_DIST_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of SM_DIST_AMT is : "+sDistAmt+" Actual value of SM_DIST_AMT is---->"+sSM_DIST_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNO_OF_MONTH.trim().equalsIgnoreCase(sNoOfMonth.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NO_OF_MONTH is : "+sNoOfMonth+" Actual value of NO_OF_MONTH is---->"+sNO_OF_MONTH);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NO_OF_MONTH is : "+sNoOfMonth+" Actual value of NO_OF_MONTH is---->"+sNO_OF_MONTH);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sTOT_CALC_AMT.trim().equalsIgnoreCase(sTotCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of TOT_CALC_AMT is : "+sTotCalcAmt+" Actual value of STOT_CALC_AMT is---->"+sTOT_CALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of TOT_CALC_AMT is : "+sTotCalcAmt+" Actual value of TOT_CALC_AMT is---->"+sTOT_CALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPricingDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPricingDetailsFromDBForTotalAmount
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPricingDetailsFromDBForTotalAmount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPricingDetailsFromDBForTotalAmount");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName, sQuery,sTotCalcAmt;
				String sAllTxnStatus = "NOTPROCESS";
				sPersonName			=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT SUM(UNIQUE(CALC_AMT)) FROM CI_PRICEITEM_PARM_GRP_K,CI_PRCE_CALC_LN WHERE PRICEITEM_PARM_GRP_ID = DESCR_ON_BILL AND REFERENCE_ENTITY_ID in(SELECT PER_ID  FROM CI_PER_NAME where ENTITY_NAME LIKE ('"+sPersonName+"'))";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
						
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						
						String sTOT_CALC_AMT=(String)temp.get("SUM(UNIQUE(CALC_AMT))");
						System.out.println("TOT_CALC_AMT"+sTOT_CALC_AMT);
						
						sTotCalcAmt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						
						if (sTOT_CALC_AMT.trim().equalsIgnoreCase(sTotCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected TOT_CALC_AMT ->"+sTotCalcAmt+" Actual TOT_CALC_AMT is---->"+sTOT_CALC_AMT +" for entity_name = "+sPersonName);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected TOT_CALC_AMT ->"+sTotCalcAmt+" Actual TOT_CALC_AMT is---->"+sTOT_CALC_AMT +" for entity_name = "+sPersonName);
							sAllTxnStatus = "NOTPROCESS";
						}
						sStartingRow = sStartingRow + 1;
					}
				}	
				
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPricingDetailsFromDBForTotalAmount");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyPricingCalculationDetailsFromDB
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPricingCalculationDetailsFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPricingCalculationDetailsFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId, sQuery,sPrceCalcId,sCalcAmt,sProFactor,sDistAmt,sNoOfMonth;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId	=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT PRCE_CALC_ID,CALC_AMT,PRO_FACTOR,SM_DIST_AMT,NO_OF_MONTH FROM CI_PRCE_CALC_LN WHERE PRCE_CALC_ID IN (SELECT PRCE_CALC_ID FROM CI_PRCE_CALC WHERE BILLABLE_CHG_ID IN (SELECT UNIQUE(BILLABLE_CHG_ID) FROM CI_PRCE_CALC WHERE REPRC_ENTITY_ID = '"+sMembershipId+"')) ORDER BY PRCE_CALC_ID,CALC_AMT";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sPRCE_CALC_ID=(String)temp.get("PRCE_CALC_ID");
						sPRCE_CALC_ID = "GET"+sPRCE_CALC_ID;
						String sCALC_AMT=(String)temp.get("CALC_AMT");
						String sPRO_FACTOR=(String)temp.get("PRO_FACTOR");
						String sSM_DIST_AMT=(String)temp.get("SM_DIST_AMT");
						String sNO_OF_MONTH=(String)temp.get("NO_OF_MONTH");
								
						System.out.println("PRCE_CALC_ID "+sPRCE_CALC_ID);
						System.out.println("CALC_AMT "+sCALC_AMT);
						System.out.println("PRO_FACTOR "+sPRO_FACTOR);
						System.out.println("SM_DIST_AMT "+sSM_DIST_AMT);
						System.out.println("NO_OF_MONTH "+sNO_OF_MONTH);
						
						sPrceCalcId			=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sCalcAmt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sProFactor			=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sDistAmt			=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sNoOfMonth			=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
							
						
						if (sPRCE_CALC_ID.trim().substring(0,2).equalsIgnoreCase(sPrceCalcId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of PRCE_CALC_ID is : "+sPrceCalcId+" Actual value of PRCE_CALC_ID is---->"+sPRCE_CALC_ID);
							CF.FnWriteCellValue(sStartingRow, 1,sPRCE_CALC_ID, sSheetName, sWorkbook);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PRCE_CALC_ID is : "+sPrceCalcId+" Actual value of PRCE_CALC_ID is---->"+sPRCE_CALC_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sCALC_AMT.trim().equalsIgnoreCase(sCalcAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of CALC_AMT is : "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of CALC_AMT is : "+sCalcAmt+" Actual value of CALC_AMT is---->"+sCALC_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sPRO_FACTOR.trim().equalsIgnoreCase(sProFactor.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of PRO_FACTOR is : "+sProFactor+" Actual value of PRO_FACTOR is---->"+sPRO_FACTOR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of PRO_FACTOR is : "+sProFactor+" Actual value of PRO_FACTOR is---->"+sPRO_FACTOR);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSM_DIST_AMT.trim().equalsIgnoreCase(sDistAmt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of SM_DIST_AMT is : "+sDistAmt+" Actual value of SM_DIST_AMT is---->"+sSM_DIST_AMT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of SM_DIST_AMT is : "+sDistAmt+" Actual value of SM_DIST_AMT is---->"+sSM_DIST_AMT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sNO_OF_MONTH.trim().equalsIgnoreCase(sNoOfMonth.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of NO_OF_MONTH is : "+sNoOfMonth+" Actual value of NO_OF_MONTH is---->"+sNO_OF_MONTH);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of NO_OF_MONTH is : "+sNoOfMonth+" Actual value of NO_OF_MONTH is---->"+sNO_OF_MONTH);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						sStartingRow = sStartingRow + 1;
					}
						
				}
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPricingCalculationDetailsFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyExchangeRateTable
	'Function Description : Verification of Exchange rate table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	AkshataS
	'#########################################################################################################*/
	public void FnVerifyExchangeRateTable(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyExchangeRateTable");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sExpectedEXCHRATE,sQuery2,sEXCHRATE,sContractId,sFTTYPEFLG;
				
				BaseTest.sTestDescription ="Verification of Exchange Rate Table";
				
				sExpectedEXCHRATE 	=	CF.FnGetCellValue(iStartingRow,3,sSheetName, sWorkbook).toString().trim();
				sContractId 		=	CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
				sFTTYPEFLG			=	CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();
				
				sQuery2 = "select ext.exchrate  from ci_ft_gl_ext ext , ci_ft ft where ft.sa_id = '"+sContractId+"' and ft.ft_type_flg ='"+sFTTYPEFLG+"'and  ft.ft_id = ext.ft_id and ext.division_amt > 0";
				
				sEXCHRATE	=	FnGetDBColumnValue(sQuery2,"EXCHRATE",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				Thread.sleep(2000);
				if(sEXCHRATE.trim().equalsIgnoreCase(sExpectedEXCHRATE)) 
				{
					CF.FnTestCaseStatusReport("Pass","Exchange rate used for  is as expected- Expected: "+sExpectedEXCHRATE+"Actual: "+sEXCHRATE);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail","Exchange rate used foe adjustment1 is not as expected- Expected: "+sExpectedEXCHRATE+"Actual: "+sEXCHRATE);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyExchangeRateTable");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
			
		}
	}
	
	/*'#######################################################################################################
	'Function Name        : FnVerifyExchangeRateafterCancellation
	'Function Description : Verification of Exchange rate table
	'Input Parameters     : iStartingRow
	'Output Parameters    : 
	'Created By			  :	AkshataS
	'#########################################################################################################*/
	public void FnVerifyExchangeRateafterCancellation(int iStartingRow,String sSheetName, String sWorkbook ) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyExchangeRateafterCancellation");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
	
				BaseTest.sTestDescription ="Verification of exchange rate";
				String sContractID,sEXCHRATE;
				String sQuery1,sQuery2,sFTTYPEFLG,sRowCount;
	  
      
				sContractID		=	CF.FnGetCellValue(iStartingRow,4,sSheetName, sWorkbook).toString().trim();
				sFTTYPEFLG		=	CF.FnGetCellValue(iStartingRow,2,sSheetName, sWorkbook).toString().trim();

				//Get FT_ID on contract from CI_FT Table
				sQuery2		=	"select ext.exchrate  from ci_ft_gl_ext ext , ci_ft ft where ft.sa_id = '"+sContractID+"' and ft.ft_type_flg='"+sFTTYPEFLG+"' and ft.ft_id = ext.ft_id and ext.division_amt > 0";
				sEXCHRATE	=	FnGetDBColumnValue(sQuery2,"EXCHRATE",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				System.out.println("exchange rate============================"+sEXCHRATE);
				
				sQuery1	=	"select count(*) from ci_ft_gl_ext ext , ci_ft ft where ft.sa_id = '"+sContractID+"' and ft.ft_type_flg='"+sFTTYPEFLG+"' and  ft.ft_id = ext.ft_id and ext.division_amt > 0";
      				
				System.out.println("count "+sQuery1);
				Thread.sleep(3000);
    	
				sRowCount	=	(String)FnGetDBColumnValue(sQuery1,"count(*)",System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("count "+sRowCount);

		
				if(sEXCHRATE.trim().equalsIgnoreCase("NoValue") && sRowCount.equalsIgnoreCase("0")) 
					CF.FnTestCaseStatusReport("Pass","No entry present for FTType in CI_FT_GL_EXT table- Expected: NoValue Actual: "+sEXCHRATE+" Row count "+sRowCount);
		 
				else 
					CF.FnTestCaseStatusReport("Fail","Entry present for FTType in CI_FT_GL_EXT table- Expected: NoValue Actual: "+sEXCHRATE);
			}
      	}

    	catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyExchangeRateTable");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
			
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyMembershipPersonCharacteristicFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyMembershipPersonCharacteristicFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyMembershipPersonCharacteristicFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sExpCharacteristicType,sQuery,sExpValue,sExpEffectiveDate,sMembershipId;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				System.out.println("Membership ID is: "+sMembershipId);
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "select  CHAR_TYPE_CD ,CHAR_VAL,EFFDT from ci_membership_per_char  where Membership_id='"+sMembershipId+"' and CHAR_TYPE_CD='CMEMPBND'";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						System.out.println("Temp Value is: "+temp);
				      
						// To Get value of corresponding column
												
						String sActCharacteristicType=(String)temp.get("CHAR_TYPE_CD");
						String sActValue=(String)temp.get("CHAR_VAL");
						String sActEffectiveDate=(String)temp.get("EFFDT");

						System.out.println("sActCharacteristicType : "+sActCharacteristicType);
						System.out.println("sActValue : "+sActValue);
						System.out.println("sActEffectiveDate : "+sActEffectiveDate);
						
						sExpCharacteristicType	=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sExpValue = CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sExpEffectiveDate = CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();

						if (sActCharacteristicType.trim().equalsIgnoreCase(sExpCharacteristicType.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sExpCharacteristicType+" Actual value of Start Date is---->"+sActCharacteristicType);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sExpCharacteristicType+" Actual value of Start Date is---->"+sActCharacteristicType);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sActValue.trim().equalsIgnoreCase(sExpValue.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sExpValue+" Actual value of End Date is---->"+sActValue);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sExpValue+" Actual value of End Date is---->"+sActValue);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sActEffectiveDate.trim().contains(sExpEffectiveDate.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sActEffectiveDate+" Actual value of Bill Period Code is---->"+sExpEffectiveDate);
							sAllTxnStatus = "PROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyMembershipPersonCharacteristicFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnGetAutoPayIdFromDB
    'Function Description : This function gets the Alternate Bill Id from DB Table 
    'Input Parameters     : iStartingRow          -> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
    public String FnGetAutoPayIdFromDB(String sPayID, String sAccountNumber, String sExternalAccountId) throws Exception
    {
    	System.out.println("--FnGetAutoPayIdFromDB");
    	String sAutoPayID = "";
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			//Verify entry in table ci_bill table
    			sAutoPayID   = (String) FnGetDBColumnValue("SELECT ACCT_APAY_ID FROM CI_ACCT_APAY WHERE  ACCT_ID = (SELECT ACCT_ID FROM CI_ACCT_NBR WHERE ACCT_NBR_TYPE_CD = '"+sPayID+"' AND ACCT_NBR = '"+sAccountNumber+"') AND EXT_ACCT_ID = '"+sExternalAccountId+"'","ACCT_APAY_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
                                                                                                         
    			System.out.println("Deal Id is-->"+sAutoPayID);
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FnGetDealIdFromDB");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    	return sAutoPayID;
    }

    
    /*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBOStatusFromTable_CI_REPRC_ENTITY_DTL
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBOStatusFromTable_CI_REPRC_ENTITY_DTL(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBOStatusFromTable_CI_REPRC_ENTITY_DTL");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId = CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				String [] sBOStatusArr =  (String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM CI_REPRC_ENTITY_DTL WHERE REPRC_ENTITY_ID = '"+sMembershipId+"'","BO_STATUS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int sBOStatuslen = sBOStatusArr.length;
				System.out.println("sBOStatuslen = "+sBOStatuslen);
				for(int k=0;k<sBOStatuslen;k++)
				{	
					if(!sBOStatusArr[k].trim().equalsIgnoreCase("E"))
						CF.FnTestCaseStatusReport("Pass","BO Status after C1-REPC1 batch execution at record "+k+" : "+sBOStatusArr[k]);
					else
						CF.FnTestCaseStatusReport("Fail","BO Status after C1-REPC1 batch execution at record "+k+" "+sBOStatusArr[k]);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBOStatusFromTable_CI_REPRC_ENTITY_DTL");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBOStatusFromTable_CI_REPRC_REQ_DTL
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBOStatusFromTable_CI_REPRC_REQ_DTL(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBOStatusFromTable_CI_REPRC_REQ_DTL");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId = CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				String [] sBOStatusArr =  (String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM CI_REPRC_REQ_DTL WHERE REPRC_ENTITY_ID = '"+sMembershipId+"'","BO_STATUS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int sBOStatuslen = sBOStatusArr.length;
				for(int k=0;k<sBOStatuslen;k++)
				{	
					if(!sBOStatusArr[k].trim().equalsIgnoreCase("E"))
						CF.FnTestCaseStatusReport("Pass","BO Status after C1-REPC2 batch execution at record "+k+" : "+sBOStatusArr[k]);
					else
						CF.FnTestCaseStatusReport("Fail","BO Status after C1-REPC2 batch execution at record "+k+" "+sBOStatusArr[k]);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBOStatusFromTable_CI_REPRC_REQ_DTL");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBOStatusFromTable_CI_PRCE_CALC
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBOStatusFromTable_CI_PRCE_CALC(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBOStatusFromTable_CI_REPRC_REQ_DTL");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId = CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				String [] sBOStatusArr =  (String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM CI_PRCE_CALC WHERE REPRC_ENTITY_ID = '"+sMembershipId+"'","BO_STATUS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int sBOStatuslen = sBOStatusArr.length;
				for(int k=0;k<sBOStatuslen;k++)
				{	
					if(!sBOStatusArr[k].trim().equalsIgnoreCase("E"))
						CF.FnTestCaseStatusReport("Pass","BO Status after C1-FIBCR batch execution at record "+k+" : "+sBOStatusArr[k]);
					else
						CF.FnTestCaseStatusReport("Fail","BO Status after C1-FIBCR batch execution at record "+k+" "+sBOStatusArr[k]);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBOStatusFromTable_CI_PRCE_CALC");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetBOStatusInErrorFromTable_CI_REPRC_ENTITY_DTL
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBOStatusInErrorFromTable_CI_REPRC_ENTITY_DTL(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetBOStatusInErrorFromTable_CI_REPRC_ENTITY_DTL");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId = CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				String sBoStatusCd = CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				String [] sBOStatusArr =  (String[]) FnGetDBColumnValueInArray("SELECT BO_STATUS_CD FROM CI_REPRC_ENTITY_DTL WHERE REPRC_ENTITY_ID = '"+sMembershipId+"'","BO_STATUS_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int sBOStatuslen = sBOStatusArr.length;
				System.out.println("sBOStatuslen = "+sBOStatuslen);
				for(int k=0;k<sBOStatuslen;k++)
				{	
					if(sBOStatusArr[k].trim().equalsIgnoreCase(sBoStatusCd))
						CF.FnTestCaseStatusReport("Pass","BO Status after C1-REPC1 batch execution at record "+k+" : "+sBOStatusArr[k]);
					else
						CF.FnTestCaseStatusReport("Fail","BO Status after C1-REPC1 batch execution at record "+k+" "+sBOStatusArr[k]);
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetBOStatusFromTable_CI_REPRC_ENTITY_DTL");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyRelatedPricingBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyRelatedPricingBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyRelatedPricingBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty,sBillableChgStatus;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY, B.BILLABLE_CHG_STAT FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
						String sBILLABLE_CHG_STAT=(String)temp.get("BILLABLE_CHG_STAT");						
						
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						System.out.println("BILLABLE_CHG_STAT"+sBILLABLE_CHG_STAT);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sBillableChgStatus	=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBILLABLE_CHG_STAT.trim().equalsIgnoreCase(sBillableChgStatus.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Billable Charge Status is : "+sBillableChgStatus+" Actual value of Billable Charge Status is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Billable Charge Status is : "+sBillableChgStatus+" Actual value of Billable Charge Status is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyHolRequestFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyHolRequestFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyHolRequestFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty,sBillableChgStatus;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY, B.BILLABLE_CHG_STAT FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
						String sBILLABLE_CHG_STAT=(String)temp.get("BILLABLE_CHG_STAT");						
						
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						System.out.println("BILLABLE_CHG_STAT"+sBILLABLE_CHG_STAT);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						sBillableChgStatus	=	CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sBILLABLE_CHG_STAT.trim().equalsIgnoreCase(sBillableChgStatus.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Billable Charge Status is : "+sBillableChgStatus+" Actual value of Billable Charge Status is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Billable Charge Status is : "+sBillableChgStatus+" Actual value of Billable Charge Status is---->"+sBILLABLE_CHG_STAT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAlternateBillIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyAuditEventBillableChargesFromDB
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyAuditEventBillableChargesFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyAuditEventBillableChargesFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_STAT = '10' AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"')  ORDER BY B.START_DT,B.PRICEITEM_CD,SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							CF.FnWriteCellValue(sStartingRow, 1,sBILLABLE_CHG_ID, sSheetName, sWorkbook);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							CF.FnWriteCellValue(sStartingRow, 1,sBILLABLE_CHG_ID, sSheetName, sWorkbook);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyAuditEventBillableChargesFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetAccountIdFromDB
	'Function Description : This function gets the Account Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetAccountIdFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		String sAccountId = "NoValue";
		System.out.println("--FnGetAccountIdFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sPersonName;
						
				sPersonName		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				
				//Verify entry in table ci_bill table
				sAccountId =  FnGetDBColumnValue("SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"')","ACCT_ID",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				System.out.println("ACCT_ID ---------------" +sAccountId);
				CF.FnWriteCellValue(iStartingRow,2, sAccountId, sSheetName, sWorkbook);
				CF.FnTestCaseStatusReport("Pass","Account Id for " +sPersonName+ " = "+sAccountId);
				
			}
			
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetAccountIdFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
		
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyASOTransactionStatusSummary
	'Function Description : This function gets the Person Id from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyASOTransactionStatusSummary(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyASOTransactionStatusSummary");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAcctId, sTxnHeaderId, sBOStatus, sTnxCount, sQuery;
				String sAllTxnStatus = "NOTPROCESS";
				sAcctId				=	 CF.FnGetCellValue(iStartingRow-2,2, sSheetName, sWorkbook).toString().trim();
				sTxnHeaderId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT DISTINCT BO_STATUS_CD ,COUNT(*) FROM CI_TXN_DETAIL WHERE TXN_HEADER_ID = '"+sTxnHeaderId+"' AND ACCT_ID IN ("+sAcctId+") GROUP BY BO_STATUS_CD ORDER BY BO_STATUS_CD";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
						String sTXNCOUNT=(String)temp.get("COUNT(*)");						
						
						System.out.println("BO_STATUS_CD"+sBO_STATUS_CD);
						System.out.println("COUNT(*)"+sTXNCOUNT);
						
						sBOStatus		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sTnxCount		=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						
						if (sBO_STATUS_CD.trim().equalsIgnoreCase(sBOStatus.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of BO_STATUS_CD is : "+sBOStatus+" Actual value of BO_STATUS_CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of BO_STATUS_CD is : "+sBOStatus+" Actual value of BO_STATUS_CD is---->"+sBO_STATUS_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sTXNCOUNT.trim().equalsIgnoreCase(sTnxCount.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Transaction Count is : "+sTnxCount+" Actual value of Transaction Count is---->"+sTXNCOUNT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Transaction Count is : "+sTnxCount+" Actual value of Transaction Count is---->"+sTXNCOUNT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyASOTransactionStatusSummary");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOBillableChargesData
	'Function Description : To Verify transaction data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOBillableChargesData(int sStartRow,int sEndRow,int iCountRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOBillableChargesData");
	      
	      
		String sQuery, sQuery1;
		String sSBILLABLE_CHG_ID,sSSA_ID,sSBILL_AFTER_DT,sSPRICEITEM_CD,sSDESCR_ON_BILL,sSSTART_DT,sSEND_DT,sDATE;
		
		String sACCT_ID,sBS_RowCount, sCountFlg = "F";
		
		try 
		{
			sACCT_ID   		=        (String)CF.FnGetCellValue(iCountRow-2,2, sSheetName, sWorkbook).toString().trim();
			sDATE   		=        (String)CF.FnGetCellValue(iCountRow-2,3, sSheetName, sWorkbook).toString().trim();
			sBS_RowCount	=        (String)CF.FnGetCellValue(iCountRow,1, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM CI_BILL_CHG BC, CI_BSEG_CALC BS WHERE BC.BILLABLE_CHG_ID = BS.BILLABLE_CHG_ID AND BS.BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN ("+sACCT_ID+") AND WIN_START_DT = TO_DATE('"+sDATE+"', 'MM/DD/YYYY')))"; 
			sCountFlg = FnGetTxnRowCount(sBS_RowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	    	  
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					System.out.println("sStartingRow"+sStartingRow);
					System.out.println("sSheetName"+sSheetName);
					
					sQuery  = "SELECT BC.BILLABLE_CHG_ID,BC.SA_ID,TO_CHAR(BC.START_DT,'mm/dd/yyyy') AS START_DT,TO_CHAR(BC.END_DT,'mm/dd/yyyy') AS END_DT,BC.DESCR_ON_BILL,BC.PRICEITEM_CD,TO_CHAR(BC.BILL_AFTER_DT,'mm/dd/yyyy') AS BILL_AFTER_DT FROM CI_BILL_CHG BC, CI_BSEG_CALC BS WHERE BC.BILLABLE_CHG_ID = BS.BILLABLE_CHG_ID AND BS.BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN ("+sACCT_ID+") AND WIN_START_DT = TO_DATE('"+sDATE+"', 'MM/DD/YYYY'))) ORDER BY BILL_AFTER_DT, PRICEITEM_CD, DESCR_ON_BILL"; 
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
                  
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						
						for(int i=0;i<AL.size();i++)
						{    	
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
							
							// To Get value of corresponding column
							
							String sBILLABLE_CHG_ID =(String)temp.get("BILLABLE_CHG_ID");
							sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
							String sSA_ID =(String)temp.get("SA_ID");
							sSA_ID = "GET"+sSA_ID;
							String sSTART_DT =(String)temp.get("START_DT");
							String sEND_DT =(String)temp.get("END_DT");
							String sDESCR_ON_BILL =(String)temp.get("DESCR_ON_BILL");
							String sPRICEITEM_CD =(String)temp.get("PRICEITEM_CD");
							String sBILL_AFTER_DT =(String)temp.get("BILL_AFTER_DT");
							if (sBILL_AFTER_DT.equalsIgnoreCase("NULL"))
		                    {
								sBILL_AFTER_DT = "NOVAL";
		                    }
		                    							
							System.out.println("DB Data->"+sBILLABLE_CHG_ID+sSA_ID+sSTART_DT+sEND_DT+sDESCR_ON_BILL+sPRICEITEM_CD+sBILL_AFTER_DT);
							
							// Getting data from data sheet
							sSBILLABLE_CHG_ID		=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
							sSSA_ID					=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
							sSSTART_DT				=  	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
							sSEND_DT				=   (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
							sSDESCR_ON_BILL			=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
							sSPRICEITEM_CD			=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
							sSBILL_AFTER_DT			=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
							
							
								// Data sheet data
                             
                        	System.out.println("Datasheet Data->"+sSPRICEITEM_CD+sSDESCR_ON_BILL+sSBILL_AFTER_DT+sSSTART_DT+sSEND_DT);
                        	
                        	if(sBILLABLE_CHG_ID.substring(0,2).equalsIgnoreCase(sSBILLABLE_CHG_ID.substring(0,2)))
                        	{
                        		CF.FnWriteCellValue(sStartingRow, 1, sBILLABLE_CHG_ID, sSheetName, sWorkbook);
    	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Billable Charge ID is -> " + sSBILLABLE_CHG_ID + " Actual value of Billable Charge ID is---->"+sBILLABLE_CHG_ID);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Billable Charge ID is -> " + sSBILLABLE_CHG_ID + " Actual value of Billable Charge ID is---->"+sBILLABLE_CHG_ID);
                        	}
                        	if(sSA_ID.substring(0,2).equalsIgnoreCase(sSSA_ID.substring(0,2)))
                        	{
                        		CF.FnWriteCellValue(sStartingRow, 2, sSA_ID, sSheetName, sWorkbook);
    	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Contract ID is -> " + sSSA_ID + " Actual value of Contract ID is---->"+sSA_ID);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Contract ID is -> " + sSSA_ID + " Actual value of Contract ID is---->"+sSA_ID);
                        	}
                        	
                        	if (sSTART_DT.trim().equalsIgnoreCase(sSSTART_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	
                        	if (sEND_DT.trim().equalsIgnoreCase(sSEND_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> END_DT -> Expected->" + sSEND_DT + "  Actual->"+sEND_DT);
                        	}
                        	
                        	                        	
                        	if (sPRICEITEM_CD.trim().equalsIgnoreCase(sSPRICEITEM_CD.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	
                        	if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sSDESCR_ON_BILL.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	
                        	if (sBILL_AFTER_DT.trim().equalsIgnoreCase(sSBILL_AFTER_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> BILL_AFTER_DT -> Expected->" + sSBILL_AFTER_DT + "  Actual->"+sBILL_AFTER_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> BILL_AFTER_DT -> Expected->" + sSBILL_AFTER_DT + "  Actual->"+sBILL_AFTER_DT);
                        	}
                        	
                        	
                        	
                        	sStartingRow = sStartingRow + 1;
                         }
					}     
					              
				} // end of for loop k
			}//if sCountFlg = T ends      
			else
				CF.FnTestCaseStatusReport("Fail", "TFM Data verification count mismatch"); 
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOBillableCharges
	'Function Description : To Verify transaction data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOBillableCharges(int sStartRow,int sEndRow,int iCountRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOBillableChargesData");
	      
	      
		String sQuery, sQuery1;
		String sSBILLABLE_CHG_ID,sSSA_ID,sSBILL_AFTER_DT,sSPRICEITEM_CD,sSDESCR_ON_BILL,sSSTART_DT,sSEND_DT;
		
		String sACCT_ID,sBS_RowCount, sCountFlg = "F";
		
		try 
		{
			sACCT_ID   		=        (String)CF.FnGetCellValue(iCountRow-2,2, sSheetName, sWorkbook).toString().trim();
			sBS_RowCount	=        (String)CF.FnGetCellValue(iCountRow,1, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM CI_BILL_CHG WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID IN ("+sACCT_ID+"))"; 
			sCountFlg = FnGetTxnRowCount(sBS_RowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	    	  
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					System.out.println("sStartingRow"+sStartingRow);
					System.out.println("sSheetName"+sSheetName);
					
					sQuery  = "SELECT BILLABLE_CHG_ID,SA_ID,TO_CHAR(START_DT,'mm/dd/yyyy') AS START_DT,TO_CHAR(END_DT,'mm/dd/yyyy') AS END_DT,DESCR_ON_BILL,PRICEITEM_CD,TO_CHAR(BILL_AFTER_DT,'mm/dd/yyyy') AS BILL_AFTER_DT FROM CI_BILL_CHG WHERE SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID IN ("+sACCT_ID+")) ORDER BY BILL_AFTER_DT, PRICEITEM_CD, DESCR_ON_BILL"; 
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
                  
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						
						for(int i=0;i<AL.size();i++)
						{    	
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
							
							// To Get value of corresponding column
							
							String sBILLABLE_CHG_ID =(String)temp.get("BILLABLE_CHG_ID");
							sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
							String sSA_ID =(String)temp.get("SA_ID");
							sSA_ID = "GET"+sSA_ID;
							String sSTART_DT =(String)temp.get("START_DT");
							String sEND_DT =(String)temp.get("END_DT");
							String sDESCR_ON_BILL =(String)temp.get("DESCR_ON_BILL");
							String sPRICEITEM_CD =(String)temp.get("PRICEITEM_CD");
							String sBILL_AFTER_DT =(String)temp.get("BILL_AFTER_DT");
							if (sBILL_AFTER_DT.equalsIgnoreCase("NULL"))
		                    {
								sBILL_AFTER_DT = "NOVAL";
		                    }
		                    							
							System.out.println("DB Data->"+sBILLABLE_CHG_ID+sSA_ID+sSTART_DT+sEND_DT+sDESCR_ON_BILL+sPRICEITEM_CD+sBILL_AFTER_DT);
							
							// Getting data from data sheet
							sSBILLABLE_CHG_ID		=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
							sSSA_ID					=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
							sSSTART_DT				=  	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
							sSEND_DT				=   (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
							sSDESCR_ON_BILL			=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
							sSPRICEITEM_CD			=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
							sSBILL_AFTER_DT			=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
							
							
								// Data sheet data
                             
                        	System.out.println("Datasheet Data->"+sSPRICEITEM_CD+sSDESCR_ON_BILL+sSBILL_AFTER_DT+sSSTART_DT+sSEND_DT);
                        	
                        	if(sBILLABLE_CHG_ID.substring(0,2).equalsIgnoreCase(sSBILLABLE_CHG_ID.substring(0,2)))
                        	{
                        		CF.FnWriteCellValue(sStartingRow, 1, sBILLABLE_CHG_ID, sSheetName, sWorkbook);
    	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Billable Charge ID is -> " + sSBILLABLE_CHG_ID + " Actual value of Billable Charge ID is---->"+sBILLABLE_CHG_ID);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Billable Charge ID is -> " + sSBILLABLE_CHG_ID + " Actual value of Billable Charge ID is---->"+sBILLABLE_CHG_ID);
                        	}
                        	if(sSA_ID.substring(0,2).equalsIgnoreCase(sSSA_ID.substring(0,2)))
                        	{
                        		CF.FnWriteCellValue(sStartingRow, 2, sSA_ID, sSheetName, sWorkbook);
    	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Contract ID is -> " + sSSA_ID + " Actual value of Contract ID is---->"+sSA_ID);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Contract ID is -> " + sSSA_ID + " Actual value of Contract ID is---->"+sSA_ID);
                        	}
                        	
                        	if (sSTART_DT.trim().equalsIgnoreCase(sSSTART_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	
                        	if (sEND_DT.trim().equalsIgnoreCase(sSEND_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> END_DT -> Expected->" + sSEND_DT + "  Actual->"+sEND_DT);
                        	}
                        	
                        	                        	
                        	if (sPRICEITEM_CD.trim().equalsIgnoreCase(sSPRICEITEM_CD.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	
                        	if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sSDESCR_ON_BILL.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	
                        	if (sBILL_AFTER_DT.trim().equalsIgnoreCase(sSBILL_AFTER_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> BILL_AFTER_DT -> Expected->" + sSBILL_AFTER_DT + "  Actual->"+sBILL_AFTER_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> BILL_AFTER_DT -> Expected->" + sSBILL_AFTER_DT + "  Actual->"+sBILL_AFTER_DT);
                        	}
                        	
                        	
                        	
                        	sStartingRow = sStartingRow + 1;
                         }
					}     
					              
				} // end of for loop k
			}//if sCountFlg = T ends      
			else
				CF.FnTestCaseStatusReport("Fail", "TFM Data verification count mismatch"); 
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOSSLDetails
	'Function Description : To Verify SSL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                     : sEndRow    -> End row number for SSL data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOSSLDetails(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOSSLDetails");
		
		String sSACCUM_GRP_ID,sSwin_start_dt,sSmember_subscriber_id,sSssl_cul_agg_amt,sSssl_credits,sSbillable_chg_id,sSACCT_ID,sSssl_credits_asl,sSssl_limit,sSssl_max_payout_limit,sSassl_limit,sSssl_cul_credits,sSprev_billed_amt;
		String sQuery,sQuery1;
		String sACCNT_ID,sTXN_RowCount,sCountFlg;
		int j = 0;
		
		try 
		{
			sACCNT_ID   		=		(String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
			sTXN_RowCount   	=		(String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
			sSwin_start_dt		=		(String)CF.FnGetCellValue(iCountRow ,3, sSheetName, sWorkbook).toString().trim();
			
			sQuery1 = "SELECT COUNT(*) FROM CI_ACCUM_SSL_AMT SSLACCUM WHERE SSLACCUM.ACCT_ID IN('"+sACCNT_ID+"') AND WIN_START_DT  = to_date('"+sSwin_start_dt+"','mm/dd/yyyy')" ;
			
			System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T"))
	  	  	{
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	  	  		{
	  	  			j = sStartingRow;  			
	  	  			System.out.println("sStartingRow"+sStartingRow);
	  	  			System.out.println("sSheetName"+sSheetName);
	  	  			
	  	  			sSwin_start_dt				=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	  	  			sSmember_subscriber_id		=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	  	  			sSACCT_ID					=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	  	  			sSssl_limit					=	(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	  	  			
	  	  			sQuery= " SELECT ACCUM_GRP_ID, to_char(WIN_START_DT,'mm/dd/yyyy') as WIN_START_DT, MEMBER_SUBSCRIBER_ID, SSL_CUL_AGG_AMT, SSL_CREDITS, BILLABLE_CHG_ID, ACCT_ID, SSL_CREDITS_ASL, SSL_LIMIT, SSL_MAX_PAYOUT_LIMIT, ASSL_LIMIT, SSL_CUL_CREDITS, PREV_BILLED_AMT "+
		  	  			" FROM CI_ACCUM_SSL_AMT"+
		  	  			" WHERE ACCT_ID           ='"+sSACCT_ID+"' "+
		  	  			" AND MEMBER_SUBSCRIBER_ID='"+sSmember_subscriber_id+"' "+
		  	  			" AND WIN_START_DT        = to_date('"+sSwin_start_dt+"','mm/dd/yyyy') "+
		  	  			" AND SSL_LIMIT = '"+sSssl_limit+"'"; 
	  	  		
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
		  	  			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
						sACCUM_GRP_ID = "GET"+sACCUM_GRP_ID;
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String smember_subscriber_id =(String)temp.get("MEMBER_SUBSCRIBER_ID");
	                    String sssl_cul_agg_amt =(String)temp.get("SSL_CUL_AGG_AMT");
	                    String sssl_credits =(String)temp.get("SSL_CREDITS");
	                    String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String sssl_credits_asl =(String)temp.get("SSL_CREDITS_ASL");
	                    String sssl_limit =(String)temp.get("SSL_LIMIT");
	                    String sssl_max_payout_limit =(String)temp.get("SSL_MAX_PAYOUT_LIMIT");
	                    String sassl_limit =(String)temp.get("ASSL_LIMIT");
	                    String sssl_cul_credits =(String)temp.get("SSL_CUL_CREDITS");
	                    String sprev_billed_amt =(String)temp.get("PREV_BILLED_AMT");
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID   =         (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt =           (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSmember_subscriber_id =   (String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_agg_amt =        (String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits =            (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id =        (String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID =                (String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sSssl_credits_asl =		   (String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sSssl_limit =              (String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sSssl_max_payout_limit =   (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSassl_limit = 			   (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sSssl_cul_credits = 	   (String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt =        (String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	                    
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSwin_start_dt+sSmember_subscriber_id+sSssl_cul_agg_amt+sSssl_credits+sSbillable_chg_id+sSACCT_ID+sSssl_credits_asl+sSssl_limit+sSssl_max_payout_limit+sSassl_limit+sSssl_cul_credits+sSprev_billed_amt);
	                 
	                    if (sACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSACCUM_GRP_ID.trim().substring(0,2)))
	                    {
	                    	CF.FnWriteCellValue(j, 1, sACCUM_GRP_ID, sSheetName, sWorkbook);
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                          
	                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	if (smember_subscriber_id.trim().equalsIgnoreCase(sSmember_subscriber_id.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Member Subscriber Id -> Expected->" + sSmember_subscriber_id + "  Actual->"+smember_subscriber_id);
	                    	}
	                    	if (sssl_cul_agg_amt.trim().equalsIgnoreCase(sSssl_cul_agg_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Aggregate Amount -> Expected->" + sSssl_cul_agg_amt + "  Actual->"+sssl_cul_agg_amt);
	                    	}
	                    	if (sssl_credits.trim().equalsIgnoreCase(sSssl_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits -> Expected->" + sSssl_credits + "  Actual->"+sssl_credits);
	                    	}
	                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	                    	}
	                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	if (sssl_credits_asl.trim().equalsIgnoreCase(sSssl_credits_asl.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Credits for ASL Calculation -> Expected->" + sSssl_credits_asl + "  Actual->"+sssl_credits_asl);
	                    	}
	                    	if (sssl_limit.trim().equalsIgnoreCase(sSssl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Limit -> Expected->" + sSssl_limit + "  Actual->"+sssl_limit);
	                    	}
	                    	if (sssl_max_payout_limit.trim().equalsIgnoreCase(sSssl_max_payout_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Payout Limit -> Expected->" + sSssl_max_payout_limit + "  Actual->"+sssl_max_payout_limit);
	                    	}
                          
	                    	if (sassl_limit.trim().equalsIgnoreCase(sSassl_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Aggregate Specific Stop-Loss Limit -> Expected->" + sSassl_limit + "  Actual->"+sassl_limit);
	                    	}
                                                              
	                    	if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cul Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	                    	}
	                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previously Billed Amount   -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previously Billed Amount  -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                    	}
	                    
	  	  			}
	  	  			
	  	  		}
	  	  	}
		}
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOASLDetails
	'Function Description : To Verify ASL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                               : sEndRow    -> End row number for SSL data Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                               : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOASLDetails(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOASLDetails");
		
		String sSACCUM_GRP_ID,sSwin_start_dt,sSasl_cul_agg_amt,sSasl_cul_calc_limit,sSasl_cul_min_limit,sSssl_cul_credits,sSasl_max_payout_limit,sSasl_mth_payment_limit,sSbillable_chg_id,sSACCT_ID,sSasl_cul_calc_limit_pct,sSasl_limit,sSasl_cul__mth_payment_limit,sSasl_credits,sSprev_billed_amt;
	    String sQuery;
	    
	    int j = 0;
	    try 
	    {
	    	for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    	{
	    		j = sStartingRow;
	    		
	    		System.out.println("sStartingRow"+sStartingRow);
	    		System.out.println("sSheetName"+sSheetName);
	    		
	    		sSACCUM_GRP_ID   = (String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    		sSwin_start_dt  = (String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    		
	    		sSACCT_ID	 = (String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    		
	    		sQuery="SELECT ACCUM_GRP_ID, TO_CHAR(WIN_START_DT,'MM/DD/YYYY') AS WIN_START_DT, ASL_CUL_AGG_AMT, ASL_CUL_CALC_LIMIT, ASL_CUL_MIN_LIMIT, SSL_CUL_CREDITS, ASL_MAX_PAYOUT_LIMIT, ASL_MTH_PAYMENT_LIMIT, BILLABLE_CHG_ID, ACCT_ID, ASL_CUL_CALC_LIMIT_PCT, ASL_LIMIT, ASL_CUL_MTH_PAYMENT_LIMIT, ASL_CREDITS, PREV_BILLED_AMT "+
	    				" FROM CI_ACCUM_ASL_AMT "+
	    				" WHERE ACCT_ID ='"+sSACCT_ID+"' "+
	    				" AND WIN_START_DT        = TO_DATE('"+sSwin_start_dt+"','MM/DD/YYYY') ";
	    		
	    		ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    		{
	    			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    			
	    			for(int i=0;i<AL.size();i++)
	    			{
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    				
	    				// To Get value of corresponding column
	    				String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	    				sACCUM_GRP_ID = "GET"+sACCUM_GRP_ID;
	    				String swin_start_dt =(String)temp.get("WIN_START_DT");
	    				String sasl_cul_agg_amt =(String)temp.get("ASL_CUL_AGG_AMT");
	    				String sasl_cul_calc_limit =(String)temp.get("ASL_CUL_CALC_LIMIT");
	    				String sasl_cul_min_limit =(String)temp.get("ASL_CUL_MIN_LIMIT");
	    				String sssl_cul_credits =(String)temp.get("SSL_CUL_CREDITS");
	    				String sasl_max_payout_limit =(String)temp.get("ASL_MAX_PAYOUT_LIMIT");
	    				String sasl_mth_payment_limit =(String)temp.get("ASL_MTH_PAYMENT_LIMIT");
	    				if(sasl_mth_payment_limit=="NULL")
	                    {
	    					sasl_mth_payment_limit="NOVAL";
	                    }
	    				String sbillable_chg_id =(String)temp.get("BILLABLE_CHG_ID");
	    				if (sbillable_chg_id.equalsIgnoreCase("          "))
	    				{
	    					sbillable_chg_id = "NOVAL";
	    				}
	    				else
	    				{
	    					sbillable_chg_id = "GET"+sbillable_chg_id;
	    				}
	    				String sACCT_ID =(String)temp.get("ACCT_ID");
	    				String sasl_cul_calc_limit_pct =(String)temp.get("ASL_CUL_CALC_LIMIT_PCT");
	    				String sasl_limit =(String)temp.get("ASL_LIMIT");
	    				
	    				String sasl_cul__mth_payment_limit =(String)temp.get("ASL_CUL_MTH_PAYMENT_LIMIT");
	    				String sasl_credits =(String)temp.get("ASL_CREDITS");
	    				String sprev_billed_amt =(String)temp.get("PREV_BILLED_AMT");
	    				
	    				
	    				System.out.println("DB Data->"+sACCUM_GRP_ID+swin_start_dt+sasl_cul_agg_amt+sasl_cul_calc_limit+sasl_cul_min_limit+sssl_cul_credits+sasl_max_payout_limit+sasl_mth_payment_limit+sbillable_chg_id+sACCT_ID+sasl_cul_calc_limit_pct+sasl_limit+sasl_cul__mth_payment_limit+sasl_credits+sprev_billed_amt);
	    				
	    				// Getting data from data sheet
	    				
	    				sSACCUM_GRP_ID   =         		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    				sSwin_start_dt =           		(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_agg_amt =         	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_calc_limit =      	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_min_limit =      		(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	    				sSssl_cul_credits =         	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	    				sSasl_max_payout_limit =    	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	    				sSasl_mth_payment_limit =   	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	    				sSbillable_chg_id =        		(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	    				sSACCT_ID =                		(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul_calc_limit_pct = 	    (String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	    				sSasl_limit =   			 	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	    				sSasl_cul__mth_payment_limit = 	(String)CF.FnGetCellValue(sStartingRow ,13, sSheetName, sWorkbook).toString().trim();
	    				sSasl_credits = 	   			(String)CF.FnGetCellValue(sStartingRow ,14, sSheetName, sWorkbook).toString().trim();
	    				sSprev_billed_amt =        		(String)CF.FnGetCellValue(sStartingRow ,15, sSheetName, sWorkbook).toString().trim();
	    				
	    				System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSwin_start_dt+sSasl_cul_agg_amt+sSasl_cul_calc_limit+sSasl_cul_min_limit+sSssl_cul_credits+sSasl_max_payout_limit+sSasl_mth_payment_limit+sSbillable_chg_id+sSACCT_ID+sSasl_cul_calc_limit_pct+sSasl_limit+sSasl_cul__mth_payment_limit+sSasl_credits+sSprev_billed_amt);
	    				
	    				if (sACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSACCUM_GRP_ID.trim().substring(0,2)))
	    				{
	    					CF.FnWriteCellValue(sStartingRow, 1, sACCUM_GRP_ID, sSheetName, sWorkbook);
	    					CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    					
	    					if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	    					}
	    					if (sasl_cul_agg_amt.trim().equalsIgnoreCase(sSasl_cul_agg_amt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Aggregate Amount -> Expected->" + sSasl_cul_agg_amt + "  Actual->"+sasl_cul_agg_amt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Aggregate Amount -> Expected->" + sSasl_cul_agg_amt + "  Actual->"+sasl_cul_agg_amt);
	    					}
	    					if (sasl_cul_calc_limit.trim().equalsIgnoreCase(sSasl_cul_calc_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Calculated Limit -> Expected->" + sSasl_cul_calc_limit + "  Actual->"+sasl_cul_calc_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Calculated Limit -> Expected->" + sSasl_cul_calc_limit + "  Actual->"+sasl_cul_calc_limit);
	    					}
	    					if (sasl_cul_min_limit.trim().equalsIgnoreCase(sSasl_cul_min_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cul Minimum Limit -> Expected->" + sSasl_cul_min_limit + "  Actual->"+sasl_cul_min_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cul Minimum Limit -> Expected->" + sSasl_cul_min_limit + "  Actual->"+sasl_cul_min_limit);
	    					}
	    					
	    					if (sssl_cul_credits.trim().equalsIgnoreCase(sSssl_cul_credits.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> SSL Cumulative Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> SSL Cumulative Credits -> Expected->" + sSssl_cul_credits + "  Actual->"+sssl_cul_credits);
	    					}
	    					
	    					
	    					if (sasl_max_payout_limit.trim().equalsIgnoreCase(sSasl_max_payout_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Maximum Payout Limit -> Expected->" + sSasl_max_payout_limit + "  Actual->"+sasl_max_payout_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Maximum Payout Limit -> Expected->" + sSasl_max_payout_limit + "  Actual->"+sasl_max_payout_limit);
	    					}
	    					if (sasl_mth_payment_limit.trim().equalsIgnoreCase(sSasl_mth_payment_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Method Payment Limit -> Expected->" + sSasl_mth_payment_limit + "  Actual->"+sasl_mth_payment_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" ->ASL Method Payment Limit -> Expected->" + sSasl_mth_payment_limit + "  Actual->"+sasl_mth_payment_limit);
	    					}
	    					if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
	    					}
	    					if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	    					{	
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	    					}
	    					
	    					if (sasl_cul_calc_limit_pct.trim().equalsIgnoreCase(sSasl_cul_calc_limit_pct.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cumulative Calculated Limit Percentage -> Expected->" + sSasl_cul_calc_limit_pct + "  Actual->"+sasl_cul_calc_limit_pct);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cumulative Calculated Limit Percentage -> Expected->" + sSasl_cul_calc_limit_pct + "  Actual->"+sasl_cul_calc_limit_pct);
	    					}
	    					
	    					if (sasl_limit.trim().equalsIgnoreCase(sSasl_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Limit -> Expected->" + sSasl_limit + "  Actual->"+sasl_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Limit -> Expected->" + sSasl_limit + "  Actual->"+sasl_limit);
	    					}
	    					if (sasl_cul__mth_payment_limit.trim().equalsIgnoreCase(sSasl_cul__mth_payment_limit.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Cumulative Monthly Payment Limit   -> Expected->" + sSasl_cul__mth_payment_limit + "  Actual->"+sasl_cul__mth_payment_limit);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Cumulative Monthly Payment Limit  -> Expected->" + sSasl_cul__mth_payment_limit + "  Actual->"+sasl_cul__mth_payment_limit);
	    					}
	    					if (sasl_credits.trim().equalsIgnoreCase(sSasl_credits.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> ASL Credits   -> Expected->" + sSasl_credits + "  Actual->"+sasl_credits);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> ASL Credits  -> Expected->" + sSasl_credits + "  Actual->"+sasl_credits);
	    					}
	    					if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previously Billed Amount   -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previously Billed Amount  -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	    					}
	    					sStartingRow = sStartingRow + 1;
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    				}
	    			}
	    		}
	    	}
	    } catch (Exception e) 
	    {
	    	System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    }
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASODiscountAmountData
	'Function Description : To Verify DA data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for LF data Verification section in data sheet
	'                     : sEndRow    -> End row number for LF data Verification section in data sheet
	'					  : iCountRow  -> Starting Row to be used to take the detials of the rowCount in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASODiscountAmountData(int sStartRow, int sEndRow, int iCountRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASODiscountAmountData");
		
	    String sSACCUM_GRP_ID,sSACCT_ID,sSwin_start_dt,sSbillable_chg_id,sScredit_billable_chg_id,sSdisc_cul_agg_amt;
	    String sScul_min_enr_limit,sScul_max_enr_limit,sScul_min_flat_limit,sScul_max_flat_limit,sSprev_billed_amt,sScredit_prev_billed_amt;
	    String sQuery,sQuery1;
	    String sACCNT_ID, sDATE, sTXN_RowCount, sCountFlg = "F";
	    int j = 0;
	    
		try 
		{
			sACCNT_ID   		=        (String)CF.FnGetCellValue(iCountRow ,1, sSheetName, sWorkbook).toString().trim();
	    	sTXN_RowCount   	=        (String)CF.FnGetCellValue(iCountRow ,2, sSheetName, sWorkbook).toString().trim();
	    	sDATE		   		=        (String)CF.FnGetCellValue(iCountRow ,3, sSheetName, sWorkbook).toString().trim();
	    	
	    	sQuery1 = "SELECT COUNT(*) FROM C1_ACCUM_DISC_ARG_AMT accumdaamt, C1_ACCUM_GRP_DA accumdgrp" + 
	    			"  WHERE accumdaamt.ACCT_ID IN ("+sACCNT_ID+") AND WIN_START_DT = TO_DATE('"+sDATE+"','MM/DD/YYYY') " + 
	    			"  AND accumdaamt.accum_grp_id = accumdgrp.accum_grp_id"; 
	    	
	    	System.out.println(sQuery1);
	  	  	
	    	sCountFlg = (String)FnGetTxnRowCount(sTXN_RowCount,sQuery1);
	  	  
	    	System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	  	  
	  	  	if(sCountFlg.equalsIgnoreCase("T"))
	  	  	{
	  	  		
	  	  		for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
  	  			{
  	  				j = sStartingRow;  			
  	  				System.out.println("sStartingRow"+sStartingRow);
	  				System.out.println("sSheetName"+sSheetName);
		  			sSACCT_ID			=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
		  			sSdisc_cul_agg_amt	=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
		  			sSwin_start_dt		=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
		  			sScul_min_flat_limit=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	  	  			sQuery= "SELECT accumdaamt.ACCUM_GRP_ID," + 
	  	  					"       accumdaamt.ACCT_ID," + 
	  	  					"       TO_CHAR(accumdaamt.WIN_START_DT, 'MM/DD/YYYY') AS WIN_START_DT," + 
	  	  					"       accumdaamt.DISC_CUL_AGG_AMT," + 
	  	  					"       accumdaamt.BILLABLE_CHG_ID," + 
	  	  					"       accumdaamt.CUL_MIN_ENR_LIMIT," + 
	  	  					"       accumdaamt.CUL_MAX_ENR_LIMIT," + 
	  	  					"       accumdaamt.CUL_MIN_FLAT_LIMIT," + 
	  	  					"       accumdaamt.CUL_MAX_FLAT_LIMIT," + 
	  	  					"       accumdaamt.CREDIT_BILLABLE_CHG_ID," + 
	  	  					"       accumdaamt.PREV_BILLED_AMT," + 
	  	  					"       accumdaamt.CREDIT_PREV_BILLED_AMT" + 
	  	  					"  FROM C1_ACCUM_GRP_DA accumdgrp, C1_ACCUM_DISC_ARG_AMT accumdaamt" + 
	  	  					"  WHERE accumdaamt.ACCT_ID = '"+sSACCT_ID+"'" +
	  	  					"	AND accumdaamt.DISC_CUL_AGG_AMT = '"+sSdisc_cul_agg_amt+"'"+
	  	  					"	AND TO_CHAR(accumdaamt.WIN_START_DT, 'MM/DD/YYYY') ='"+sSwin_start_dt+"'"+
	  	  					"	AND accumdaamt.CUL_MIN_FLAT_LIMIT = '"+sScul_min_flat_limit+"'"+
	  	  					"  AND accumdaamt.ACCUM_GRP_ID = accumdgrp.ACCUM_GRP_ID"+
	  	  					"  ORDER BY DISC_CUL_AGG_AMT";
	  	  		
	  	  			
	  	  			ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	  	  			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	  	  			{
	  	  				java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
						
						// To Get value of corresponding column
						String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
						sACCUM_GRP_ID= "GET"+sACCUM_GRP_ID;
	                    String sACCT_ID =(String)temp.get("ACCT_ID");
	                    String swin_start_dt =(String)temp.get("WIN_START_DT");
	                    String sdisc_cul_agg_amt =(String)temp.get("DISC_CUL_AGG_AMT");
	                    String scul_min_enr_limit=(String)temp.get("CUL_MIN_ENR_LIMIT");
	                    String scul_max_enr_limit=(String)temp.get("CUL_MAX_ENR_LIMIT");
	                    String scul_min_flat_limit = (String)temp.get("CUL_MIN_FLAT_LIMIT");
	                    String scul_max_flat_limit = (String)temp.get("CUL_MAX_FLAT_LIMIT");
	                    String sprev_billed_amt = (String)temp.get("PREV_BILLED_AMT");
	                    String scredit_prev_billed_amt = (String)temp.get("CREDIT_PREV_BILLED_AMT");
	                    String sbillable_chg_id = (String)temp.get("BILLABLE_CHG_ID");
	                    if (sbillable_chg_id.equalsIgnoreCase("          "))
	                    {
	                    	sbillable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	sbillable_chg_id = "GET"+sbillable_chg_id;
	                    }
	                    String scredit_billable_chg_id = (String)temp.get("CREDIT_BILLABLE_CHG_ID");
	                    if (scredit_billable_chg_id.equalsIgnoreCase("            "))
	                    {
	                    	scredit_billable_chg_id = "NOVAL";
	                    }
	                    else
	                    {
	                    	scredit_billable_chg_id = "GET"+scredit_billable_chg_id;
	                    }
	                   
	                    System.out.println("DB Data->"+sACCUM_GRP_ID+sACCT_ID+swin_start_dt+sdisc_cul_agg_amt+scul_min_enr_limit+scul_max_enr_limit+scul_min_flat_limit+scul_max_flat_limit);
	                    System.out.println("DB Data->"+sprev_billed_amt+scredit_prev_billed_amt+sbillable_chg_id+scredit_billable_chg_id);
	                    
	                    // Getting data from data sheet
	                    sSACCUM_GRP_ID					=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	                    sSwin_start_dt					=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	                    sSdisc_cul_agg_amt				=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id				=	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	                    sSACCT_ID						=	(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	                    sScul_min_enr_limit				=	(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	                    sScul_max_enr_limit				=	(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	                    sScul_min_flat_limit			=	(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	                    sScul_max_flat_limit			=	(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	                    sScredit_billable_chg_id		=	(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	                    sSprev_billed_amt				=	(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	                    sScredit_prev_billed_amt		=	(String)CF.FnGetCellValue(sStartingRow ,12, sSheetName, sWorkbook).toString().trim();
	                    sSbillable_chg_id = "GET"+sSbillable_chg_id;
	                       
	                    System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSACCT_ID+sSwin_start_dt+sSbillable_chg_id+sScredit_billable_chg_id+sSdisc_cul_agg_amt);
	                    System.out.println("Sheet Data->"+sScul_min_enr_limit+sScul_max_enr_limit+sScul_min_flat_limit+sSprev_billed_amt+sScredit_prev_billed_amt);
	                      
	                    if (sACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSACCUM_GRP_ID.trim().substring(0,2)))
	                    {
	                    	CF.FnWriteCellValue(j, 1, sACCUM_GRP_ID, sSheetName, sWorkbook);
	                    	CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
                          
	                    	if (sACCT_ID.trim().equalsIgnoreCase(sSACCT_ID.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Account ID -> Expected->" + sSACCT_ID + "  Actual->"+sACCT_ID);
	                    	}
	                    	
	                    	if (swin_start_dt.trim().equalsIgnoreCase(sSwin_start_dt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Run Date  -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Run Date -> Expected->" + sSwin_start_dt + "  Actual->"+swin_start_dt);
	                    	}
//	                    	if (sbillable_chg_id.trim().substring(0,2).equalsIgnoreCase(sSbillable_chg_id.trim().substring(0,2)))
//	                    	{
//	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
//	                    	}
//	                    	else
//	                    	{
//	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Billable Charge Id -> Expected->" + sSbillable_chg_id + "  Actual->"+sbillable_chg_id);
//	                    	}
	                    	if (scredit_billable_chg_id.trim().substring(0,2).equalsIgnoreCase(sScredit_billable_chg_id.trim().substring(0,2)))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sScredit_billable_chg_id + "  Actual->"+scredit_billable_chg_id);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> RO Billable Charge Id -> Expected->" + sScredit_billable_chg_id + "  Actual->"+scredit_billable_chg_id);
	                    	}
	                    	if (sdisc_cul_agg_amt.trim().equalsIgnoreCase(sSdisc_cul_agg_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Discount Cul Aggregation Amount -> Expected->" + sSdisc_cul_agg_amt + "  Actual->"+sdisc_cul_agg_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Discount Cul Aggregation Amount -> Expected->" + sSdisc_cul_agg_amt + "  Actual->"+sdisc_cul_agg_amt);
	                    	}
	                    	if (scul_min_enr_limit.trim().equalsIgnoreCase(sScul_min_enr_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Min Enr Limit -> Expected->" + sScul_min_enr_limit + "  Actual->"+scul_min_enr_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Min Enr Limit -> Expected->" + sScul_min_enr_limit + "  Actual->"+scul_min_enr_limit);
	                    	}
	                    	if (scul_max_enr_limit.trim().equalsIgnoreCase(sScul_max_enr_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul max Enr Limit -> Expected->" + sScul_max_enr_limit + "  Actual->"+scul_max_enr_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul max Enr Limit -> Expected->" + sScul_max_enr_limit + "  Actual->"+scul_max_enr_limit);
	                    	}
	                    	if (scul_min_flat_limit.trim().equalsIgnoreCase(sScul_min_flat_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Min Flat Limit -> Expected->" + sScul_min_flat_limit + "  Actual->"+scul_min_flat_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Min Flat Limit -> Expected->" + sScul_min_flat_limit + "  Actual->"+scul_min_flat_limit);
	                    	}
	                    	
	                    	if (scul_max_flat_limit.trim().equalsIgnoreCase(sScul_max_flat_limit.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Cul Max Flat Limit -> Expected->" + sScul_max_flat_limit + "  Actual->"+scul_max_flat_limit);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Cul Max Flat Limit -> Expected->" + sScul_max_flat_limit + "  Actual->"+scul_max_flat_limit);
	                    	}
	                    	if (sprev_billed_amt.trim().equalsIgnoreCase(sSprev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Previous Billed Amount -> Expected->" + sSprev_billed_amt + "  Actual->"+sprev_billed_amt);
	                    	}
	                    	if (scredit_prev_billed_amt.trim().equalsIgnoreCase(sScredit_prev_billed_amt.trim()))
	                    	{
	                    		CF.FnTestCaseStatusReport("Pass", "Row No: "+j+" -> Credit Previous Billed Amount -> Expected->" + sScredit_prev_billed_amt + "  Actual->"+scredit_prev_billed_amt);
	                    	}
	                    	else
	                    	{
	                    		CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Credit Previous Billed Amount -> Expected->" + sScredit_prev_billed_amt + "  Actual->"+scredit_prev_billed_amt);
	                    	}
	                    	
	                    	
	                    }
	                    else
	                    {
	                    	CF.FnTestCaseStatusReport("Fail", "Row No: "+j+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	                    }
	  	  			}
	  	  		}
	  	  	}
		} 
		catch (Exception e)
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOAccumGrpDetails
	'Function Description : To Verify ASL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                               : sEndRow    -> End row number for SSL data Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                               : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOSSLAccumGrpDetails(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOSSLAccumGrpDetails");
		
		String sSACCUM_GRP_ID,sSBO_STATUS_CD,sSACCUM_TYPE,sSLIMIT_VALUE,sSPRICE_ASGN_ID,sSPARENT_ACCUM_GRP_ID,sSVERSION,sSBO_DATA_AREA,sSBUS_OBJ_CD,sSPRICING_RULE_ID,sSVERSION_NUM,sSACCT_ID;
	    String sQuery;
	    
	    
	    try 
	    {
	    	for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    	{
	    		
	    		
	    		System.out.println("sStartingRow"+sStartingRow);
	    		System.out.println("sSheetName"+sSheetName);
	    		
	    		sSACCT_ID   = (String)CF.FnGetCellValue(sStartingRow-2 ,2, sSheetName, sWorkbook).toString().trim();
	    		sQuery="SELECT ACCUM_GRP_ID, BO_STATUS_CD, ACCUM_TYPE, LIMIT_VALUE, PRICE_ASGN_ID, PARENT_ACCUM_GRP_ID, VERSION, BO_DATA_AREA, BUS_OBJ_CD, PRICING_RULE_ID, VERSION_NUM FROM CI_ACCUM_GRP WHERE ACCUM_GRP_ID IN (SELECT ACCUM_GRP_ID FROM CI_ACCUM_SSL_AMT WHERE ACCT_ID='"+sSACCT_ID+"')" ;
	    		
	    		ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    		{
	    			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    			
	    			for(int i=0;i<AL.size();i++)
	    			{
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    				
	    				// To Get value of corresponding column
	    				String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	    				String sBO_STATUS_CD =(String)temp.get("BO_STATUS_CD");
	    				String sACCUM_TYPE =(String)temp.get("ACCUM_TYPE");
	    				String sLIMIT_VALUE =(String)temp.get("LIMIT_VALUE");
	    				String sPRICE_ASGN_ID =(String)temp.get("PRICE_ASGN_ID");
	    				sPRICE_ASGN_ID = "GET"+sPRICE_ASGN_ID;
	    				String sPARENT_ACCUM_GRP_ID =(String)temp.get("PARENT_ACCUM_GRP_ID");
	    				sPARENT_ACCUM_GRP_ID = "GET"+sPARENT_ACCUM_GRP_ID;
	    				String sVERSION =(String)temp.get("VERSION");
	    				String sBO_DATA_AREA =(String)temp.get("BO_DATA_AREA");
	    				if(sBO_DATA_AREA=="NULL")
	                    {
	    					sBO_DATA_AREA="NOVAL";
	                    }
	    				String sBUS_OBJ_CD =(String)temp.get("BUS_OBJ_CD");
	    				
	    				String sPRICING_RULE_ID =(String)temp.get("PRICING_RULE_ID");
	    				sPRICING_RULE_ID = "GET"+sPRICING_RULE_ID;
	    				String sVERSION_NUM =(String)temp.get("VERSION_NUM");
	    					    				
	    				
	    				System.out.println("DB Data->"+sACCUM_GRP_ID+sBO_STATUS_CD+sACCUM_TYPE+sLIMIT_VALUE+sPRICE_ASGN_ID+sPARENT_ACCUM_GRP_ID+sVERSION+sBO_DATA_AREA+sBUS_OBJ_CD+sPRICING_RULE_ID+sVERSION_NUM);
	    				
	    				// Getting data from data sheet
	    				
	    				sSACCUM_GRP_ID			=         		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    				sSBO_STATUS_CD			=				(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    				sSACCUM_TYPE			= 				(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	    				sSLIMIT_VALUE			=				(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	    				sSPRICE_ASGN_ID			=				(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	    				sSPARENT_ACCUM_GRP_ID	=				(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION				=				(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	    				sSBO_DATA_AREA			=				(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	    				sSBUS_OBJ_CD			=        		(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	    				sSPRICING_RULE_ID		= 				(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION_NUM			=				(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	    				
	    				
	    				System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSBO_STATUS_CD+sSACCUM_TYPE+sSLIMIT_VALUE+sSPRICE_ASGN_ID+sSPARENT_ACCUM_GRP_ID+sSVERSION+sSBO_DATA_AREA+sSBUS_OBJ_CD+sSPRICING_RULE_ID+sSVERSION_NUM);
	    				
	    				if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	    				{
	    					CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    					
	    					if (sBO_STATUS_CD.trim().equalsIgnoreCase(sSBO_STATUS_CD.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Status Code  -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Status Code -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					if (sACCUM_TYPE.trim().equalsIgnoreCase(sSACCUM_TYPE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					if (sLIMIT_VALUE.trim().equalsIgnoreCase(sSLIMIT_VALUE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					if (sPRICE_ASGN_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICE_ASGN_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					
	    					if (sPARENT_ACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSPARENT_ACCUM_GRP_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					
	    					
	    					if (sVERSION.trim().equalsIgnoreCase(sSVERSION.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					if (sBO_DATA_AREA.trim().equalsIgnoreCase(sSBO_DATA_AREA.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					if (sBUS_OBJ_CD.trim().substring(0,2).equalsIgnoreCase(sSBUS_OBJ_CD.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					if (sPRICING_RULE_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICING_RULE_ID.trim().substring(0,2)))
	    					{	
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					
	    					if (sVERSION_NUM.trim().equalsIgnoreCase(sSVERSION_NUM.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					
	    					sStartingRow = sStartingRow + 1;
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    				}
	    			}
	    		}
	    	}
	    } catch (Exception e) 
	    {
	    	System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    }
	}
	
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOSSLASLAccumGrpDetails
	'Function Description : To Verify ASL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                               : sEndRow    -> End row number for SSL data Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                               : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOSSLASLAccumGrpDetails(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOSSLASLAccumGrpDetails");
		
		String sSACCUM_GRP_ID,sSBO_STATUS_CD,sSACCUM_TYPE,sSLIMIT_VALUE,sSPRICE_ASGN_ID,sSPARENT_ACCUM_GRP_ID,sSVERSION,sSBO_DATA_AREA,sSBUS_OBJ_CD,sSPRICING_RULE_ID,sSVERSION_NUM,sSACCT_ID;
	    String sQuery;
	    
	    
	    try 
	    {
	    	for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    	{
	    		
	    		
	    		System.out.println("sStartingRow"+sStartingRow);
	    		System.out.println("sSheetName"+sSheetName);
	    		
	    		sSACCT_ID   = (String)CF.FnGetCellValue(sStartingRow-2 ,2, sSheetName, sWorkbook).toString().trim();
	    		sQuery="SELECT ACCUM_GRP_ID, BO_STATUS_CD, ACCUM_TYPE, LIMIT_VALUE, PRICE_ASGN_ID, PARENT_ACCUM_GRP_ID, VERSION, BO_DATA_AREA, BUS_OBJ_CD, PRICING_RULE_ID, VERSION_NUM FROM CI_ACCUM_GRP WHERE ACCUM_GRP_ID IN (SELECT ACCUM_GRP_ID FROM CI_ACCUM_SSL_AMT WHERE ACCT_ID='"+sSACCT_ID+"') OR ACCUM_GRP_ID IN (SELECT ACCUM_GRP_ID FROM CI_ACCUM_ASL_AMT WHERE ACCT_ID='"+sSACCT_ID+"')" ;
	    		
	    		ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    		{
	    			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    			
	    			for(int i=0;i<AL.size();i++)
	    			{
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    				
	    				// To Get value of corresponding column
	    				String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	    				String sBO_STATUS_CD =(String)temp.get("BO_STATUS_CD");
	    				String sACCUM_TYPE =(String)temp.get("ACCUM_TYPE");
	    				String sLIMIT_VALUE =(String)temp.get("LIMIT_VALUE");
	    				String sPRICE_ASGN_ID =(String)temp.get("PRICE_ASGN_ID");
	    				sPRICE_ASGN_ID = "GET"+sPRICE_ASGN_ID;
	    				String sPARENT_ACCUM_GRP_ID =(String)temp.get("PARENT_ACCUM_GRP_ID");
	    				sPARENT_ACCUM_GRP_ID = "GET"+sPARENT_ACCUM_GRP_ID;
	    				String sVERSION =(String)temp.get("VERSION");
	    				String sBO_DATA_AREA =(String)temp.get("BO_DATA_AREA");
	    				if(sBO_DATA_AREA=="NULL")
	                    {
	    					sBO_DATA_AREA="NOVAL";
	                    }
	    				String sBUS_OBJ_CD =(String)temp.get("BUS_OBJ_CD");
	    				
	    				String sPRICING_RULE_ID =(String)temp.get("PRICING_RULE_ID");
	    				sPRICING_RULE_ID = "GET"+sPRICING_RULE_ID;
	    				String sVERSION_NUM =(String)temp.get("VERSION_NUM");
	    					    				
	    				
	    				System.out.println("DB Data->"+sACCUM_GRP_ID+sBO_STATUS_CD+sACCUM_TYPE+sLIMIT_VALUE+sPRICE_ASGN_ID+sPARENT_ACCUM_GRP_ID+sVERSION+sBO_DATA_AREA+sBUS_OBJ_CD+sPRICING_RULE_ID+sVERSION_NUM);
	    				
	    				// Getting data from data sheet
	    				
	    				sSACCUM_GRP_ID			=         		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    				sSBO_STATUS_CD			=				(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    				sSACCUM_TYPE			= 				(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	    				sSLIMIT_VALUE			=				(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	    				sSPRICE_ASGN_ID			=				(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	    				sSPARENT_ACCUM_GRP_ID	=				(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION				=				(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	    				sSBO_DATA_AREA			=				(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	    				sSBUS_OBJ_CD			=        		(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	    				sSPRICING_RULE_ID		= 				(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION_NUM			=				(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	    				
	    				
	    				System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSBO_STATUS_CD+sSACCUM_TYPE+sSLIMIT_VALUE+sSPRICE_ASGN_ID+sSPARENT_ACCUM_GRP_ID+sSVERSION+sSBO_DATA_AREA+sSBUS_OBJ_CD+sSPRICING_RULE_ID+sSVERSION_NUM);
	    				
	    				if (sACCUM_GRP_ID.trim().equalsIgnoreCase(sSACCUM_GRP_ID.trim()))
	    				{
	    					CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    					
	    					if (sBO_STATUS_CD.trim().equalsIgnoreCase(sSBO_STATUS_CD.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Status Code  -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Status Code -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					if (sACCUM_TYPE.trim().equalsIgnoreCase(sSACCUM_TYPE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					if (sLIMIT_VALUE.trim().equalsIgnoreCase(sSLIMIT_VALUE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					if (sPRICE_ASGN_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICE_ASGN_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					
	    					if (sPARENT_ACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSPARENT_ACCUM_GRP_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					
	    					
	    					if (sVERSION.trim().equalsIgnoreCase(sSVERSION.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					if (sBO_DATA_AREA.trim().equalsIgnoreCase(sSBO_DATA_AREA.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					if (sBUS_OBJ_CD.trim().substring(0,2).equalsIgnoreCase(sSBUS_OBJ_CD.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					if (sPRICING_RULE_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICING_RULE_ID.trim().substring(0,2)))
	    					{	
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					
	    					if (sVERSION_NUM.trim().equalsIgnoreCase(sSVERSION_NUM.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					
	    					sStartingRow = sStartingRow + 1;
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    				}
	    			}
	    		}
	    	}
	    } catch (Exception e) 
	    {
	    	System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    }
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOAccumGrpDetails
	'Function Description : To Verify ASL data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for SSL data Verification section in data sheet
	'                               : sEndRow    -> End row number for SSL data Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                               : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASODISCAccumGrpDetails(int sStartRow, int sEndRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASODISCAccumGrpDetails");
		
		String sSACCUM_GRP_ID,sSBO_STATUS_CD,sSACCUM_TYPE,sSLIMIT_VALUE,sSPRICE_ASGN_ID,sSPARENT_ACCUM_GRP_ID,sSVERSION,sSBO_DATA_AREA,sSBUS_OBJ_CD,sSPRICING_RULE_ID,sSVERSION_NUM,sSACCT_ID;
	    String sQuery;
	    
	    
	    try 
	    {
	    	for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
	    	{
	    		
	    		
	    		System.out.println("sStartingRow"+sStartingRow);
	    		System.out.println("sSheetName"+sSheetName);
	    		
	    		sSACCT_ID   = (String)CF.FnGetCellValue(sStartingRow-2 ,2, sSheetName, sWorkbook).toString().trim();
	    		sQuery="SELECT ACCUM_GRP_ID, BO_STATUS_CD, ACCUM_TYPE, LIMIT_VALUE, PRICE_ASGN_ID, PARENT_ACCUM_GRP_ID, VERSION, BO_DATA_AREA, BUS_OBJ_CD, PRICING_RULE_ID, VERSION_NUM FROM CI_ACCUM_GRP WHERE ACCUM_GRP_ID IN (SELECT ACCUM_GRP_ID FROM C1_ACCUM_DISC_ARG_AMT WHERE ACCT_ID IN ("+sSACCT_ID+"))" ;
	    		
	    		ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
	    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
	    		{
	    			java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
	    			
	    			for(int i=0;i<AL.size();i++)
	    			{
	    				Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	    				
	    				// To Get value of corresponding column
	    				String sACCUM_GRP_ID =(String)temp.get("ACCUM_GRP_ID");
	    				sACCUM_GRP_ID = "GET"+sACCUM_GRP_ID;
	    				String sBO_STATUS_CD =(String)temp.get("BO_STATUS_CD");
	    				String sACCUM_TYPE =(String)temp.get("ACCUM_TYPE");
	    				String sLIMIT_VALUE =(String)temp.get("LIMIT_VALUE");
	    				String sPRICE_ASGN_ID =(String)temp.get("PRICE_ASGN_ID");
	    				sPRICE_ASGN_ID = "GET"+sPRICE_ASGN_ID;
	    				String sPARENT_ACCUM_GRP_ID =(String)temp.get("PARENT_ACCUM_GRP_ID");
	    				sPARENT_ACCUM_GRP_ID = "GET"+sPARENT_ACCUM_GRP_ID;
	    				String sVERSION =(String)temp.get("VERSION");
	    				String sBO_DATA_AREA =(String)temp.get("BO_DATA_AREA");
	    				if(sBO_DATA_AREA=="NULL")
	                    {
	    					sBO_DATA_AREA="NOVAL";
	                    }
	    				String sBUS_OBJ_CD =(String)temp.get("BUS_OBJ_CD");
	    				
	    				String sPRICING_RULE_ID =(String)temp.get("PRICING_RULE_ID");
	    				sPRICING_RULE_ID = "GET"+sPRICING_RULE_ID;
	    				String sVERSION_NUM =(String)temp.get("VERSION_NUM");
	    					    				
	    				
	    				System.out.println("DB Data->"+sACCUM_GRP_ID+sBO_STATUS_CD+sACCUM_TYPE+sLIMIT_VALUE+sPRICE_ASGN_ID+sPARENT_ACCUM_GRP_ID+sVERSION+sBO_DATA_AREA+sBUS_OBJ_CD+sPRICING_RULE_ID+sVERSION_NUM);
	    				
	    				// Getting data from data sheet
	    				
	    				sSACCUM_GRP_ID			=         		(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
	    				sSBO_STATUS_CD			=				(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
	    				sSACCUM_TYPE			= 				(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
	    				sSLIMIT_VALUE			=				(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
	    				sSPRICE_ASGN_ID			=				(String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
	    				sSPARENT_ACCUM_GRP_ID	=				(String)CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION				=				(String)CF.FnGetCellValue(sStartingRow ,7, sSheetName, sWorkbook).toString().trim();
	    				sSBO_DATA_AREA			=				(String)CF.FnGetCellValue(sStartingRow ,8, sSheetName, sWorkbook).toString().trim();
	    				sSBUS_OBJ_CD			=        		(String)CF.FnGetCellValue(sStartingRow ,9, sSheetName, sWorkbook).toString().trim();
	    				sSPRICING_RULE_ID		= 				(String)CF.FnGetCellValue(sStartingRow ,10, sSheetName, sWorkbook).toString().trim();
	    				sSVERSION_NUM			=				(String)CF.FnGetCellValue(sStartingRow ,11, sSheetName, sWorkbook).toString().trim();
	    				sSPARENT_ACCUM_GRP_ID = "GET"+sSPARENT_ACCUM_GRP_ID;
	    				
	    				System.out.println("Sheet Data->"+sSACCUM_GRP_ID+sSBO_STATUS_CD+sSACCUM_TYPE+sSLIMIT_VALUE+sSPRICE_ASGN_ID+sSPARENT_ACCUM_GRP_ID+sSVERSION+sSBO_DATA_AREA+sSBUS_OBJ_CD+sSPRICING_RULE_ID+sSVERSION_NUM);
	    				
	    				if (sACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSACCUM_GRP_ID.trim().substring(0,2)))
	    				{
	    					CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    					
	    					if (sBO_STATUS_CD.trim().equalsIgnoreCase(sSBO_STATUS_CD.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Status Code  -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Status Code -> Expected->" + sSBO_STATUS_CD + "  Actual->"+sBO_STATUS_CD);
	    					}
	    					if (sACCUM_TYPE.trim().equalsIgnoreCase(sSACCUM_TYPE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Accumulation Type -> Expected->" + sSACCUM_TYPE + "  Actual->"+sACCUM_TYPE);
	    					}
	    					if (sLIMIT_VALUE.trim().equalsIgnoreCase(sSLIMIT_VALUE.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Limit Value -> Expected->" + sSLIMIT_VALUE + "  Actual->"+sLIMIT_VALUE);
	    					}
	    					if (sPRICE_ASGN_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICE_ASGN_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Price Assignment Id -> Expected->" + sSPRICE_ASGN_ID + "  Actual->"+sPRICE_ASGN_ID);
	    					}
	    					
	    					if (sPARENT_ACCUM_GRP_ID.trim().substring(0,2).equalsIgnoreCase(sSPARENT_ACCUM_GRP_ID.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Parent Accumulation Grp Id -> Expected->" + sSPARENT_ACCUM_GRP_ID + "  Actual->"+sPARENT_ACCUM_GRP_ID);
	    					}
	    					
	    					
	    					if (sVERSION.trim().equalsIgnoreCase(sSVERSION.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version -> Expected->" + sSVERSION + "  Actual->"+sVERSION);
	    					}
	    					if (sBO_DATA_AREA.trim().equalsIgnoreCase(sSBO_DATA_AREA.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> BO Data Area -> Expected->" + sSBO_DATA_AREA + "  Actual->"+sBO_DATA_AREA);
	    					}
	    					if (sBUS_OBJ_CD.trim().substring(0,2).equalsIgnoreCase(sSBUS_OBJ_CD.trim().substring(0,2)))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Business Object Code -> Expected->" + sSBUS_OBJ_CD + "  Actual->"+sBUS_OBJ_CD);
	    					}
	    					if (sPRICING_RULE_ID.trim().substring(0,2).equalsIgnoreCase(sSPRICING_RULE_ID.trim().substring(0,2)))
	    					{	
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Pricing Rule Id -> Expected->" + sSPRICING_RULE_ID + "  Actual->"+sPRICING_RULE_ID);
	    					}
	    					
	    					if (sVERSION_NUM.trim().equalsIgnoreCase(sSVERSION_NUM.trim()))
	    					{
	    						CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					else
	    					{
	    						CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Version Number -> Expected->" + sSVERSION_NUM + "  Actual->"+sVERSION_NUM);
	    					}
	    					
	    					sStartingRow = sStartingRow + 1;
	    				}
	    				else
	    				{
	    					CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected value of Accumulation Group ID is -> " + sSACCUM_GRP_ID + " Actual value of Accumulation Group ID is---->"+sACCUM_GRP_ID);
	    				}
	    			}
	    		}
	    	}
	    } catch (Exception e) 
	    {
	    	System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
	    }
	}
	
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyASOBillSegementData
	'Function Description : To Verify transaction data after running all the batches for ASO
	'Input Parameters     : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     : sEndRow    -> End row number for Transaction Status Verification section in data sheet
	'                     : sSheetName   -> Data sheet name
	'                     : sWorkbook -> Workbook path      
	'############################################################################################################################*/
	public void FnVerifyASOBillSegementData(int sStartRow,int sEndRow,int iCountRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyASOBillSegementData");
	      
	      
		String sQuery, sQuery1;
		String sSPRICEITEM_CD,sSDESCR_ON_BILL,sSCALC_AMT,sSSTART_DT,sSEND_DT,sDATE;
		
		String sACCT_ID,sBS_RowCount, sCountFlg = "F";
		try 
		{
			sACCT_ID   		=        (String)CF.FnGetCellValue(iCountRow-2,2, sSheetName, sWorkbook).toString().trim();
			sDATE   		=        (String)CF.FnGetCellValue(iCountRow-2,3, sSheetName, sWorkbook).toString().trim();
			sBS_RowCount	=        (String)CF.FnGetCellValue(iCountRow,1, sSheetName, sWorkbook).toString().trim();
			sQuery1 = "SELECT COUNT(*) FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN ("+sACCT_ID+") AND WIN_START_DT = TO_DATE('"+sDATE+"','MM/DD/YYYY'))"; 
			sCountFlg = FnGetTxnRowCount(sBS_RowCount,sQuery1);
		    	  
			System.out.println("Printing the value if sCountFlg================="+sCountFlg);
	    	  
			if(sCountFlg.equalsIgnoreCase("T"))
			{
				for (int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					System.out.println("sStartingRow"+sStartingRow);
					System.out.println("sSheetName"+sSheetName);
					
					sQuery  = "SELECT A.PRICEITEM_CD,B.DESCR_ON_BILL,B.CALC_AMT,to_char(B.START_DT,'mm/dd/yyyy') AS START_DT,to_char(B.END_DT,'mm/dd/yyyy') AS END_DT FROM CI_BILL_CHG A, CI_BSEG_CALC B WHERE A.BILLABLE_CHG_ID = B.BILLABLE_CHG_ID AND bseg_id in (SELECT BSEG_ID FROM CI_BSEG WHERE BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN("+sACCT_ID+") AND WIN_START_DT = TO_DATE('"+sDATE+"','MM/DD/YYYY'))) AND A.SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID IN ("+sACCT_ID+")) ORDER BY A.PRICEITEM_CD, B.CALC_AMT, B.START_DT"; 
					
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);
                  
					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						
						for(int i=0;i<AL.size();i++)
						{    	
							Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
							
							// To Get value of corresponding column
							
							String sPRICEITEM_CD =(String)temp.get("PRICEITEM_CD");
							String sDESCR_ON_BILL =(String)temp.get("DESCR_ON_BILL");
							String sCALC_AMT =(String)temp.get("CALC_AMT");
							String sSTART_DT =(String)temp.get("START_DT");
							String sEND_DT =(String)temp.get("END_DT");
							
							
							System.out.println("DB Data->"+sPRICEITEM_CD+sACCT_ID+sDESCR_ON_BILL+sCALC_AMT+sSTART_DT+sEND_DT);
							
							// Getting data from data sheet
							sSPRICEITEM_CD			=	(String)CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
							sSDESCR_ON_BILL			=	(String)CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
							sSCALC_AMT				=	(String)CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
							sSSTART_DT				=  	(String)CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
							sSEND_DT				=   (String)CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
								// Data sheet data
                             
                        	System.out.println("Datasheet Data->"+sSPRICEITEM_CD+sSDESCR_ON_BILL+sSCALC_AMT+sSSTART_DT+sSEND_DT);
                        	
                        	if (sPRICEITEM_CD.trim().equalsIgnoreCase(sSPRICEITEM_CD.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> PRICEITEM_CD -> Expected->" + sSPRICEITEM_CD + "  Actual->"+sPRICEITEM_CD);
                        	}
                        	if (sDESCR_ON_BILL.trim().equalsIgnoreCase(sSDESCR_ON_BILL.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> DESCR_ON_BILL -> Expected->" + sSDESCR_ON_BILL + "  Actual->"+sDESCR_ON_BILL);
                        	}
                        	if (sCALC_AMT.trim().equalsIgnoreCase(sSCALC_AMT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> CALC_AMT -> Expected->" + sSCALC_AMT + "  Actual->"+sCALC_AMT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> CALC_AMT -> Expected->" + sSCALC_AMT + "  Actual->"+sCALC_AMT);
                        	}
                        	if (sSTART_DT.trim().equalsIgnoreCase(sSSTART_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> START_DT -> Expected->" + sSSTART_DT + "  Actual->"+sSTART_DT);
                        	}
                        	if (sEND_DT.trim().equalsIgnoreCase(sSEND_DT.trim()))
                        	{
                        		CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> END_DT -> Expected->" + sSEND_DT + "  Actual->"+sEND_DT);
                        	}
                        	else
                        	{
                        		CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> END_DT -> Expected->" + sSEND_DT + "  Actual->"+sEND_DT);
                        	}
                        	
                        	sStartingRow = sStartingRow + 1;
                         }
					}     
					              
				} // end of for loop k
			}//if sCountFlg = T ends      
			else
				CF.FnTestCaseStatusReport("Fail", "TFM Data verification count mismatch"); 
		} 
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	/*'###########################################################################################################################
	'Function Name        : FnVerifyTotalGeneratedChargesForFrozenBills
	'Function Description : To verify Frozen Bill Amount on the accounts after running billing batches 
	'Input Parameters     : sQuery  		-> Query to be executed
	'					  : sStartRow  -> Starting row number for Transaction Status Verification section in data sheet
	'                     :	sSheetName   -> Data sheet name
	'					  : sWorkbook -> Workbook path	
	'Output Parameters    : sAllTxnStatus     
	'############################################################################################################################*/
	public void FnVerifyTotalGeneratedChargesForFrozenBills(int sStartRow,int sEndRow, String sSheetName,String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyTotalGeneratedChargesForFrozenBills");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				for(int sStartingRow=sStartRow;sStartingRow<=sEndRow;sStartingRow++)
				{
					String sPersonName, sBillAmt, sQuery;
					
					sPersonName		=	(String)CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook);
					sBillAmt	=	(String)CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook);
					
					sQuery = "SELECT SUM(CALC_AMT) FROM CI_BSEG_CALC WHERE BSEG_ID IN (SELECT BSEG_ID FROM CI_BSEG WHERE BSEG_STAT_FLG = '50' AND BILL_ID IN (SELECT BILL_ID FROM CI_BILL WHERE ACCT_ID IN (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID IN (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME IN ('"+sPersonName+"')))))";				
					System.out.println("sQuery = "+sQuery);
					ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>) fnGetAllValuefromDB(sQuery);

					if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
					{
						java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();

						// To Get value of corresponding column
						String sbillAmount=(String)temp.get("SUM(CALC_AMT)");
						System.out.println("Actual Bill Amount "+sbillAmount);
						if(sbillAmount.equalsIgnoreCase("NULL"))
						{
							sbillAmount = sbillAmount.replace("NULL","0").trim();
						}
						System.out.println("Actual Bill Amount ---------------" +sbillAmount);
						
						System.out.println("Expected Bill Amount "+sBillAmt);
						System.out.println("Person Name "+sPersonName);
					
						if (sBillAmt.trim().contains(sbillAmount.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Expected Bill Amount is : "+sBillAmt+" Actual Bill Amount is---->"+sbillAmount);
						}
					}
					else
					{
						CF.FnTestCaseStatusReport("Fail", "No Bill found");
					}
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Application Function Exception occured ->"+e.getLocalizedMessage()); 
			e.printStackTrace();
			BaseTest.eFlgFound =  "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->"+ e.getLocalizedMessage().replace(",", ""));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesFromDBForBenefitSponsorAccountDerivation
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyBillableChargesFromDBForBenefitSponsorAccountDerivation(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyBillableChargesFromDBForBenefitSponsorAccountDerivation");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipId,sPersonName, sQuery,sBillableChgId,sPriceItemCd,sStartDt,sEndDt,sBillPeriodCd,sSvcQty;
				String sAllTxnStatus = "NOTPROCESS";
				sMembershipId		=	 CF.FnGetCellValue(iStartingRow-2,3, sSheetName, sWorkbook).toString().trim();
				sPersonName			=	 CF.FnGetCellValue(iStartingRow-2,4, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT B.BILLABLE_CHG_ID, B.START_DT, B.END_DT, B.BILL_PERIOD_CD, B.PRICEITEM_CD, SQ.SVC_QTY FROM CI_BILL_CHG B, CI_BCHG_SQ SQ WHERE B.BILLABLE_CHG_ID = SQ.BILLABLE_CHG_ID AND B.BILLABLE_CHG_STAT = '10' AND SQ.SQI_CD IN('PREMAMT','APTCSQ','APTCRCN','LISSQ') AND B.BILLABLE_CHG_ID IN (SELECT BILLABLE_CHG_ID FROM CI_BILL_CHG_CHAR WHERE CHAR_VAL_FK1 = '"+sMembershipId+"') AND SA_ID IN (SELECT SA_ID FROM CI_SA WHERE ACCT_ID = (SELECT ACCT_ID FROM CI_ACCT_PER WHERE PER_ID = (SELECT PER_ID FROM CI_PER_NAME WHERE ENTITY_NAME = '"+sPersonName+"'))) ORDER BY B.START_DT, SQ.SVC_QTY";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sBILLABLE_CHG_ID=(String)temp.get("BILLABLE_CHG_ID");
						sBILLABLE_CHG_ID = "GET"+sBILLABLE_CHG_ID;
						String sSTART_DT=(String)temp.get("START_DT");
						String sEND_DT=(String)temp.get("END_DT");
						String sBILL_PERIOD_CD=(String)temp.get("BILL_PERIOD_CD");
						String sPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
						String sSVC_QTY=(String)temp.get("SVC_QTY");
												
						System.out.println("BILLABLE_CHG_ID "+sBILLABLE_CHG_ID);
						System.out.println("START_DT "+sSTART_DT);
						System.out.println("END_DT"+sEND_DT);
						System.out.println("BILL_PERIOD_CD"+sBILL_PERIOD_CD);
						System.out.println("PRICEITEM_CD "+sPRICEITEM_CD);
						System.out.println("SVC_QTY"+sSVC_QTY);
						
						sBillableChgId		=	CF.FnGetCellValue(sStartingRow ,1, sSheetName, sWorkbook).toString().trim();
						sStartDt			=	CF.FnGetCellValue(sStartingRow ,2, sSheetName, sWorkbook).toString().trim();
						sEndDt				=	CF.FnGetCellValue(sStartingRow ,3, sSheetName, sWorkbook).toString().trim();
						sBillPeriodCd		=	CF.FnGetCellValue(sStartingRow ,4, sSheetName, sWorkbook).toString().trim();
						sPriceItemCd		=	CF.FnGetCellValue(sStartingRow ,5, sSheetName, sWorkbook).toString().trim();
						sSvcQty				=	CF.FnGetCellValue(sStartingRow ,6, sSheetName, sWorkbook).toString().trim();
						
						if (sBILLABLE_CHG_ID.trim().substring(0,2).equalsIgnoreCase(sBillableChgId.trim().substring(0,2)))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Billable Charge ID ->"+sBillableChgId+" Actual Billable Charge is---->"+sBILLABLE_CHG_ID);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sSTART_DT.trim().equalsIgnoreCase(sStartDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Start Date is : "+sStartDt+" Actual value of Start Date is---->"+sSTART_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sEND_DT.trim().equalsIgnoreCase(sEndDt.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of End Date is : "+sEndDt+" Actual value of End Date is---->"+sEND_DT);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sBILL_PERIOD_CD.trim().equalsIgnoreCase(sBillPeriodCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of Bill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Bill Period Code is : "+sBillPeriodCd+" Actual value of SBill Period Code is---->"+sBILL_PERIOD_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						if (sPRICEITEM_CD.trim().equalsIgnoreCase(sPriceItemCd.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Price Item Code is : "+sPriceItemCd+" Actual value of Price Item Code is---->"+sPRICEITEM_CD);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						if (sSVC_QTY.trim().equalsIgnoreCase(sSvcQty.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected value of Service Quantity is : "+sSvcQty+" Actual value of Service Quantity is---->"+sSVC_QTY);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyBillableChargesFromDBForRetireeManagement");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyChargeBenefitSponsorFromDBForBenefitSponsorAccountDerivation
	'Function Description : This function gets the charge benefit sponsor from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FnVerifyChargeBenefitSponsorFromDBForBenefitSponsorAccountDerivation(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyChargeBenefitSponsorFromDBForBenefitSponsorAccountDerivation");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sBenefitSubTypeCD,sChargeBenefitSponsor;
				
				//Verify count of Regular Bill Segments generated
				sBenefitSubTypeCD	   =   CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sChargeBenefitSponsor  =   CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				
				String sChargeBenefitSponsorFromDB =  (String) FnGetDBColumnValue("SELECT SPONS_ACCT_DER_ALG_CD FROM C1_BENEFIT_SUB_TYPE WHERE BENEFIT_SUB_TYPE_CD = '"+sBenefitSubTypeCD+"'","SPONS_ACCT_DER_ALG_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if (sChargeBenefitSponsorFromDB.equalsIgnoreCase(sChargeBenefitSponsor))
				{
					CF.FnTestCaseStatusReport("Pass","Charge Benefit Sponsor Information matched. Expected Benefit Sponsor Value = "+sChargeBenefitSponsor+ " Actual Charge Benefit Value = "+sChargeBenefitSponsorFromDB);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Charge Benefit Sponsor Information not matched. Expected Charge Benefit Value = "+sChargeBenefitSponsor+ " Actual Charge Benefit Value = "+sChargeBenefitSponsorFromDB);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyChargeBenefitSponsorFromDBForBenefitSponsorAccountDerivation");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyErrorMessageFromDBForBenefitSponsorAccountDerivation
	'Function Description : This function gets the error message from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'###########################################################################################################################################################################################################################*/
	public void FnVerifyErrorMessageFromDBForBenefitSponsorAccountDerivation(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println(">>>>>>>>>>--FnVerifyErrorMessageFromDBForBenefitSponsorAccountDerivation");
		try 
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sMembershipID,sExpectedErrorMessage;
				
				//Verify count of Regular Bill Segments generated
				sMembershipID	       =   CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				sExpectedErrorMessage  =   CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
				
				//String sActualErrorMessage =  (String) FnGetDBColumnValue("SELECT SPONS_ACCT_DER_ALG_CD FROM C1_BENEFIT_SUB_TYPE WHERE BENEFIT_SUB_TYPE_CD = '"+sBenefitSubTypeCD+"'","SPONS_ACCT_DER_ALG_CD",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sActualErrorMessage =  (String) FnGetDBColumnValue("SELECT MESSAGE_TEXT from CI_MSG_L WHERE MESSAGE_NBR = (SELECT MESSAGE_NBR  from CI_REPRC_ENTITY_DTL r where r.reprc_entity_id in('"+sMembershipID+"') and BO_STATUS_CD = 'E') and MESSAGE_CAT_NBR = (select MESSAGE_CAT_NBR  from CI_REPRC_ENTITY_DTL r where r.reprc_entity_id in('"+sMembershipID+"') and BO_STATUS_CD = 'E')","MESSAGE_TEXT",  System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				if (sExpectedErrorMessage.equalsIgnoreCase(sActualErrorMessage))
				{
					CF.FnTestCaseStatusReport("Pass","Error Message is matched. Expected Error message is = "+sExpectedErrorMessage+ " Actual Error message is = "+sActualErrorMessage);
				}
				else 
				{
					CF.FnTestCaseStatusReport("Fail","Error Message is not matched. Expected Error message is = "+sExpectedErrorMessage+ " Actual Error message is = "+sActualErrorMessage);
				}
			}
		}
		catch (Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyErrorMessageFromDBForBenefitSponsorAccountDerivation");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnGetPriceItemDetailsForAccount
    'Function Description : This function gets the Price Item Details from DB Table for account
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnGetPriceItemDetailsForAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
    {
           System.out.println("--FnGetPriceItemDetailsForAccount");
           try
           {
                  if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                  {
                        String sQuery,sPriceItem,sAccountID,sAssignementLevel,sRateInfo,sPricingCurrency,sTrigger,sEffectiveStartDate,sEffectiveEndDate,sRateSchedule;
                        sPriceItem          =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
                        sAccountID          =  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
                        sAssignementLevel   =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
                        sEffectiveStartDate =  CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
                        sEffectiveEndDate   =  CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
                        sRateSchedule       =  CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
                        sQuery = "SELECT PRICE_ASSIGNMENT_START_DATE,PRICE_ASSIGNMENT_END_DATE,ASSGN_PRICE_CURRENCY,RATE_VALUE FROM ci_eff_acct_pricing_vw WHERE Account_ID ='"+sAccountID+"' AND PRICE_ITEM_CODE='"+sPriceItem+"' AND PRICE_ASSIGNMENT_LEVEL='"+sAssignementLevel+"' AND PRICE_ASSIGNMENT_START_DATE=TO_DATE('"+sEffectiveStartDate+"','YYYY-MM-DD')";
                        ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
                        if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                        {
                               int sStartingRow = iStartingRow;
                               java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
                               for(int i=0;i<AL.size();i++)
                               {
                                      Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                      sRateInfo           =  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
                                      sPricingCurrency    =  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
                                      sTrigger            =  CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
                              		  System.out.println("price Item Information is "+sPriceItem +sAccountID +sAssignementLevel +sRateInfo +sPricingCurrency +sTrigger +sEffectiveStartDate +sEffectiveEndDate +sRateSchedule);
                                      // To Get value of corresponding column
                                      String PRICE_ASSIGNMENT_START_DATE=(String)temp.get("PRICE_ASSIGNMENT_START_DATE");
                                      String PRICE_ASSIGNMENT_END_DATE=(String)temp.get("PRICE_ASSIGNMENT_END_DATE");
                                      String ASSGN_PRICE_CURRENCY=(String)temp.get("ASSGN_PRICE_CURRENCY");
                                      String RATE_VALUE=(String)temp.get("RATE_VALUE");
                                      System.out.println("PRICE_ASSIGNMENT_START_DATE "+PRICE_ASSIGNMENT_START_DATE);
                                      System.out.println("PRICE_ASSIGNMENT_END_DATE "+PRICE_ASSIGNMENT_END_DATE);
                                      System.out.println("ASSGN_PRICE_CURRENCY"+ASSGN_PRICE_CURRENCY);
                                      System.out.println("RATE_VALUE"+RATE_VALUE);
                                      if(!sEffectiveStartDate.equalsIgnoreCase("NoValue"))
                          	          {
                                        String sUpdatedEffectiveStartDate = sEffectiveStartDate + " 00:00:00";
                          		        Thread.sleep(2000);
	                          		        if (sUpdatedEffectiveStartDate.equalsIgnoreCase(PRICE_ASSIGNMENT_START_DATE))
	                          		        {
	                              		        CF.FnTestCaseStatusReport("Pass", "Start date from excel is matching with DB");    	
	                          		        }else
	                          		        {
	                          		        	 CF.FnTestCaseStatusReport("Fail", "Start date from excel is Not matching with DB");
	                          		        }	
                           		        Thread.sleep(5000);
                          	          }
                                      if(!sEffectiveEndDate.equalsIgnoreCase("NoValue"))
                          	          {
                                        String sUpdatedEffectiveEndDate = sEffectiveEndDate + " 00:00:00";
                            		    Thread.sleep(2000);
	                          		        if (sUpdatedEffectiveEndDate.equalsIgnoreCase(PRICE_ASSIGNMENT_END_DATE))
	                          		        {
	                              		        CF.FnTestCaseStatusReport("Pass", "End date from excel is matching with DB");    	
	                          		        }else
	                          		        {
	                          		        	 CF.FnTestCaseStatusReport("Fail", "End date from excel is NOT matching with DB");
	                          		        }
                          		        Thread.sleep(5000);
                          	          }
                                      if(!sPricingCurrency.equalsIgnoreCase("NoValue"))
                          	          {
                            		        if (sPricingCurrency.equalsIgnoreCase(ASSGN_PRICE_CURRENCY))
                              		        {
                                  		        CF.FnTestCaseStatusReport("Pass", "Currency from excel is matching with DB");    	
                              		        }else
                              		        {
                              		        	 CF.FnTestCaseStatusReport("Fail", "Currency from excel is NOT matching with DB");
                              		        }
                          		        Thread.sleep(5000);
                          	          }
                                      if(!sRateInfo.equalsIgnoreCase("NoValue"))
                          	          {
                          		        if (sRateInfo.equalsIgnoreCase(RATE_VALUE))
                          		        {
                              		        CF.FnTestCaseStatusReport("Pass", "Rate value from excel is matching with DB");    	
                          		        }else
                          		        {
                          		        	 CF.FnTestCaseStatusReport("Fail", "Rate value from excel is matching with DB");
                          		        }
                          		        Thread.sleep(5000);
                          	          }
                                      sStartingRow = sStartingRow + 1;
                               }
                        }
                        else
                        {
                               System.out.println("Data not available in db");
                        }
                  }
           }
           catch(Exception e)
           {
                  System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
                  e.printStackTrace();
                  BaseTest.eFlgFound = "false";
                  CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
           }
    }
    
    
    /*##########################################################################################################################################################################################################################/
    'Function Name        : FnGetPolicyDetailsForDB
    'Function Description : This function gets the Price Item Details from DB Table for account
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnGetPolicyDetailsForDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
    {
           System.out.println("--FnGetPolicyDetailsForDB");
           try
           {
                  if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                  {
                        String sQuery,sPolicyNbr,sAdvLfEligSw,sBoStatusCd;
                        sPolicyNbr          =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
                        
                        sQuery = "SELECT BO_STATUS_CD, ADV_LF_ELIG_SW FROM CI_POLICY WHERE POLICY_NBR  = '"+sPolicyNbr+"'";
                        ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
                        if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                        {
                        	int sStartingRow = iStartingRow;
                        	java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
                        	for(int i=0;i<AL.size();i++)
                        	{
                        		Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                        		sBoStatusCd           =  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
                        		sAdvLfEligSw    =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
                        		
                        		System.out.println("price Item Information is "+sBoStatusCd +sAdvLfEligSw);
                        		// To Get value of corresponding column
                        		String BO_STATUS_CD=(String)temp.get("BO_STATUS_CD");
                        		String ADV_LF_ELIG_SW=(String)temp.get("ADV_LF_ELIG_SW");
                        		
                        		System.out.println("BO_STATUS_CD "+BO_STATUS_CD);
                        		System.out.println("ADV_LF_ELIG_SW "+ADV_LF_ELIG_SW);
                        		
                        		if(!sBoStatusCd.equalsIgnoreCase("NoValue"))
                        		{
                        			if (sBoStatusCd.trim().equalsIgnoreCase(BO_STATUS_CD.trim()))
                        			{
                        				CF.FnTestCaseStatusReport("Pass", "BO_STATUS_CD from excel is matching with DB");    	
                        			}
                        			else
                        			{
                        				CF.FnTestCaseStatusReport("Fail", "BO_STATUS_CD from excel is Not matching with DB");
                        			}	
                        		}
                        		
                        		if(!sAdvLfEligSw.equalsIgnoreCase("NoValue"))
                        		{
                        			if (sAdvLfEligSw.trim().equalsIgnoreCase(ADV_LF_ELIG_SW.trim()))
                        			{
                        				CF.FnTestCaseStatusReport("Pass", "ADV_LF_ELIG_SW from excel is matching with DB");    	
                        			}
                        			else
                        			{
                        				CF.FnTestCaseStatusReport("Fail", "ADV_LF_ELIG_SW from excel is NOT matching with DB");
                        			}
                        		}
                        		sStartingRow = sStartingRow + 1;
                        	}
                        }
                        else
                        {
                               System.out.println("Data not available in db");
                        }
                  }
           }
           catch(Exception e)
           {
                  System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
                  e.printStackTrace();
                  BaseTest.eFlgFound = "false";
                  CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
           }
    }
    
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetBillAfterDateOnAccount
	'Function Description : Get bill after date from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetBillAfterDateOnAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sBillAfterDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(BILL_AFTER_DT, 'YYYY-MM-DD') AS BILL_AFTER_DT FROM CI_ACCT WHERE ACCT_ID = '"+sAccountId+"'","BILL_AFTER_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sBillAfterDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Account bill after date "+sBillAfterDate+" update successfull" +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Unable to update Account for bill after date> "+sBillAfterDate+" "+sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	

	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnVerifyHoldRequestEntryFromHistory
	'Function Description : 
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyHoldRequestEntryFromHistory(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sHoldRequestId   =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sSvcName	        =    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				String sExpactedEntries	=    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				int iExpactedEntries    =    Integer.parseInt(sExpactedEntries);
				
				String sGetText     = (String) FnGetDBColumnValue("select count(*) from c1_iws_hist where svc_name ='"+sSvcName+"' and rmb_entity_id = '"+sHoldRequestId+"'","Count(*)", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				int iActualEntries  = Integer.parseInt(sGetText);
				
				if(iActualEntries >= iExpactedEntries)
				{
					CF.FnTestCaseStatusReport("Pass", "Database entries present for given hold request And count is "+iActualEntries+"");
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Database entries NOT present for given hold request And count is "+iActualEntries+"");
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}		

	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetDeferAutoPayDateOnAccount
	'Function Description : Get Defer Auto Pay Date from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetDeferAutoPayDateOnAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		    =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sDeferAutoPayDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(DEFER_AUTO_PAY_DT, 'YYYY-MM-DD') AS DEFER_AUTO_PAY_DT FROM CI_ACCT WHERE ACCT_ID = '"+sAccountId+"'","DEFER_AUTO_PAY_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sDeferAutoPayDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Account Defer Auto Pay date "+sDeferAutoPayDate+" Is Matched" +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Account Defer Auto Pay date "+sDeferAutoPayDate+ "Is Not Matched" +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetPostponeCreditReviewDateOnAccount
	'Function Description : Get Postpone credit review Date from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetPostponeCreditReviewDateOnAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		            =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sPostponeCreditReviewDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(POSTPONE_CR_RVW_DT, 'YYYY-MM-DD') AS POSTPONE_CR_RVW_DT FROM CI_ACCT WHERE ACCT_ID = '"+sAccountId+"'","POSTPONE_CR_RVW_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sPostponeCreditReviewDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Account Postpone credit review date "+sPostponeCreditReviewDate+" Is Matched" +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Account Postpone credit review date "+sPostponeCreditReviewDate+ "Is Not Matched" +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	

	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetHoldRefundUntilDateOnAccount
	'Function Description : Get Hold Refund Until Date from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetHoldRefundUntilDateOnAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		            =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sPostponeCreditReviewDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(HOLD_REF_DT, 'YYYY-MM-DD') AS HOLD_REF_DT FROM CI_ACCT WHERE ACCT_ID = '"+sAccountId+"'","HOLD_REF_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sPostponeCreditReviewDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Account Hold Refund Until date "+sPostponeCreditReviewDate+" Is Matched" +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Account Hold Refund Until date "+sPostponeCreditReviewDate+ "Is Not Matched" +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	

	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetEndDateOnHoldRequest
	'Function Description : Get Hold request end date from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetEndDateOnHoldRequest(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sHoldRequestId   =    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sExpectedEndDate	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("SELECT TO_CHAR(END_DT, 'YYYY-MM-DD') AS END_DT FROM c1_hold_req WHERE HOLD_REQ_ID = '"+sHoldRequestId+"'","END_DT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sExpectedEndDate))
				{
					CF.FnTestCaseStatusReport("Pass", "Hold End Date "+sExpectedEndDate+" Is Matching " +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Hold End Date "+sExpectedEndDate+" Is Not Matching " +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	

	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnVerifyCISDivisionOnDealProspectAccount
	'Function Description : Get CIS Division from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajinkya J
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyDataOnDealProspectAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sColumnToVerify	=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();
				String sValueToVerify	=    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("Select "+sColumnToVerify+" from C1_PRS_ACCT WHERE ACCT_ID = '"+sAccountId+"'",sColumnToVerify, System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sValueToVerify))
				{
					CF.FnTestCaseStatusReport("Pass", ""+sColumnToVerify+" for Created Deal Prospect Account "+sValueToVerify+ " Is Matching successfully With Expected " +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", ""+sColumnToVerify+" for Created Deal Prospect Account "+sValueToVerify+ "Is Not Matching With Expected " +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnVerifyIsPRSSwitchOnDealProspectAccount
	'Function Description : Get IS_PRS_SW from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajinkya J
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyIsPRSSwitchOnDealProspectAccount(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sAccountId		=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sPersonId		=    CF.FnGetCellValue(iStartingRow ,2, sSheetName, sWorkbook).toString().trim();				
				String sColumnToVerify	=    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				String sValueToVerify	=    CF.FnGetCellValue(iStartingRow ,4, sSheetName, sWorkbook).toString().trim();
				
				String sGetText   = (String) FnGetDBColumnValue("Select "+sColumnToVerify+" from C1_PRS_ACCT_PER WHERE PER_ID = '"+sPersonId+"' And ACCT_ID = '"+sAccountId+"'",sColumnToVerify, System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sGetText.equalsIgnoreCase(sValueToVerify))
				{
					CF.FnTestCaseStatusReport("Pass", ""+sColumnToVerify+" for Created Deal Prospect Account "+sValueToVerify+ " Is Matching successfully With Expected " +sGetText);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", ""+sColumnToVerify+" for Created Deal Prospect Account "+sValueToVerify+ "Is Not Matching With Expected " +sGetText);
				}
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	

	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnVerifyBillableChargesFromDBForBenefitSponsorAccountDerivation
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyPaymentsCharacteristicsTable(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnVerifyPaymentsCharacteristicsTable");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sCharDescr,sCharVal, sPaymentId, sQuery;
				String sAllTxnStatus = "NOTPROCESS";
				sPaymentId		=	 CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				sQuery = "SELECT DESCR, CHAR_VAL_FK1 FROM CI_PAY_CHAR PC, CI_CHAR_TYPE_L CT WHERE PC.CHAR_TYPE_CD = CT.CHAR_TYPE_CD AND PC.PAY_ID = '"+sPaymentId+"'  AND CHAR_VAL_FK1 != ' '";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sDESCR=(String)temp.get("DESCR");
						String sCHAR_VAL_FK1=(String)temp.get("CHAR_VAL_FK1");
												
						System.out.println("DESCR "+sDESCR);
						System.out.println("CHAR_VAL_FK1 "+sCHAR_VAL_FK1);
						
						sCharDescr		=	 CF.FnGetCellValue(sStartingRow,1, sSheetName, sWorkbook).toString().trim();
						sCharVal		=	 CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook).toString().trim();
						
						
						if (sDESCR.trim().equalsIgnoreCase(sCharDescr.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Char Type Description ->"+sCharDescr+" Actual Char Type Description is---->"+sDESCR);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Char Type Description ->"+sCharDescr+" Actual Char Type Description is---->"+sDESCR);
							sAllTxnStatus = "NOTPROCESS";
						}
						if (sCHAR_VAL_FK1.trim().equalsIgnoreCase(sCharVal.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Char Value is : "+sCharVal+" Actual Char Value is---->"+sCHAR_VAL_FK1);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" ->Expected Char Value is : "+sCharVal+" Actual Char Value is---->"+sCHAR_VAL_FK1);
							sAllTxnStatus = "NOTPROCESS";
						}
							
						
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnVerifyPaymentsCharacteristicsTable");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*##########################################################################################################################################################################################################################/
	'Function Name        : FnGetMessageTextForInvalidPaymentRecordFromDB
	'Function Description : This function gets the billable charges from DB Table 
	'Input Parameters     : iStartingRow   	-> Starting Row of the excel sheet which has the expected Alternate Bill Id.
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetMessageTextForInvalidPaymentRecordFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		System.out.println("--FnGetMessageTextForInvalidPaymentRecordFromDB");
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{
				String sAccountId,sMessage, sQuery;
				String sAllTxnStatus = "NOTPROCESS";
				sAccountId		=	 CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
				
				
				System.out.println("sAllTxnStatus = "+sAllTxnStatus);
				
				sQuery = "SELECT MESSAGE_TEXT FROM CI_MSG_L WHERE MESSAGE_NBR IN (SELECT MESSAGE_NBR FROM CI_UPLPAY_STG_ERR WHERE PAY_STG_ID = (SELECT PAY_STG_ID FROM CI_UPLPAY_STG WHERE ACCT_ID = '"+sAccountId+"'))";
				ArrayList<Hashtable<String, Object>>  AL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sQuery);
				
				if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
				{
					int sStartingRow = iStartingRow;
					java.util.Iterator<Hashtable<String, Object>> itr = AL.iterator();
					
					for(int i=0;i<AL.size();i++)
					{
			
						Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
				      
						// To Get value of corresponding column
												
						String sMESSAGE_TEXT=(String)temp.get("MESSAGE_TEXT");
						
												
						System.out.println("MESSAGE_TEXT "+sMESSAGE_TEXT);
						
						
						sMessage	=	 CF.FnGetCellValue(sStartingRow,2, sSheetName, sWorkbook).toString().trim();
						
						
						
						if (sMESSAGE_TEXT.trim().equalsIgnoreCase(sMessage.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "Row No: "+sStartingRow+" -> Expected Message Text ->"+sMessage+" Actual Message Text is---->"+sMESSAGE_TEXT);
							sAllTxnStatus = "PROCESS";
						}
						else
						{
							CF.FnTestCaseStatusReport("Fail", "Row No: "+sStartingRow+" -> Expected Message Text ->"+sMessage+" Actual Message Text is---->"+sMESSAGE_TEXT);
							sAllTxnStatus = "NOTPROCESS";
						}
						
						sStartingRow = sStartingRow + 1;
					}
				}	
					
				else
				{
					System.out.println("Data not available in db");
				}
			}
		}
		catch(Exception e) 
		{
			System.out.println("Exception in Application Function ==> FnGetMessageTextForInvalidPaymentRecordFromDB");
			e.printStackTrace();
			BaseTest.eFlgFound = "false";
			CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
		}
	}
	
	
	/*'#######################################################################################################################################################################################################################################################################################################################
	'Function Name        : FnGetStatementIdFromDB
	'Function Description : Get Statement Id from database
	'Input Parameters     : iStartingRow    -> Starting Row of the excel sheet which has details.
	'Output Parameters    : None
	'Created By           : Ajeet
	'#########################################################################################################################################################################################################################################################################################################################*/
	public void FnGetStatementIdFromDB(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
	{
		try
		{
			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
			{				
	            //Initializing variables
				String sStatementConstructId	=    CF.FnGetCellValue(iStartingRow ,1, sSheetName, sWorkbook).toString().trim();
				String sStatus					=    CF.FnGetCellValue(iStartingRow ,3, sSheetName, sWorkbook).toString().trim();
				
				String sStmtId   	 = (String) FnGetDBColumnValue("SELECT STM_ID FROM CI_STM WHERE STM_CNST_ID = '"+sStatementConstructId+"'","STM_ID", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				String sStmtStatus   = (String) FnGetDBColumnValue("SELECT STM_STAT_FLG FROM CI_STM WHERE STM_CNST_ID = '"+sStatementConstructId+"'","STM_STAT_FLG", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
				
				if(sStmtId.equalsIgnoreCase("NoValue"))
				{
					CF.FnWriteCellValue(iStartingRow, 2, sStmtId, sSheetName, sWorkbook);
				}
				
				if(sStmtStatus.equalsIgnoreCase(sStatus))
				{
					CF.FnTestCaseStatusReport("Pass", "Statement Status = "+sStatus+" Is Matched" +sStmtStatus);
				}
				else
				{
					CF.FnTestCaseStatusReport("Fail", "Statement Status = "+sStatus+ "Is Not Matched" +sStmtStatus);
				}
				
			}				
		}
		catch (Exception e)
		{
			 System.out.println("Script Exception occured ->"+e.getLocalizedMessage());
		     e.printStackTrace();
		     BaseTest.eFlgFound = "false";
		     CF.FnTestCaseStatusReport("Fail","Script Exception occured ->\n"+CF.erromsg(e));
		}
	}	
	
	
	
	public void executeSqlScript(File file, String sDbName, String sDbUserName, String sDbPassword, String sDbMachineIP, String sDbPort) throws Exception 
	{
		Connection 			conn 		= null;
		OracleDataSource    ods		= new OracleDataSource();
		 
        Reader reader = new BufferedReader(new FileReader(file));
        System.out.println("Running script from file: " + file.getCanonicalPath());
        ods.setURL("jdbc:oracle:thin:"+sDbUserName+"/"+sDbPassword+"@//"+sDbMachineIP+":"+sDbPort+"/"+sDbName);
		
        conn = ods.getConnection();
        ScriptRunner sr = new ScriptRunner(conn);
        sr.setAutoCommit(true);
        sr.setStopOnError(true);
        sr.runScript(reader);
        System.out.println("Done.");
    }
	
	
	/////////////////////////NEW IWS//////////////////////////

	


	
 
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifyDealCreationInfoIWS
    'Function Description : This function to verify Deal Information Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
	public void FnVerifyDealCreationInfoIWS(int iStartingRow, String sSheetName, String sWorkbook, String sDealId) throws Exception {
	    System.out.println(iStartingRow + "<<<===FnVerifyDealCreationInfoIWS===>>>" + sDealId);

	    try {
	        if (BaseTest.eFlgFound.equalsIgnoreCase("true")) {


	            String sErrorMessageText = CF.FnGetCellValue(iStartingRow, 39, sSheetName, sWorkbook).toString().trim();


	            System.out.println("sErrorMessageText :- " + sErrorMessageText);



	            if (sErrorMessageText.equalsIgnoreCase("NoValue")) {

	                String sDEAL_ENTITY_TYPE_FLG = CF.FnGetCellValue(iStartingRow, 1, sSheetName, sWorkbook).toString().trim();
	                String sDEAL_ENTITY_ID = CF.FnGetCellValue(iStartingRow, 2, sSheetName, sWorkbook).toString().trim();
	                String sDealIdentifier = CF.FnGetCellValue(iStartingRow, 3, sSheetName, sWorkbook).toString().trim();
	                String sDealType = CF.FnGetCellValue(iStartingRow, 4, sSheetName, sWorkbook).toString().trim();
	                String sDealCurrency = CF.FnGetCellValue(iStartingRow, 5, sSheetName, sWorkbook).toString().trim();
	                String sSimulationType = CF.FnGetCellValue(iStartingRow, 6, sSheetName, sWorkbook).toString().trim();
	                String sStartDate = CF.FnGetCellValue(iStartingRow, 7, sSheetName, sWorkbook).toString().trim();
	                String sPriceSelectionDate = CF.FnGetCellValue(iStartingRow, 8, sSheetName, sWorkbook).toString().trim();
	                String sReviewFrequency = CF.FnGetCellValue(iStartingRow, 9, sSheetName, sWorkbook).toString().trim();
	                String sDealFrequency = CF.FnGetCellValue(iStartingRow, 10, sSheetName, sWorkbook).toString().trim();
	                String sUsageFrequency = CF.FnGetCellValue(iStartingRow, 11, sSheetName, sWorkbook).toString().trim();
	                String sDealDescription = CF.FnGetCellValue(iStartingRow, 12, sSheetName, sWorkbook).toString().trim();
	                String sDealVersionDescription = CF.FnGetCellValue(iStartingRow, 13, sSheetName, sWorkbook).toString().trim();
	                String sSkipReference = CF.FnGetCellValue(iStartingRow, 14, sSheetName, sWorkbook).toString().trim();
	                String sSkipQuestionnaire = CF.FnGetCellValue(iStartingRow, 15, sSheetName, sWorkbook).toString().trim();
	                String sTemplateDeal = CF.FnGetCellValue(iStartingRow, 16, sSheetName, sWorkbook).toString().trim();
	                String sCONTRACTED_DEAL_SW = CF.FnGetCellValue(iStartingRow, 17, sSheetName, sWorkbook).toString().trim();
	                String sincludeHierarchyFlag = CF.FnGetCellValue(iStartingRow, 18, sSheetName, sWorkbook).toString().trim();
	                String sEndDate = CF.FnGetCellValue(iStartingRow, 19, sSheetName, sWorkbook).toString().trim();

	                String sTnC1 = CF.FnGetCellValue(iStartingRow, 20, sSheetName, sWorkbook).toString().trim();
	                String sTnC2 = CF.FnGetCellValue(iStartingRow, 21, sSheetName, sWorkbook).toString().trim();
	                String sTnC3 = CF.FnGetCellValue(iStartingRow, 22, sSheetName, sWorkbook).toString().trim();

	                String sPRODUCT_CD1 = CF.FnGetCellValue(iStartingRow, 23, sSheetName, sWorkbook).toString().trim();
	                String sPRODUCT_CD2 = CF.FnGetCellValue(iStartingRow, 24, sSheetName, sWorkbook).toString().trim();
	                String sPRODUCT_CD3 = CF.FnGetCellValue(iStartingRow, 25, sSheetName, sWorkbook).toString().trim();

	                String sREFERENCE_TYPE_FLG = CF.FnGetCellValue(iStartingRow, 26, sSheetName, sWorkbook).toString().trim();
	                String sREF_DEAL_ID = CF.FnGetCellValue(iStartingRow, 27, sSheetName, sWorkbook).toString().trim();
	                String sREF_MODEL_ID = CF.FnGetCellValue(iStartingRow, 28, sSheetName, sWorkbook).toString().trim();
	                String sREF_PER_ID = CF.FnGetCellValue(iStartingRow, 29, sSheetName, sWorkbook).toString().trim();
	                String sREFER_USAGE_SW = CF.FnGetCellValue(iStartingRow, 30, sSheetName, sWorkbook).toString().trim();
	                String sREFER_PRICE_SW = CF.FnGetCellValue(iStartingRow, 31, sSheetName, sWorkbook).toString().trim();
	                String sINCLUDE_CHILD_HIREARCHY_SW = CF.FnGetCellValue(iStartingRow, 32, sSheetName, sWorkbook).toString().trim();


	                String stemplateDealId = CF.FnGetCellValue(iStartingRow, 33, sSheetName, sWorkbook).toString().trim();
	                String stemplateDealIdentifier = CF.FnGetCellValue(iStartingRow, 34, sSheetName, sWorkbook).toString().trim();
	                String stemplateModelId = CF.FnGetCellValue(iStartingRow, 35, sSheetName, sWorkbook).toString().trim();
	                String scopyBasicDetailsFlag = CF.FnGetCellValue(iStartingRow, 36, sSheetName, sWorkbook).toString().trim();
	                String scopyPricingFlag = CF.FnGetCellValue(iStartingRow, 37, sSheetName, sWorkbook).toString().trim();
	                String scopyUsageFlag = CF.FnGetCellValue(iStartingRow, 38, sSheetName, sWorkbook).toString().trim();



	                System.out.println("sDealIdentifier:-" + sDealIdentifier + " || sDealType:-" + sDealType + " || sSimulationType:-" + sSimulationType);


	                if (BaseTest.eFlgFound.equalsIgnoreCase("true")) {

	                    int sStartingRow = iStartingRow;
	                    java.util.Iterator < Hashtable < String, Object >> itr;


	                    // String sC1_DealQuery = "SELECT * FROM C1_DEAL WHERE DEAL_ID = '"+sDealId+"'";
	                    String sC1_DealQuery = "SELECT * FROM C1_DEAL WHERE DEAL_ID = '" + sDealId + "'";
	                    System.out.println("DEAL Information => " + sC1_DealQuery);
	                    ArrayList < Hashtable < String, Object >> sC1_DealQueryAL = (ArrayList < Hashtable < String, Object >> ) fnGetAllValuefromDB(sC1_DealQuery);
	                    System.out.println("sC1_DealQueryAL AL:-" + sC1_DealQueryAL);

	                    String sC1_MODELQuery = "SELECT * FROM C1_MODEL WHERE DEAL_ID = '" + sDealId + "'";
	                    System.out.println("DEAL sC1_MODELQuery Information => " + sC1_MODELQuery);
	                    ArrayList < Hashtable < String, Object >> sC1_MODELQueryAL = (ArrayList < Hashtable < String, Object >> ) fnGetAllValuefromDB(sC1_MODELQuery);
	                    System.out.println("sC1_MODELQueryAL AL:-" + sC1_MODELQueryAL);

	                    
	                    for (int TNC = 0; TNC < 3; TNC++) {
	                    	
	                        String SelectedTNC = null;
	                        if (TNC == 0) {
	                            SelectedTNC = sTnC1;
	                        } else if (TNC == 1) {
	                            SelectedTNC = sTnC2;
	                        } else if (TNC == 2) {
	                            SelectedTNC = sTnC3;
	                        }

	                        if (!SelectedTNC.equalsIgnoreCase("NoValue")) {

	                            String sC1_DEAL_TNCQuery = "SELECT TC_TYPE_CD FROM C1_DEAL_TC WHERE DEAL_ID = '" + sDealId + "' AND TC_TYPE_CD = '" + SelectedTNC + "'";
	                            System.out.println("DEAL sC1_DEAL_TNCQuery Information => " + sC1_DEAL_TNCQuery);
	                            ArrayList < Hashtable < String, Object >> sC1_DEAL_TNCQueryAL = (ArrayList < Hashtable < String, Object >> ) fnGetAllValuefromDB(sC1_DEAL_TNCQuery);
	                            System.out.println("sC1_DEAL_TNCQuery AL:-" + sC1_DEAL_TNCQueryAL);

	                            itr = sC1_DEAL_TNCQueryAL.iterator();
	                            for (int i = 0; i < sC1_DEAL_TNCQueryAL.size(); i++) {

	                                Hashtable < String, Object > temp = (Hashtable < String, Object > ) itr.next();

	                                System.out.println("temp sC1_DEAL_TNCQueryAL:-" + temp);

	                                String dbC1_DEAL_TC = ((String) temp.get("TC_TYPE_CD")).trim();

	                                System.out.println("SelectedTNC:-" + SelectedTNC + " || dbC1_DEAL_TC :- " + dbC1_DEAL_TC);
	                                if (SelectedTNC.equalsIgnoreCase(String.valueOf(dbC1_DEAL_TC))) {
	                                    CF.FnTestCaseStatusReport("Pass", "Terms & Condition -> " + SelectedTNC + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "<<xx DEAL Terms & ConditionC -> " + SelectedTNC + " value from excel is not matching with DB xx>>");
	                                }
	                            }
	                        }

	                    }
	                    // C1_DEAL_TNC loop1 closed



	                    for (int Products = 0; Products < 3; Products++) {
	                        String SelectedProduct = null;
	                        if (Products == 0) {
	                            SelectedProduct = sPRODUCT_CD1;
	                        } else if (Products == 1) {
	                            SelectedProduct = sPRODUCT_CD2;
	                        } else if (Products == 2) {
	                            SelectedProduct = sPRODUCT_CD3;
	                        }

	                        if (!SelectedProduct.equalsIgnoreCase("NoValue")) {

	                            String sC1_DEAL_PRODUCTQuery = "SELECT PRODUCT_CD FROM C1_DEAL_PRODUCT WHERE DEAL_ID = '" + sDealId + "' AND PRODUCT_CD = '" + SelectedProduct + "'";
	                            System.out.println("DEAL sC1_DEAL_PRODUCTQuery Information => " + sC1_DEAL_PRODUCTQuery);
	                            ArrayList < Hashtable < String, Object >> sC1_DEAL_PRODUCTQueryAL = (ArrayList < Hashtable < String, Object >> ) fnGetAllValuefromDB(sC1_DEAL_PRODUCTQuery);
	                            System.out.println("sC1_DEAL_PRODUCTQuery AL:-" + sC1_DEAL_PRODUCTQueryAL);

	                            itr = sC1_DEAL_PRODUCTQueryAL.iterator();
	                            for (int i = 0; i < sC1_DEAL_PRODUCTQueryAL.size(); i++) {

	                                Hashtable < String, Object > temp = (Hashtable < String, Object > ) itr.next();

	                                System.out.println("temp sC1_DEAL_PRODUCTQueryAL:-" + temp);

	                                String dbPRODUCT_CD = ((String) temp.get("PRODUCT_CD")).trim();

	                                System.out.println("SelectedProduct:-" + SelectedProduct + " || dbPRODUCT_CD :- " + dbPRODUCT_CD);
	                                if (SelectedProduct.equalsIgnoreCase(String.valueOf(dbPRODUCT_CD))) {
	                                    CF.FnTestCaseStatusReport("Pass", "Product -> " + SelectedProduct + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "<<xx DEAL Product Verification - sPRODUCT_CD -> " + SelectedProduct + " value from excel is not matching with DB xx>>");
	                                }
	                            }
	                        }

	                    }
	                    // C1_DEAL_PRODUCT loop1 closed




	                    itr = sC1_DealQueryAL.iterator();

	                    //loop1 Start
	                    for (int i = 0; i < sC1_DealQueryAL.size(); i++) {

	                        Hashtable < String, Object > temp = (Hashtable < String, Object > ) itr.next();

	                        System.out.println("temp sC1_DealQuery:-" + temp);

	                        String dbDEAL_ENTITY_TYPE_FLG = (String) temp.get("DEAL_ENTITY_TYPE_FLG");
	                        String dbDEAL_ENTITY_ID = (String) temp.get("DEAL_ENTITY_ID");
	                        String dbDealIdentifier = (String) temp.get("DEAL_IDENTIFIER");
	                        String dbDealType = (String) temp.get("DEAL_TYPE_CD");
	                        String dbDealCurrency = (String) temp.get("CURRENCY_CD");
	                        String dbSimulationType = (String) temp.get("SIMULATION_TYPE_FLG");
	                        String dbStartDate = (String) temp.get("START_DT");
	                        String dbPriceSelectionDate = (String) temp.get("PRICE_SEL_DT");
	                        String dbReviewFrequency = (String) temp.get("REVIEW_FREQUENCY_FLG");
	                        String dbDealFrequency = (String) temp.get("FREQUENCY_FLG");
	                        String dbUsageFrequency = (String) temp.get("USAGE_PERIOD_FLG");
	                        String dbDealDescription = null;
	                        String dbDealVersionDescription = null;
	                        String dbSkipReference = (String) temp.get("SKIP_REFERENCE_SW");
	                        String dbSkipQuestionnaire = (String) temp.get("SKIP_QUESN_SW");
	                        String dbTemplateDeal = (String) temp.get("TEMPLATE_SW");
	                        String dbCONTRACTED_DEAL_SW = (String) temp.get("CONTRACTED_DEAL_SW");
	                        String dbincludeHierarchyFlag = (String) temp.get("HIER_FILTER_FLG");
	                        String dbEndDate = (String) temp.get("END_DT");

//	                        if(dbincludeHierarchyFlag.equalsIgnoreCase("HIPR")) {
//	                        	dbincludeHierarchyFlag = "Y";
//	                        } else if(dbincludeHierarchyFlag.equalsIgnoreCase("WHEP")) {
//	                        	dbincludeHierarchyFlag = "N";
//	                        } 
//	                        else if (dbincludeHierarchyFlag.equalsIgnoreCase("WHPR")) {
//	                        	dbincludeHierarchyFlag = "N";
//	                        } 
	                        
	                        if(sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase("EPER") && sSimulationType.equalsIgnoreCase("CUST") && sincludeHierarchyFlag.equalsIgnoreCase("N"))
	                        {
	                        	sincludeHierarchyFlag = "WHEP";
	                        } else if(sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase("EPER") && sSimulationType.equalsIgnoreCase("CUST") && sincludeHierarchyFlag.equalsIgnoreCase("Y"))
	                        {
	                        	sincludeHierarchyFlag = "HIPR";
	                        } else if(sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase("PRSP") && sSimulationType.equalsIgnoreCase("CUST") && sincludeHierarchyFlag.equalsIgnoreCase("Y"))
	                        {
	                        	sincludeHierarchyFlag = "HIPR";
	                        } else if(sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase("PRSP") && sSimulationType.equalsIgnoreCase("CUST") && sincludeHierarchyFlag.equalsIgnoreCase("N"))
	                        {
	                        	sincludeHierarchyFlag = "HIPR";
	                        } else {  
		                        if((sSimulationType.equalsIgnoreCase("DEAL") || sSimulationType.equalsIgnoreCase("ACCT")) && sincludeHierarchyFlag.equalsIgnoreCase("N"))
		                        {
		                        	sincludeHierarchyFlag = "";
		                        }
	                        }
	                        
	                        if (!sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDEAL_ENTITY_TYPE_FLG:-" + sDEAL_ENTITY_TYPE_FLG + " || dbDEAL_ENTITY_TYPE_FLG :- " + dbDEAL_ENTITY_TYPE_FLG);
	                            if (sDEAL_ENTITY_TYPE_FLG.equalsIgnoreCase(dbDEAL_ENTITY_TYPE_FLG.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sDEAL_ENTITY_TYPE_FLG -> " + sDEAL_ENTITY_TYPE_FLG + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "<<xx DEAL Information Verification - sDEAL_ENTITY_TYPE_FLG -> " + sDEAL_ENTITY_TYPE_FLG + " value from excel is not matching with DB xx>>");
	                            }
	                        }


	                        if (!sDEAL_ENTITY_ID.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDEAL_ENTITY_ID :- " + sDEAL_ENTITY_ID + " || dbDEAL_ENTITY_ID :- " + dbDEAL_ENTITY_ID);
	                            if (sDEAL_ENTITY_ID.equalsIgnoreCase(dbDEAL_ENTITY_ID.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sDEAL_ENTITY_ID - " + sDEAL_ENTITY_ID + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sDEAL_ENTITY_ID - " + sDEAL_ENTITY_ID + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sDealIdentifier.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDealIdentifier :- " + sDealIdentifier + " || dbDealIdentifier :- " + dbDealIdentifier.trim());
	                            if (dbDealIdentifier.trim().contains(sDealIdentifier)) {
	                                CF.FnTestCaseStatusReport("Pass", "sDealIdentifier - " + sDealIdentifier + " value from excel is contains with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sDealIdentifier - " + sDealIdentifier + " value from excel is not contains with DB");
	                            }
	                        }


	                        if (!sDealType.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDealType :- " + sDealType + " || dbDealType :-" + dbDealType.trim());
	                            if (sDealType.equalsIgnoreCase(dbDealType.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sDealType - " + sDealType + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sDealType - " + sDealType + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sDealCurrency.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDealCurrency :- " + sDealCurrency + " || dbDealCurrency :- " + dbDealCurrency.trim());
	                            if (sDealCurrency.equalsIgnoreCase(dbDealCurrency.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sDealCurrency - " + sDealCurrency + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sDealCurrency - " + sDealCurrency + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sSimulationType.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sSimulationType:-" + sSimulationType + " || dbSimulationType :- " + dbSimulationType);
	                            if (sSimulationType.equalsIgnoreCase(dbSimulationType.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sSimulationType - " + sSimulationType + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sSimulationType - " + sSimulationType + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sStartDate.equalsIgnoreCase("NoValue")) {
	                            dbStartDate = dbStartDate.replaceAll("\\s.*", "");
	                            System.out.println("sStartDate :- " + sStartDate + " || dbStartDate :- " + dbStartDate);
	                            if (sStartDate.equalsIgnoreCase(dbStartDate.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sStartDate - " + sStartDate + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sStartDate - " + sStartDate + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sPriceSelectionDate.equalsIgnoreCase("NoValue")) {
	                            dbPriceSelectionDate = dbPriceSelectionDate.replaceAll("\\s.*", "");
	                            System.out.println("sPriceSelectionDate :- " + sPriceSelectionDate + " || dbPriceSelectionDate :- " + dbPriceSelectionDate.trim());
	                            if (sPriceSelectionDate.equalsIgnoreCase(dbPriceSelectionDate.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sPriceSelectionDate - " + sPriceSelectionDate + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sPriceSelectionDate - " + sPriceSelectionDate + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sReviewFrequency.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sReviewFrequency :- " + sReviewFrequency + " || dbReviewFrequency :-" + dbReviewFrequency.trim());
	                            if (sReviewFrequency.equalsIgnoreCase(dbReviewFrequency.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sReviewFrequency - " + sReviewFrequency + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sReviewFrequency - " + sReviewFrequency + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sDealFrequency.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sDealFrequency :- " + sDealFrequency + " || dbDealFrequency :- " + dbDealFrequency.trim());
	                            if (sDealFrequency.equalsIgnoreCase(dbDealFrequency.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sDealFrequency - " + sDealFrequency + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sDealFrequency - " + sDealFrequency + " value from excel is not matching with DB");
	                            }
	                        }



	                        if (!sUsageFrequency.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sUsageFrequency:-" + sUsageFrequency + " || dbUsageFrequency :- " + dbUsageFrequency);
	                            if (sUsageFrequency.equalsIgnoreCase(dbUsageFrequency.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sUsageFrequency - " + sUsageFrequency + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sUsageFrequency - " + sUsageFrequency + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sSkipReference.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sSkipReference :- " + sSkipReference + " || dbSkipReference :- " + dbSkipReference);
	                            if (sSkipReference.equalsIgnoreCase(dbSkipReference.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sSkipReference - " + sSkipReference + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sSkipReference - " + sSkipReference + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sSkipQuestionnaire.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sSkipQuestionnaire :- " + sSkipQuestionnaire + " || dbSkipQuestionnaire :- " + dbSkipQuestionnaire.trim());
	                            if (sSkipQuestionnaire.equalsIgnoreCase(dbSkipQuestionnaire.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sSkipQuestionnaire - " + sSkipQuestionnaire + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sSkipQuestionnaire - " + sSkipQuestionnaire + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sTemplateDeal.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sTemplateDeal :- " + sTemplateDeal + " || dbTemplateDeal :-" + dbTemplateDeal.trim());
	                            if (sTemplateDeal.equalsIgnoreCase(dbTemplateDeal.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sTemplateDeal - " + sTemplateDeal + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sTemplateDeal - " + sTemplateDeal + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sCONTRACTED_DEAL_SW.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sCONTRACTED_DEAL_SW :- " + sCONTRACTED_DEAL_SW + " || dbCONTRACTED_DEAL_SW :- " + dbCONTRACTED_DEAL_SW.trim());
	                            if (sCONTRACTED_DEAL_SW.equalsIgnoreCase(dbCONTRACTED_DEAL_SW.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sCONTRACTED_DEAL_SW - " + sCONTRACTED_DEAL_SW + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sCONTRACTED_DEAL_SW - " + sCONTRACTED_DEAL_SW + " value from excel is not matching with DB");
	                            }
	                        }


	                        if (!sincludeHierarchyFlag.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sincludeHierarchyFlag :- " + sincludeHierarchyFlag + " || dbincludeHierarchyFlag :-" + dbincludeHierarchyFlag.trim());
	                            if (sincludeHierarchyFlag.equalsIgnoreCase(dbincludeHierarchyFlag.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sincludeHierarchyFlag - " + sincludeHierarchyFlag + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sincludeHierarchyFlag - " + sincludeHierarchyFlag + " value from excel is not matching with DB");
	                            }
	                        }

	                        if (!sEndDate.equalsIgnoreCase("NoValue")) {
	                            System.out.println("sEndDate :- " + sEndDate + " || dbEndDate :- " + dbEndDate.trim());
	                            if (sEndDate.equalsIgnoreCase(dbEndDate.trim())) {
	                                CF.FnTestCaseStatusReport("Pass", "sEndDate - " + sEndDate + " value from excel is matching with DB");
	                            } else {
	                                CF.FnTestCaseStatusReport("Fail", "sEndDate - " + sEndDate + " value from excel is not matching with DB");
	                            }
	                        }


	                        sStartingRow = sStartingRow + 1;
	                    }
	                    //loop1 closed


	                    if (sSkipReference.equalsIgnoreCase("N")) {

	                        String sC1_DEAL_REFERENCESQuery = "SELECT * FROM C1_DEAL_REFERENCES WHERE DEAL_ID = '" + sDealId + "'";
	                        System.out.println("DEAL sC1_DEAL_REFERENCESQuery Information => " + sC1_DEAL_REFERENCESQuery);
	                        ArrayList < Hashtable < String, Object >> sC1_DEAL_REFERENCESQueryAL = (ArrayList < Hashtable < String, Object >> ) fnGetAllValuefromDB(sC1_DEAL_REFERENCESQuery);
	                        System.out.println("sC1_DEAL_REFERENCESQueryAL AL:-" + sC1_DEAL_REFERENCESQueryAL);


	                        //loop2 Start
	                        itr = null;
	                        itr = sC1_DEAL_REFERENCESQueryAL.iterator();
	                        for (int i = 0; i < sC1_DEAL_REFERENCESQueryAL.size(); i++) {

	                            Hashtable < String, Object > temp = (Hashtable < String, Object > ) itr.next();

	                            System.out.println("temp sC1_DealQuery:-" + temp);


	                            String dbREFERENCE_TYPE_FLG = (String) temp.get("REFERENCE_TYPE_FLG");
	                            String dbREF_DEAL_ID = (String) temp.get("REF_DEAL_ID");
	                            String dbREF_MODEL_ID = (String) temp.get("REF_MODEL_ID");
	                            String dbPER_ID = (String) temp.get("PER_ID");
	                            String dbREFER_USAGE_SW = (String) temp.get("REFER_USAGE_SW");
	                            String dbREFER_PRICE_SW = (String) temp.get("REFER_PRICE_SW");
	                            String dbINCLUDE_CHILD_HIREARCHY_SW = (String) temp.get("INCLUDE_CHILD_HIREARCHY_SW");


	                            if (!sREFERENCE_TYPE_FLG.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sREFERENCE_TYPE_FLG:-" + sREFERENCE_TYPE_FLG + " || dbREFERENCE_TYPE_FLG :- " + dbREFERENCE_TYPE_FLG);
	                                if (sREFERENCE_TYPE_FLG.equalsIgnoreCase(dbREFERENCE_TYPE_FLG.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREFERENCE_TYPE_FLG - " + sREFERENCE_TYPE_FLG + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREFERENCE_TYPE_FLG - " + sREFERENCE_TYPE_FLG + " value from excel is not matching with DB");
	                                }
	                            }


	                            if (!sREF_DEAL_ID.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sREF_DEAL_ID :- " + sREF_DEAL_ID + " || dbDEAL_ID :- " + dbREF_DEAL_ID);
	                                if (sREF_DEAL_ID.equalsIgnoreCase(dbREF_DEAL_ID.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREF_DEAL_ID - " + sREF_DEAL_ID + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREF_DEAL_ID - " + sREF_DEAL_ID + " value from excel is not matching with DB");
	                                }
	                            }

	                            if (!sREF_MODEL_ID.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sREF_MODEL_ID :- " + sREF_MODEL_ID + " || dbREF_MODEL_ID :- " + dbREF_MODEL_ID.trim());
	                                if (sREF_MODEL_ID.equalsIgnoreCase(dbREF_MODEL_ID.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREF_MODEL_ID - " + sREF_MODEL_ID + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREF_MODEL_ID - " + sREF_MODEL_ID + " value from excel is not matching with DB");
	                                }
	                            }


	                            if (!sREF_PER_ID.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sPER_ID :- " + sREF_PER_ID + " || dbPER_ID :-" + dbPER_ID.trim());
	                                if (sREF_PER_ID.equalsIgnoreCase(dbPER_ID.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREF_PER_ID - " + sREF_PER_ID + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREF_PER_ID - " + sREF_PER_ID + " value from excel is not matching with DB");
	                                }
	                            }

	                            if (!sREFER_USAGE_SW.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sREFER_USAGE_SW :- " + sREFER_USAGE_SW + " || dbREFER_USAGE_SW :- " + dbREFER_USAGE_SW.trim());
	                                if (sREFER_USAGE_SW.equalsIgnoreCase(dbREFER_USAGE_SW.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREFER_USAGE_SW - " + sREFER_USAGE_SW + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREFER_USAGE_SW - " + sREFER_USAGE_SW + " value from excel is not matching with DB");
	                                }
	                            }


	                            if (!sREFER_PRICE_SW.equalsIgnoreCase("NoValue")) {
	                                System.out.println("sREFER_PRICE_SW:-" + sREFER_PRICE_SW + " || dbREFER_PRICE_SW :- " + dbREFER_PRICE_SW);
	                                if (sREFER_PRICE_SW.equalsIgnoreCase(dbREFER_PRICE_SW.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sREFER_PRICE_SW - " + sREFER_PRICE_SW + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sREFER_PRICE_SW - " + sREFER_PRICE_SW + " value from excel is not matching with DB");
	                                }
	                            }


	                            if (!sINCLUDE_CHILD_HIREARCHY_SW.equalsIgnoreCase("NoValue")) {
	                                dbINCLUDE_CHILD_HIREARCHY_SW = dbINCLUDE_CHILD_HIREARCHY_SW.replaceAll("\\s.*", "");
	                                System.out.println("sINCLUDE_CHILD_HIREARCHY_SW :- " + sINCLUDE_CHILD_HIREARCHY_SW + " || dbINCLUDE_CHILD_HIREARCHY_SW :- " + dbINCLUDE_CHILD_HIREARCHY_SW);
	                                if (sINCLUDE_CHILD_HIREARCHY_SW.equalsIgnoreCase(dbINCLUDE_CHILD_HIREARCHY_SW.trim())) {
	                                    CF.FnTestCaseStatusReport("Pass", "sINCLUDE_CHILD_HIREARCHY_SW - " + sINCLUDE_CHILD_HIREARCHY_SW + " value from excel is matching with DB");
	                                } else {
	                                    CF.FnTestCaseStatusReport("Fail", "sINCLUDE_CHILD_HIREARCHY_SW - " + sINCLUDE_CHILD_HIREARCHY_SW + " value from excel is not matching with DB");
	                                }
	                            }




	                            sStartingRow = sStartingRow + 1;
	                        }
	                        //loop2 End
	                    }



	                } else {
	                    System.out.println("Deal Data not available in db");
	                }


	            } else {
	                //NOVALUE

	                String ErrorMessageFromIWS = sDealId;

	                System.out.println("sDealId ==> " + sDealId);

	                if (!sErrorMessageText.equalsIgnoreCase("NoValue")) {
	                    System.out.println("sErrorMessageText :- " + sErrorMessageText + " || ErrorMessageFromIWS :- " + ErrorMessageFromIWS);
	                    if (sErrorMessageText.contains("Duplicate key error")) {
	                        sErrorMessageText = sErrorMessageText.replaceAll("\\d.", "").trim();
	                        ErrorMessageFromIWS = ErrorMessageFromIWS.replaceAll("\\d.", "").trim();
	                        System.out.println("@@ sErrorMessageText :- " + sErrorMessageText + " || ErrorMessageFromIWS :- " + ErrorMessageFromIWS);
	                    }
	                    if (sErrorMessageText.equalsIgnoreCase(ErrorMessageFromIWS)) {
	                        CF.FnTestCaseStatusReport("Pass", "sErrorMessageText - " + sErrorMessageText + " value from excel is matching with System Error");
	                    } else {
	                        CF.FnTestCaseStatusReport("Fail", "sErrorMessageText - " + sErrorMessageText + " value from excel is not matching with System Error -"+ErrorMessageFromIWS);
	                    }
	                }

	            }


	        }
	    } catch (Exception e) {
	        System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
	        e.printStackTrace();
	        BaseTest.eFlgFound = "false";
	        CF.FnTestCaseStatusReport("Fail", "Application Function Exception occured ->\n" + CF.erromsg(e));
	    }
	}
	
	
	
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifyPricingAndCommitmentDetails
    'Function Description : This function to verify Deal Proposed SQI & Pricing Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item SQI Details at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnVerifyPricingAndCommitmentDetails(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnVerifyPricingAndCommitmentDetails===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String c1_model_sqiQuery,c1_deal_simulation_dtlQuery,sPRICEITEM_CD,sSTART_DT,sEND_DT,sSQI_TYPE_FLG_OG,sPRICEITEM_PARM,sSQI_CD,sSVC_QTY,sSQI_TYPE_FLG,sAVERAGE_PRICE,sREVENUE,sCOST,sSTATUS_CD,sPRICE_ASSIGNMENT_LEVEL,sPRICE_ASSIGNMENT_TYPE;
    			
                //sqi c1_model_sqi
    			sPRICEITEM_CD           =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
    			sPRICEITEM_PARM     	=  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
    			sSQI_TYPE_FLG_OG		    =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
    			sSTART_DT				=  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
    			sEND_DT					=  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
    			sSQI_CD     	        =  CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
    			sSVC_QTY 		  	    =  CF.FnGetCellValue(iStartingRow,10, sSheetName, sWorkbook).toString().trim();
    			////sCIS_DIVISION		    =  CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
    			
                //smld c1_deal_simulation_dtl		
    			sAVERAGE_PRICE     	    =  CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
    			sREVENUE 		  	    =  CF.FnGetCellValue(iStartingRow,11, sSheetName, sWorkbook).toString().trim();
    			sCOST				    =  CF.FnGetCellValue(iStartingRow,13, sSheetName, sWorkbook).toString().trim();
    			sSTATUS_CD		 	    =  CF.FnGetCellValue(iStartingRow,16, sSheetName, sWorkbook).toString().trim();
    			sPRICE_ASSIGNMENT_LEVEL =  CF.FnGetCellValue(iStartingRow,15, sSheetName, sWorkbook).toString().trim();
    			
    			sPRICE_ASSIGNMENT_TYPE =  CF.FnGetCellValue(iStartingRow,19, sSheetName, sWorkbook).toString().trim();

    			sSQI_TYPE_FLG = sSQI_TYPE_FLG_OG;
    			
    			if(!sSVC_QTY.equalsIgnoreCase("NoValue")) {
        			sSVC_QTY = new DecimalFormat("0.##").format(Double.parseDouble(sSVC_QTY));
    			}
    			if(!sAVERAGE_PRICE.equalsIgnoreCase("NoValue")) {
        			sAVERAGE_PRICE = new DecimalFormat("0.##").format(Double.parseDouble(sAVERAGE_PRICE));
    			}
    			if(!sREVENUE.equalsIgnoreCase("NoValue")) {
        			sREVENUE = new DecimalFormat("0.##").format(Double.parseDouble(sREVENUE));	
    			}
    			if(!sCOST.equalsIgnoreCase("NoValue")) {
        			sCOST = new DecimalFormat("0.##").format(Double.parseDouble(sCOST));
    			}

    			System.out.println(iStartingRow+"(--->> PRICEITEM_CD :- "+sPRICEITEM_CD+" <<---)");
    			System.out.println(iStartingRow+"(--->> sSVC_QTY :- "+sSVC_QTY+" <<---)");

    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				
    			int sStartingRow = iStartingRow;
    			java.util.Iterator<Hashtable<String, Object>> itr;
    			
    			
    			if(!sSVC_QTY.equals("NoValue")) {
    			
    		
    			
				System.out.println("sSQI_TYPE_FLG 1 :-> "+sSQI_TYPE_FLG);
				if (sSQI_TYPE_FLG.equals("Original")) {  //active commitment always greater than 1
					sSQI_TYPE_FLG = "ACTV";
				} else {
					sSQI_TYPE_FLG = "PRPD";
				}
				System.out.println("sSQI_TYPE_FLG 2 :-> "+sSQI_TYPE_FLG);

    			
    			if (sPRICEITEM_PARM.equals("NoValue") && (sSQI_TYPE_FLG.equals("PRPD") && !sSVC_QTY.equals("NoValue"))) {
        			c1_model_sqiQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,SQI_CD,SVC_QTY,SQI_TYPE_FLG,CIS_DIVISION from c1_model_sqi where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = '1' AND SQI_TYPE_FLG = 'PRPD' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
    			} else if(!sPRICEITEM_PARM.equals("NoValue") && (sSQI_TYPE_FLG.equals("PRPD"))) {
    				c1_model_sqiQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,SQI_CD,SVC_QTY,SQI_TYPE_FLG,CIS_DIVISION from c1_model_sqi where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = (SELECT PRICEITEM_PARM_GRP_ID FROM CI_PRICEITEM_PARM_GRP_K where PARM_STR = '"+sPRICEITEM_PARM+"') AND SQI_TYPE_FLG = 'PRPD' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
				} else if(sPRICEITEM_PARM.equals("NoValue") && sSQI_TYPE_FLG.equals("ACTV")){
        			c1_model_sqiQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,SQI_CD,SVC_QTY,SQI_TYPE_FLG,CIS_DIVISION from c1_model_sqi where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = '1' AND SQI_TYPE_FLG = 'ACTV' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
				} else if(!sPRICEITEM_PARM.equals("NoValue") && (sSQI_TYPE_FLG.equals("ACTV"))) {
    				c1_model_sqiQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,SQI_CD,SVC_QTY,SQI_TYPE_FLG,CIS_DIVISION from c1_model_sqi where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = (SELECT PRICEITEM_PARM_GRP_ID FROM CI_PRICEITEM_PARM_GRP_K where PARM_STR = '"+sPRICEITEM_PARM+"') AND SQI_TYPE_FLG = 'ACTV' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
				} else {
        			c1_model_sqiQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,SQI_CD,SVC_QTY,SQI_TYPE_FLG,CIS_DIVISION from c1_model_sqi where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
				}
    			
    			System.out.println("@@ DEAL SQI c1_model_sqiQuery => "+c1_model_sqiQuery);
    			ArrayList<Hashtable<String, Object>>  c1_model_sqiQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(c1_model_sqiQuery);
    			System.out.println("c1_model_sqiQueryAL:-"+c1_model_sqiQueryAL);
    			

    			itr = c1_model_sqiQueryAL.iterator();

    			
				
				float dbSVC_QtyNum = 0;
				
				System.out.println("<<<<<<= size c1_model_sqiQueryAL=>>>>>>"+c1_model_sqiQueryAL.size());
                //loop1 start
				for(int i=0;i<c1_model_sqiQueryAL.size();i++)
				{
					
					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                             
					System.out.println("temp c1_model_sqiQuery:-" +temp);
					String dbPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
					String dbSQI_CD=(String)temp.get("SQI_CD");
					String dbSVC_QTY=(String)temp.get("SVC_QTY");
					String dbSQI_TYPE_FLG=(String)temp.get("SQI_TYPE_FLG");
					String dbCIS_DIVISION=(String)temp.get("CIS_DIVISION");                     

					float dbSVC_QtyNum1 = Float.parseFloat(dbSVC_QTY);  //Integer.valueOf(dbSVC_QTY); 
					dbSVC_QtyNum = dbSVC_QtyNum1 + dbSVC_QtyNum;
					
					System.out.println("<<<= dbSVC_QtyNum1 =>>>"+dbSVC_QtyNum1);
					if(!sPRICEITEM_CD.equalsIgnoreCase("NoValue"))
					{
    					System.out.println("<<== sPRICEITEM_CD:-"+sPRICEITEM_CD+" || dbPRICEITEM_CD :- "+dbPRICEITEM_CD+" ==>>");
						if (sPRICEITEM_CD.equalsIgnoreCase(dbPRICEITEM_CD.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "<<== sPRICEITEM_CD - "+sPRICEITEM_CD+" value from excel is matching with DB ==>>");    	
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail", "<<xx sPRICEITEM_CD - "+sPRICEITEM_CD+" value from excel is not matching with DB xx>>"); 
						}   
					}
					
					
					if(!sSQI_CD.equalsIgnoreCase("NoValue"))
					{
    					System.out.println(dbPRICEITEM_CD+" sSQI_CD :- "+sSQI_CD+" || dbSQI_CD :- "+dbSQI_CD);
						if (sSQI_CD.equalsIgnoreCase(dbSQI_CD.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "sSQI_CD - "+sSQI_CD+" value from excel is matching with DB");    	
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail", "sSQI_CD - "+sSQI_CD+" value from excel is not matching with DB "+dbSQI_CD); 
						}   
					}
					
					System.out.println("sSQI_TYPE_FLG :- "+sSQI_TYPE_FLG+" || dbSQI_TYPE_FLG :- "+dbSQI_TYPE_FLG);

					
					if(!sSQI_TYPE_FLG.equalsIgnoreCase("NoValue"))
					{
						if(sSQI_TYPE_FLG.equals("OVRD") || sSQI_TYPE_FLG.equals("UPD") || sSQI_TYPE_FLG.equals("DEL")) {
							sSQI_TYPE_FLG = "PRPD";
						}

    					System.out.println("sSQI_TYPE_FLG :- "+sSQI_TYPE_FLG+" || dbSQI_TYPE_FLG :- "+dbSQI_TYPE_FLG.trim());   
						if (sSQI_TYPE_FLG.equalsIgnoreCase(dbSQI_TYPE_FLG.trim()))
						{
							CF.FnTestCaseStatusReport("Pass", "sSQI_TYPE_FLG - "+sSQI_TYPE_FLG+" value from excel is matching with DB");    	
						}
						else 
						{
							CF.FnTestCaseStatusReport("Fail", "sSQI_TYPE_FLG - "+sSQI_TYPE_FLG+" value from excel is not matching with DB "+dbSQI_TYPE_FLG); 
						}   
					}

					sStartingRow = sStartingRow + 1;
				}
				
				System.out.println("<<<<<<= dbSVC_QtyNum =>>>>>>"+dbSVC_QtyNum);

				if(!sSVC_QTY.equalsIgnoreCase("NoValue"))
				{
					String dbValue = String.valueOf(dbSVC_QtyNum);

					dbValue = dbValue.trim();
					dbValue = new DecimalFormat("0.##").format(Double.parseDouble(dbValue));
        			sSVC_QTY = new DecimalFormat("0.##").format(Double.parseDouble(dbValue));


					System.out.println("sSVC_QTY :- "+Float.valueOf(sSVC_QTY)+" || dbSVC_QTY :- "+Float.valueOf(dbValue));
					if (Float.valueOf(sSVC_QTY).equals(Float.valueOf(dbValue)))
					{
						CF.FnTestCaseStatusReport("Pass", "sSVC_QTY - "+sSVC_QTY+" value from excel is matching with DB");    	
					}
					else 
					{
						CF.FnTestCaseStatusReport("Fail", "sSVC_QTY - "+sSVC_QTY+" value from excel is not matching with DB "+dbValue); 
					}   
				}
                //loop1 stop
    			}
    			
    			if(!sSVC_QTY.equals("NoValue") || sPRICE_ASSIGNMENT_TYPE.equals("POST")) {
    			
    				System.out.println("@@@rt@@@@ price item for simulation :-"+sPRICEITEM_CD);

    			if(sSQI_TYPE_FLG_OG.equalsIgnoreCase("Seasonal")) {
    				sSQI_TYPE_FLG_OG = "SEAS";
    			} else if (sSQI_TYPE_FLG_OG.equalsIgnoreCase("Original")) {
    				sSQI_TYPE_FLG_OG = "ACTV";
    			} else {
    				sSQI_TYPE_FLG_OG = "PRPD";	
    			}
    			
                if (sPRICEITEM_PARM.equals("NoValue")) {
        			c1_deal_simulation_dtlQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,AVERAGE_PRICE,REVENUE,COST,STATUS_CD,PRICE_ASSIGNMENT_LEVEL from c1_deal_simulation_dtl where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = '1' AND SQI_TYPE_FLG = '"+sSQI_TYPE_FLG_OG+"' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
    			} else {			
    				c1_deal_simulation_dtlQuery = "select PRICEITEM_CD,PRICEITEM_PARM_GRP_ID,AVERAGE_PRICE,REVENUE,COST,STATUS_CD,PRICE_ASSIGNMENT_LEVEL from c1_deal_simulation_dtl where DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"') AND PRICEITEM_PARM_GRP_ID = (SELECT PRICEITEM_PARM_GRP_ID FROM CI_PRICEITEM_PARM_GRP_K where PARM_STR = '"+sPRICEITEM_PARM+"') AND SQI_TYPE_FLG = '"+sSQI_TYPE_FLG_OG+"' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
				}
                
    			ArrayList<Hashtable<String, Object>>  c1_deal_simulation_dtlQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(c1_deal_simulation_dtlQuery);
    			System.out.println("c1_deal_simulation_dtlQueryAL:-"+c1_deal_simulation_dtlQueryAL);


    				//loop2 Start
    				itr = null;
    				itr = c1_deal_simulation_dtlQueryAL.iterator();
    				for(int i=0;i<c1_deal_simulation_dtlQueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("c1_deal_simulation_dtl sQuery:-" +temp);
    					String dbPRICEITEM_CD=(String)temp.get("PRICEITEM_CD");
    					String dbAVERAGE_PRICE=(String)temp.get("AVERAGE_PRICE");
    					String dbREVENUE=(String)temp.get("REVENUE");
    					String dbCOST=(String)temp.get("COST");
    					String dbSTATUS_CD=(String)temp.get("STATUS_CD");                     
    					String dbPRICE_ASSIGNMENT_LEVEL=(String)temp.get("PRICE_ASSIGNMENT_LEVEL");                     

    					dbAVERAGE_PRICE = new DecimalFormat("0.##").format(Double.parseDouble(dbAVERAGE_PRICE));
    					dbREVENUE = new DecimalFormat("0.##").format(Double.parseDouble(dbREVENUE));
    					dbCOST = new DecimalFormat("0.##").format(Double.parseDouble(dbCOST));


    					if(!sPRICEITEM_CD.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sPRICEITEM_CD:-"+sPRICEITEM_CD+" || dbPRICEITEM_CD :- "+dbPRICEITEM_CD+"");
    						if (sPRICEITEM_CD.equalsIgnoreCase(dbPRICEITEM_CD.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sPRICEITEM_CD - "+sPRICEITEM_CD+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sPRICEITEM_CD - "+sPRICEITEM_CD+" value from excel is not matching with DB"); 
    						}   
    					}
    					
    					
    					if(!sAVERAGE_PRICE.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println(dbPRICEITEM_CD+" sAVERAGE_PRICE :- "+sAVERAGE_PRICE+" || dbAVERAGE_PRICE :- "+dbAVERAGE_PRICE);
    						if (sAVERAGE_PRICE.equalsIgnoreCase(dbAVERAGE_PRICE.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sAVERAGE_PRICE - "+sAVERAGE_PRICE+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sAVERAGE_PRICE - "+sAVERAGE_PRICE+" value from excel is not matching with DB "+dbAVERAGE_PRICE+""); 
    						}   
    					}
    					
    					
    					if(!sREVENUE.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sREVENUE :- "+sREVENUE+" || dbREVENUE :- "+dbREVENUE);
    						if (sREVENUE.equalsIgnoreCase(dbREVENUE.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sREVENUE - "+sREVENUE+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sREVENUE - "+sREVENUE+" value from excel is not matching with DB "+dbREVENUE); 
    						}   
    					}
    					
    					if(!sCOST.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sCOST :- "+sCOST+" || dbCOST :- "+dbCOST.trim());   
    						if (sCOST.equalsIgnoreCase(dbCOST.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sCOST - "+sCOST+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sCOST - "+sCOST+" value from excel is not matching with DB "+dbCOST); 
    						}   
    					}
    					
    					
    					if(!sSTATUS_CD.equalsIgnoreCase("NoValue"))
    					{
    						if(sSTATUS_CD.equalsIgnoreCase("Approved")) {
    							sSTATUS_CD = "APPR";
    						} else if(sSTATUS_CD.equalsIgnoreCase("Error")) {
    							sSTATUS_CD = "EROR";
    						} else if(sSTATUS_CD.equalsIgnoreCase("Pending For Approval")) {
    							sSTATUS_CD = "UNAP";
    						}
        					System.out.println("sSTATUS_CD :- "+sSTATUS_CD+" || dbSTATUS_CD :-"+dbSTATUS_CD.trim());
    						if (sSTATUS_CD.equalsIgnoreCase(dbSTATUS_CD.trim())) {
    							CF.FnTestCaseStatusReport("Pass", "sSTATUS_CD - "+sSTATUS_CD+" value from excel is matching with DB");    	
    						} else if (dbSTATUS_CD.trim().equalsIgnoreCase("VALID") && sSTATUS_CD.equalsIgnoreCase("APPR")) {
    							CF.FnTestCaseStatusReport("Pass", "sSTATUS_CD - "+sSTATUS_CD+" value from excel is matching with DB");    	
    						} else {
//    							CF.FnTestCaseStatusReport("Fail", "sSTATUS_CD - "+sSTATUS_CD+" value from excel is not matching with DB "+dbSTATUS_CD); 
            					System.err.println("sSTATUS_CD :- "+sSTATUS_CD+" || dbSTATUS_CD :-"+dbSTATUS_CD.trim());
    						}   
    					}
    					
    					if(!sPRICE_ASSIGNMENT_LEVEL.equalsIgnoreCase("NoValue"))
    					{
    						if(sPRICE_ASSIGNMENT_LEVEL.equals("Customer Price List")) {
    							sPRICE_ASSIGNMENT_LEVEL = "CUPL";
    						} else if(sPRICE_ASSIGNMENT_LEVEL.equals("Customer Agreed")) {
    							sPRICE_ASSIGNMENT_LEVEL = "CUAD";
    						} else if(sPRICE_ASSIGNMENT_LEVEL.equals("Parent Customer Price List")) {
    							sPRICE_ASSIGNMENT_LEVEL = "PCPL";
    						} else if(sPRICE_ASSIGNMENT_LEVEL.equals("Parent Customer Agreed")) {
    							sPRICE_ASSIGNMENT_LEVEL = "PCAD";
    						}
    						
        					System.out.println("sPRICE_ASSIGNMENT_LEVEL :- "+sPRICE_ASSIGNMENT_LEVEL+" || dbPRICE_ASSIGNMENT_LEVEL :- "+dbPRICE_ASSIGNMENT_LEVEL.trim()); 
    						if (sPRICE_ASSIGNMENT_LEVEL.equalsIgnoreCase(dbPRICE_ASSIGNMENT_LEVEL.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sPRICE_ASSIGNMENT_LEVEL - "+sPRICE_ASSIGNMENT_LEVEL+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sPRICE_ASSIGNMENT_LEVEL - "+sPRICE_ASSIGNMENT_LEVEL+" value from excel is not matching with DB "+dbPRICE_ASSIGNMENT_LEVEL); 
    						}   
    					}
    					
    					
    					sStartingRow = sStartingRow + 1;
    				}
    			} 
                //loop2 END
    			}

    			} else {
    				System.out.println("Deal Pricing & Commitment Data not available in db");
    			} 		
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	
    
    
	/*##########################################################################################################################################################################################################################/
    'Function Name        : Deal_Simulation_Summary
    'Function Description : This function to verify simulation Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void Deal_Simulation_Summary(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===Deal_Simulation_Summary===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String sProposedQuery,sOriginalQuery,sDivision,sApprovalStatus,sProposedRevenue,sProposedCost,sProposedProfit,sProposedProfitability,sOriginalRevenue,sOriginalCost,sOriginalProfit,sOriginalProfitability,sCurrency;
    			
    			sDivision            =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
    			//// sApprovalStatus      =  CF.FnGetCellValue(iStartingRow,2, sSheetName, sWorkbook).toString().trim();
    			sProposedRevenue	 =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
    			sProposedCost		 =  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
    			sProposedProfit      =  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
    			sProposedProfitability =  CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
    			sOriginalRevenue	 =  CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
    			sOriginalCost	     =  CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
    			sOriginalProfit      =  CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
    			sOriginalProfitability =  CF.FnGetCellValue(iStartingRow,10, sSheetName, sWorkbook).toString().trim();
    			sCurrency     		 =  CF.FnGetCellValue(iStartingRow,12, sSheetName, sWorkbook).toString().trim();



    			System.out.println("sProposedRevenue:-"+sProposedRevenue+" || sProposedCost:-"+sProposedCost+" || sProposedProfitability:-"+sProposedProfitability);
    			System.out.println("sOriginalRevenue:-"+sOriginalRevenue+" || sOriginalCost:-"+sOriginalCost+" || sOriginalProfit:-"+sOriginalProfit+" || sOriginalProfitability:-"+sOriginalProfitability);

    			
    			////sQuery = "select SQI_TYPE_FLG,ApprovalStatus,ProposedRevenue,ProposedCost,ProposedProfit, from c1_deal_simulation_smry where  SQI_TYPE_FLG = '"+sDivision+"' AND DEAL_ENTITY_ID = (select PER_ID from c1_model where model_id = '"+model_Id+"')";
    			sProposedQuery = "SELECT SQI_TYPE_FLG,STATUS_CD,REVENUE,COST,PROFITABILITY_VAL,CURRENCY_CD FROM c1_deal_simulation_smry WHERE SQI_TYPE_FLG = 'PRPD' AND DEAL_ENTITY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')";
                System.out.println("DEAL sProposed Query => "+sProposedQuery);
    			ArrayList<Hashtable<String, Object>>  sProposedQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sProposedQuery);
    			System.out.println("Proposed Deal SMRY AL:-"+sProposedQueryAL);
    		
                sOriginalQuery = "SELECT SQI_TYPE_FLG,STATUS_CD,REVENUE,COST,PROFITABILITY_VAL,CURRENCY_CD FROM c1_deal_simulation_smry WHERE SQI_TYPE_FLG = 'ACTV' AND DEAL_ENTITY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')";
                System.out.println("DEAL sOriginalQuery Query => "+sOriginalQuery);
    			ArrayList<Hashtable<String, Object>>  sOriginalQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sOriginalQuery);
    			System.out.println("sOriginalQuery Deal SMRY AL:-"+sOriginalQueryAL);
    		
    			

            
            	if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = sProposedQueryAL.iterator();
    				
                    //LOOP1 Start
    				for(int i=0;i<sProposedQueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("temp sQuery:-" +temp);

    					String dbProposedSQI_TYPE_FLG    = (String)temp.get("SQI_TYPE_FLG");                     
                        String dbProposedSTATUS_CD         = (String)temp.get("STATUS_CD"); 
                        String dbProposedRevenue	       = (String)temp.get("REVENUE"); 
                        String dbProposedCost		       = (String)temp.get("COST"); 
                        String dbProposedProfitability     = (String)temp.get("PROFITABILITY_VAL"); 
                        String dbProposedCurrency          = (String)temp.get("CURRENCY_CD"); 

		
                        String sProposedSQI_TYPE_FLG = "PRPD";
        				
                        System.out.println("sProposedProposedSQI_TYPE_FLG:-"+sProposedSQI_TYPE_FLG+" || dbProposedSQI_TYPE_FLG :- "+dbProposedSQI_TYPE_FLG);
    					
        				if (sProposedSQI_TYPE_FLG.equalsIgnoreCase(dbProposedSQI_TYPE_FLG.trim()))
    					{
    						CF.FnTestCaseStatusReport("Pass", "<<== Deal Financial Summary ==>>");    	
    						CF.FnTestCaseStatusReport("Pass", "sProposed SQI_TYPE_FLG - "+sProposedSQI_TYPE_FLG+" value from excel is matching with DB");    	
    					}
    					else 
    					{
    						CF.FnTestCaseStatusReport("Fail", "sProposed SQI_TYPE_FLG - "+sProposedSQI_TYPE_FLG+" value from excel is not matching with DB "+dbProposedSQI_TYPE_FLG+" xx>>"); 
    					}   



                        if(!sProposedRevenue.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sProposedRevenue:-"+sProposedRevenue+" || dbProposedRevenue :- "+dbProposedRevenue);
    						if (sProposedRevenue.equalsIgnoreCase(dbProposedRevenue.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sProposedRevenue - "+sProposedRevenue+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sProposedRevenue - "+sProposedRevenue+" value from excel is not matching with DB "+dbProposedRevenue); 
    						}   
    					}

                        if(!sProposedCost.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sProposedCost:-"+sProposedCost+" || dbProposedCost :- "+dbProposedCost);
    						if (sProposedCost.equalsIgnoreCase(dbProposedCost.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sProposedCost - "+sProposedCost+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sProposedCost - "+sProposedCost+" value from excel is not matching with DB "+dbProposedCost); 
    						}   
    					}

                        if(!sProposedProfitability.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sProposedProfitability:-"+sProposedProfitability+" || dbProposedProfitability :- "+dbProposedProfitability);
    						if (sProposedProfitability.equalsIgnoreCase(dbProposedProfitability.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sProposedProfitability - "+sProposedProfitability+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sProposedProfitability - "+sProposedProfitability+" value from excel is not matching with DB "+dbProposedProfitability); 
    						}   
    					}

                        if(!sCurrency.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sCurrency:-"+sCurrency+" || dbProposedCurrency :- "+dbProposedCurrency);
    						if (sCurrency.equalsIgnoreCase(dbProposedCurrency.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sProposedCurrency - "+sCurrency+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sProposedCurrency - "+sCurrency+" value from excel is not matching with DB "+sCurrency); 
    						}   
    					}

    					sStartingRow = sStartingRow + 1;
    				}
                    //LOOP1 END

                    //LOOP2 Start
                    itr = null;
    				itr = sOriginalQueryAL.iterator();
                    for(int i=0;i<sOriginalQueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("temp sQuery:-" +temp);
                        
    					String dbOriginalSQI_TYPE_FLG      = (String)temp.get("SQI_TYPE_FLG");                     
                        String dbOriginalApprovalStatus    = (String)temp.get("STATUS_CD"); 
                        String dbOriginalRevenue	       = (String)temp.get("REVENUE"); 
                        String dbOriginalCost		       = (String)temp.get("COST"); 
                        String dbOriginalProfitability     = (String)temp.get("PROFITABILITY_VAL"); 
                        String dbOriginalCurrency          = (String)temp.get("CURRENCY_CD"); 

                        String sOriginalSQI_TYPE_FLG = "ACTV";
        				
                        System.out.println("sOriginalSQI_TYPE_FLG:-"+sOriginalSQI_TYPE_FLG+" || dbOriginalSQI_TYPE_FLG :- "+dbOriginalSQI_TYPE_FLG);
    					
        				if (sOriginalSQI_TYPE_FLG.equalsIgnoreCase(dbOriginalSQI_TYPE_FLG.trim()))
    					{
    						CF.FnTestCaseStatusReport("Pass", "sOriginal SQI_TYPE_FLG - "+sOriginalSQI_TYPE_FLG+" value from excel is matching with DB");    	
    					}
    					else 
    					{
    						CF.FnTestCaseStatusReport("Fail", "sOriginal SQI_TYPE_FLG - "+sOriginalSQI_TYPE_FLG+" value from excel is not matching with DB "+dbOriginalSQI_TYPE_FLG); 
    					}   

/*

                        if(!sOriginalRevenue.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sOriginalRevenue:-"+sOriginalRevenue+" || dbOriginalRevenue :- "+dbOriginalRevenue);
    						if (sOriginalRevenue.equalsIgnoreCase(dbOriginalRevenue.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sOriginalRevenue - "+sOriginalRevenue+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sOriginalRevenue - "+sOriginalRevenue+" value from excel is not matching with DB "+dbOriginalRevenue); 
    						}   
    					}

                        if(!sOriginalCost.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sOriginalCost:-"+sOriginalCost+" || dbOriginalCost :- "+dbOriginalCost);
    						if (sOriginalCost.equalsIgnoreCase(dbOriginalCost.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sOriginalCost - "+sOriginalCost+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sOriginalCost - "+sOriginalCost+" value from excel is not matching with DB "+dbOriginalCost); 
    						}   
    					}

                        if(!sOriginalProfitability.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sOriginalProfitability:-"+sOriginalProfitability+" || dbOriginalProfitability :- "+dbOriginalProfitability);
    						if (sOriginalProfitability.equalsIgnoreCase(dbOriginalProfitability.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sOriginalProfitability - "+sOriginalProfitability+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sOriginalProfitability - "+sOriginalProfitability+" value from excel is not matching with DB "+dbOriginalProfitability); 
    						}   
    					}
*/
                        if(!sCurrency.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("sCurrency:-"+sCurrency+" || dbOriginalCurrency :- "+dbOriginalCurrency);
    						if (sCurrency.equalsIgnoreCase(dbOriginalCurrency.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "sOriginalCurrency - "+sCurrency+" value from excel is matching with DB");    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "sOriginalCurrency - "+sCurrency+" value from excel is not matching with DB "+dbOriginalCurrency); 
    						}   
    					}
                        
    					sStartingRow = sStartingRow + 1;

    				}
                    //LOOP2 END
    			}      
    			
    			else
    			{
    				System.out.println("Deal Financial Summary Data not available in db");
    			}
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	
    /*##########################################################################################################################################################################################################################/
    'Function Name        : Deal_Financial_Summary
    'Function Description : This function to verify Deal Financial Summary Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void Deal_Financial_Summary(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
        System.out.println(iStartingRow+"<<<===Deal_Financial_Summary===>>>"+iStartingRow);
           
        try
        {
            if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
            {
                String sFIN_SUMMARY,sDivision,sProposedRevenue,sProposedCost,sProposedProfit,sProposedProfitability,sOriginalRevenue,sOriginalCost,sOriginalProfit,sOriginalProfitability,sVariation;
                
                sDivision            =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
                sProposedRevenue	 =  CF.FnGetCellValue(iStartingRow,3, sSheetName, sWorkbook).toString().trim();
                sProposedCost		 =  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
                sProposedProfit      =  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
                sProposedProfitability =  CF.FnGetCellValue(iStartingRow,6, sSheetName, sWorkbook).toString().trim();
                sOriginalRevenue	 =  CF.FnGetCellValue(iStartingRow,7, sSheetName, sWorkbook).toString().trim();
                sOriginalCost	     =  CF.FnGetCellValue(iStartingRow,8, sSheetName, sWorkbook).toString().trim();
                sOriginalProfit      =  CF.FnGetCellValue(iStartingRow,9, sSheetName, sWorkbook).toString().trim();
                sOriginalProfitability =  CF.FnGetCellValue(iStartingRow,10, sSheetName, sWorkbook).toString().trim();
                sVariation     		 =  CF.FnGetCellValue(iStartingRow,11, sSheetName, sWorkbook).toString().trim();

                if(!sProposedRevenue.equalsIgnoreCase("NoValue")) {
                	sProposedRevenue = sProposedRevenue.replaceAll("[^\\d.]", "");
                    sProposedRevenue = new DecimalFormat("0.####").format(Double.parseDouble(sProposedRevenue));
                }
                if(!sProposedCost.equalsIgnoreCase("NoValue")) {
                	sProposedCost = sProposedCost.replaceAll("[^\\d.]", "");
                    sProposedCost = new DecimalFormat("0.####").format(Double.parseDouble(sProposedCost));
                }
                if(!sProposedProfit.equalsIgnoreCase("NoValue")) {
                	sProposedProfit = sProposedProfit.replaceAll("[^\\d.]", "");
                    sProposedProfit = new DecimalFormat("0.####").format(Double.parseDouble(sProposedProfit));
                }
                if(!sProposedProfitability.equalsIgnoreCase("NoValue")) {
                	sProposedProfitability = sProposedProfitability.replaceAll("[^\\d.]", "");
                    sProposedProfitability = new DecimalFormat("0.####").format(Double.parseDouble(sProposedProfitability));
                }
                if(!sOriginalRevenue.equalsIgnoreCase("NoValue")) {
                	sOriginalRevenue = sOriginalRevenue.replaceAll("[^\\d.]", "");
                    sOriginalRevenue = new DecimalFormat("0.####").format(Double.parseDouble(sOriginalRevenue));
                }
                if(!sOriginalCost.equalsIgnoreCase("NoValue")) {
                	sOriginalCost = sOriginalCost.replaceAll("[^\\d.]", "");
                    sOriginalCost = new DecimalFormat("0.####").format(Double.parseDouble(sOriginalCost));
                }
                if(!sOriginalProfit.equalsIgnoreCase("NoValue")) {
                	sOriginalProfit = sOriginalProfit.replaceAll("[^\\d.]", "");
                    sOriginalProfit = new DecimalFormat("0.####").format(Double.parseDouble(sOriginalProfit));
                }
                if(!sOriginalProfitability.equalsIgnoreCase("NoValue")) {
                	sOriginalProfitability = sOriginalProfitability.replaceAll("[^\\d.]", "");
                    sOriginalProfitability = new DecimalFormat("0.####").format(Double.parseDouble(sOriginalProfitability));
                }
                if(!sVariation.equalsIgnoreCase("NoValue")) {
                	sVariation = sVariation.replaceAll("[^\\d.]", "");
                    sVariation = new DecimalFormat("0.####").format(Double.parseDouble(sVariation));
                }

                
                if (sDivision.equalsIgnoreCase("INDIA DIVISION")) {
                	sDivision = "IND";
                }

                System.out.println("sProposedRevenue:-"+sProposedRevenue+" || sProposedCost:-"+sProposedCost+" || sProposedProfitability:-"+sProposedProfitability);
                System.out.println("sOriginalRevenue:-"+sOriginalRevenue+" || sOriginalCost:-"+sOriginalCost+" || sOriginalProfit:-"+sOriginalProfit+" || sOriginalProfitability:-"+sOriginalProfitability);

                
                sFIN_SUMMARY = "SELECT REVENUE_DEVI_PROP_VS_ACTIVE,OVERALL_PROPOSED_REVENUE,OVERALL_PROPOSED_COST,PROPOSED_PROFITABILITY_AMT,PROPOSED_PROFITABILITY,OVERALL_REVENUE,OVERALL_COST,OVERALL_PROFITABILITY_AMT,OVERALL_PROFITABILITY,OVERALL_DEAL_PROFITABILTY_DEVI FROM C1_MODEL_FIN_SUMMARY WHERE MODEL_ID = '"+model_Id+"' AND CIS_DIVISION = '"+sDivision+"'";
                System.out.println("DEAL Financial SMRY Query => "+sFIN_SUMMARY);
                ArrayList<Hashtable<String, Object>>  sFIN_SUMMARYAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(sFIN_SUMMARY);
                System.out.println("Proposed Deal SMRY AL:-"+sFIN_SUMMARYAL);
            
                

            
                if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
                {
                    int sStartingRow = iStartingRow;
                    java.util.Iterator<Hashtable<String, Object>> itr = sFIN_SUMMARYAL.iterator();
                    
                    //LOOP1 Start
                    for(int i=0;i<sFIN_SUMMARYAL.size();i++)
                    {
                        
                        Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
                        System.out.println("temp sQuery:-" +temp);

                        String dbOVERALL_PROPOSED_REVENUE      = (String)temp.get("OVERALL_PROPOSED_REVENUE");                     
                        String dbOVERALL_PROPOSED_COST         = (String)temp.get("OVERALL_PROPOSED_COST"); 
                        String dbPROPOSED_PROFITABILITY_AMT	   = (String)temp.get("PROPOSED_PROFITABILITY_AMT"); 
                        String dbPROPOSED_PROFITABILITY		   = (String)temp.get("PROPOSED_PROFITABILITY"); 

                        String dbOVERALL_REVENUE                = (String)temp.get("OVERALL_REVENUE"); 
                        String dbOVERALL_COST                   = (String)temp.get("OVERALL_COST"); 
                        String dbOVERALL_PROFITABILITY_AMT      = (String)temp.get("OVERALL_PROFITABILITY_AMT"); 
                        String dbOVERALL_PROFITABILITY          = (String)temp.get("OVERALL_PROFITABILITY"); 
        
                        String dbOVERALL_DEAL_PROFITABILTY_DEVI  = (String)temp.get("OVERALL_DEAL_PROFITABILTY_DEVI"); 
                        String dbOverall_DEAL_REVENUE_DEVI_PROP_VS_ACTIVE = (String)temp.get("REVENUE_DEVI_PROP_VS_ACTIVE"); 


                        if(!sProposedRevenue.equalsIgnoreCase("NoValue"))
                        {
                            System.out.println("sProposedRevenue:-"+sProposedRevenue+" || dbOVERALL_PROPOSED_REVENUE :- "+dbOVERALL_PROPOSED_REVENUE);
                            if (sProposedRevenue.equalsIgnoreCase(dbOVERALL_PROPOSED_REVENUE.trim()))
                            {
                                CF.FnTestCaseStatusReport("Pass", "sProposedRevenue - "+sProposedRevenue+" value from excel is matching with DB");    	
                            }
                            else 
                            {
                                CF.FnTestCaseStatusReport("Fail", "sProposedRevenue - "+sProposedRevenue+" value from excel is not matching with DB "+dbOVERALL_PROPOSED_REVENUE); 
                            }   
                        }

                        if(!sProposedCost.equalsIgnoreCase("NoValue"))
                        {
                            System.out.println("sProposedCost:-"+sProposedCost+" || dbOVERALL_PROPOSED_COST :- "+dbOVERALL_PROPOSED_COST);
                            if (sProposedCost.equalsIgnoreCase(dbOVERALL_PROPOSED_COST.trim()))
                            {
                                CF.FnTestCaseStatusReport("Pass", "sProposedCost - "+sProposedCost+" value from excel is matching with DB");    	
                            }
                            else 
                            {
                                CF.FnTestCaseStatusReport("Fail", "sProposedCost - "+sProposedCost+" value from excel is not matching with DB "+dbOVERALL_PROPOSED_COST); 
                            }   
                        }

                        if(!sProposedProfit.equalsIgnoreCase("NoValue"))
                        {
                            System.out.println("sProposedProfit:-"+sProposedProfit+" || dbPROPOSED_PROFITABILITY_AMT :- "+dbPROPOSED_PROFITABILITY_AMT);
                            if (sProposedProfit.equalsIgnoreCase(dbPROPOSED_PROFITABILITY_AMT.trim()))
                            {
                                CF.FnTestCaseStatusReport("Pass", "sProposedProfit - "+sProposedProfit+" value from excel is matching with DB");    	
                            }
                            else 
                            {
                                CF.FnTestCaseStatusReport("Fail", "sProposedProfit - "+sProposedProfit+" value from excel is not matching with DB "+dbPROPOSED_PROFITABILITY_AMT); 
                            }   
                        }

                        if(!sProposedProfitability.equalsIgnoreCase("NoValue"))
                        {
                            System.out.println("sProposedProfitability:-"+sProposedProfitability+" || dbPROPOSED_PROFITABILITY :- "+dbPROPOSED_PROFITABILITY);
                            if (sProposedProfitability.equalsIgnoreCase(dbPROPOSED_PROFITABILITY.trim()))
                            {
                                CF.FnTestCaseStatusReport("Pass", "sProposedProfitability - "+sProposedProfitability+" value from excel is matching with DB");    	
                            }
                            else 
                            {
                                CF.FnTestCaseStatusReport("Fail", "sProposedProfitability - "+sProposedProfitability+" value from excel is not matching with DB "+dbPROPOSED_PROFITABILITY); 
                            }   
                        }
/*
                        if(!sOriginalRevenue.equalsIgnoreCase("NoValue"))
					    {
					        System.out.println("sOriginalRevenue:-"+sOriginalRevenue+" || dbOVERALL_REVENUE :- "+dbOVERALL_REVENUE);
					        if (sOriginalRevenue.equalsIgnoreCase(dbOVERALL_REVENUE.trim()))
					        {
					            CF.FnTestCaseStatusReport("Pass", "sOriginalRevenue - "+sOriginalRevenue+" value from excel is matching with DB");    	
					        }
					        else 
					        {
					            CF.FnTestCaseStatusReport("Fail", "sOriginalRevenue - "+sOriginalRevenue+" value from excel is not matching with DB "+dbOVERALL_REVENUE); 
					        }   
					    }
					
					    if(!sOriginalCost.equalsIgnoreCase("NoValue"))
					    {
					        System.out.println("sOriginalCost:-"+sOriginalCost+" || dbOVERALL_COST :- "+dbOVERALL_COST);
					        if (sOriginalCost.equalsIgnoreCase(dbOVERALL_COST.trim()))
					        {
					            CF.FnTestCaseStatusReport("Pass", "sOriginalCost - "+sOriginalCost+" value from excel is matching with DB");    	
					        }
					        else 
					        {
					            CF.FnTestCaseStatusReport("Fail", "sOriginalCost - "+sOriginalCost+" value from excel is not matching with DB "+dbOVERALL_COST); 
					        }   
					    }
					
					    if(!sOriginalProfit.equalsIgnoreCase("NoValue"))
					    {
					        System.out.println("sOriginalProfit:-"+sOriginalProfit+" || dbOVERALL_PROFITABILITY_AMT :- "+dbOVERALL_PROFITABILITY_AMT);
					        if (sOriginalProfit.equalsIgnoreCase(dbOVERALL_PROFITABILITY_AMT.trim()))
					        {
					            CF.FnTestCaseStatusReport("Pass", "sOriginalProfit - "+sOriginalProfit+" value from excel is matching with DB");    	
					        }
					        else 
					        {
					            CF.FnTestCaseStatusReport("Fail", "sOriginalProfit - "+sOriginalProfit+" value from excel is not matching with DB "+dbOVERALL_PROFITABILITY_AMT); 
					        }   
					    }
					
					    if(!sOriginalProfitability.equalsIgnoreCase("NoValue"))
					    {
					        System.out.println("sOriginalProfitability:-"+sOriginalProfitability+" || dbOVERALL_PROFITABILITY :- "+dbOVERALL_PROFITABILITY);
					        if (sOriginalProfitability.equalsIgnoreCase(dbOVERALL_PROFITABILITY.trim()))
					        {
					            CF.FnTestCaseStatusReport("Pass", "sOriginalProfitability - "+sOriginalProfitability+" value from excel is matching with DB");    	
					        }
					        else 
					        {
					            CF.FnTestCaseStatusReport("Fail", "sOriginalProfitability - "+sOriginalProfitability+" value from excel is not matching with DB "+dbOVERALL_PROFITABILITY); 
					        }   
					    }
					
					    if(!sVariation.equalsIgnoreCase("NoValue"))
					    {
					        System.out.println("sVariation:-"+sVariation+" || dbOverall_DEAL_REVENUE_DEVI_PROP_VS_ACTIVE :- "+dbOverall_DEAL_REVENUE_DEVI_PROP_VS_ACTIVE);
					        if (sVariation.equalsIgnoreCase(dbOverall_DEAL_REVENUE_DEVI_PROP_VS_ACTIVE.trim()))
					        {
					            CF.FnTestCaseStatusReport("Pass", "sVariation - "+sVariation+" value from excel is matching with DB");    	
					        }
					        else 
					        {
					            CF.FnTestCaseStatusReport("Fail", "sVariation - "+sVariation+" value from excel is not matching with DB "+dbOverall_DEAL_REVENUE_DEVI_PROP_VS_ACTIVE); 
					        }   
					    }
					
*/					
					
					                        sStartingRow = sStartingRow + 1;
					                    }
					                    //LOOP1 END
					                }      
					                
					                else
					                {
					                    System.out.println("Deal Financial Summary Data not available in db");
					                }
					            }
					        }
					        catch(Exception e) 
					        {
					            System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
					            e.printStackTrace();
					            BaseTest.eFlgFound = "false";
					            CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
					        }
					    }
					
					

	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifySqiCount
    'Function Description : This function to verify price item simulation Details count from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Deal Information Details.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnVerifySqiCount(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnVerifySqiCount===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String c1_model_sqi_Count_Query, sC1_SQI_Count;
    			
                //sqi c1_model_sqi
    			sC1_SQI_Count           =  CF.FnGetCellValue(iStartingRow,40, sSheetName, sWorkbook).toString().trim();

    			System.out.println(iStartingRow+"(--->> sC1_SQI_Count :- "+sC1_SQI_Count+" <<---)");
    			
    			
    			
        		c1_model_sqi_Count_Query = "SELECT COUNT(*) FROM C1_MODEL_SQI WHERE DEAL_ENTITY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')";
    			
    			
    			System.out.println("DEAL SQI c1_model_sqi_Count_Query => "+c1_model_sqi_Count_Query);
    			ArrayList<Hashtable<String, Object>>  c1_model_sqi_Count_QueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(c1_model_sqi_Count_Query);
    			System.out.println("c1_model_sqi_Count_QueryAL:-"+c1_model_sqi_Count_QueryAL);



    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = c1_model_sqi_Count_QueryAL.iterator();
    				
    				
    				System.out.println("<<<<<<= size c1_model_sqi_Count_QueryAL=>>>>>>"+c1_model_sqi_Count_QueryAL.size());
                    //loop1 start
    				for(int i=0;i<c1_model_sqi_Count_QueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("temp c1_model_sqi_Count_Query:-" +temp);
    					String dbSQICount=(String)temp.get("COUNT(*)");
                   

    					
    					System.out.println("<<<= dbSVC_QtyNum1 =>>>"+dbSQICount);
    					if(!sC1_SQI_Count.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("<<== sC1_sqi_count:-"+sC1_SQI_Count+" || dbSQICount :- "+dbSQICount+" ==>>");
    						if (sC1_SQI_Count.equalsIgnoreCase(dbSQICount.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "SQI Count - "+sC1_SQI_Count+" value from excel is matching with DB "+dbSQICount);    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "<<xx SQI Count - "+sC1_SQI_Count+" value from excel is not matching with DB "+dbSQICount+" xx>>"); 
    						}   
    					}
    					
    					
    				
    					sStartingRow = sStartingRow + 1;
    				}
    				


    			} else {
    				System.out.println("Deal Commitment Data not available in db");
    			} 		
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	
    
	
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifySimulationCount
    'Function Description : This function to verify Default commitment Count Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item SQI Details at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnVerifySimulationCount(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnVerifySimulationCount===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String c1_smld_dtl_Count_Query, sC1_Simulation_Count;
    			
    			sC1_Simulation_Count           =  CF.FnGetCellValue(iStartingRow,41, sSheetName, sWorkbook).toString().trim();

    			System.out.println(iStartingRow+"(--->> sC1_Simulation_Count Value :- "+sC1_Simulation_Count+" <<---)");
    			
        		c1_smld_dtl_Count_Query = "SELECT COUNT(*) FROM C1_DEAL_SIMULATION_DTL WHERE DEAL_ENTITY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')";
    			
    			
    			System.out.println("DEAL SQI c1_smld_dtl_Count_Query => "+c1_smld_dtl_Count_Query);
    			ArrayList<Hashtable<String, Object>>  c1_smld_dtl_Count_QueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(c1_smld_dtl_Count_Query);
    			System.out.println("c1_smld_dtl_Count_QueryAL:-"+c1_smld_dtl_Count_QueryAL);



    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = c1_smld_dtl_Count_QueryAL.iterator();
    				
    				
    				System.out.println("<<<<<<= size c1_smld_dtl_Count_QueryAL=>>>>>>"+c1_smld_dtl_Count_QueryAL.size());
                    //loop1 start
    				for(int i=0;i<c1_smld_dtl_Count_QueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("temp c1_smld_dtl_Count_Query:-" +temp);
    					String dbSimulationCount=(String)temp.get("COUNT(*)");
                   

    					
    					System.out.println("<<<= dbSVC_QtyNum1 =>>>"+dbSimulationCount);
    					if(!sC1_Simulation_Count.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("<<== sC1_Simulation_Count:-"+sC1_Simulation_Count+" || dbSimulationCount :- "+dbSimulationCount+" ==>>");
    						if (sC1_Simulation_Count.equalsIgnoreCase(dbSimulationCount.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "Simulation Count - "+sC1_Simulation_Count+" value from excel is matching with DB "+dbSimulationCount);    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "<<xx Simulation Count - "+sC1_Simulation_Count+" value from excel is not matching with DB "+dbSimulationCount+" xx>>"); 
    						}   
    					}
    					
    					
    				
    					sStartingRow = sStartingRow + 1;
    				}
    				


    			} else {
    				System.out.println("Deal Simulation Count Data not available in db");
    			} 		
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    

	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifyPriceAsgnCount
    'Function Description : This function to verify ci_priceasgn count from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Deal Information Details.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnVerifyPriceAsgnCount(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnVerifyPriceAsgnCount===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String ci_priceasgnQuery, sCI_PriceAsgnCount;
    			
                //sqi c1_model_sqi
    			sCI_PriceAsgnCount           =  CF.FnGetCellValue(iStartingRow,42, sSheetName, sWorkbook).toString().trim();

    			System.out.println(iStartingRow+"(--->> sCI_PriceAsgnCount :- "+sCI_PriceAsgnCount+" <<---)");
    			
    			    			
                ci_priceasgnQuery = "SELECT COUNT(*) FROM CI_PRICEASGN WHERE OWNER_ID = (SELECT PARTY_UID FROM CI_PARTY WHERE PARTY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"'))";
    			

    			System.out.println("DEAL SQI ci_priceasgnQuery => "+ci_priceasgnQuery);
    			ArrayList<Hashtable<String, Object>>  ci_priceasgnQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(ci_priceasgnQuery);
    			System.out.println("ci_priceasgnQueryAL:-"+ci_priceasgnQueryAL);



    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				int sStartingRow = iStartingRow;
    				java.util.Iterator<Hashtable<String, Object>> itr = ci_priceasgnQueryAL.iterator();
    				
    				
    				System.out.println("<<<<<<= size ci_priceasgnQueryAL=>>>>>>"+ci_priceasgnQueryAL.size());
                    //loop1 start
    				for(int i=0;i<ci_priceasgnQueryAL.size();i++)
    				{
    					
    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
                                                 
    					System.out.println("temp ci_priceasgnQuery:-" +temp);
    					String dbPriceAsgnCount=(String)temp.get("COUNT(*)");
                   

    					
    					System.out.println("<<<= dbSVC_QtyNum1 =>>>"+dbPriceAsgnCount);
    					if(!sCI_PriceAsgnCount.equalsIgnoreCase("NoValue"))
    					{
        					System.out.println("<<== sCI_PriceAsgnCount:-"+sCI_PriceAsgnCount+" || dbPriceAsgnCount :- "+dbPriceAsgnCount+" ==>>");
    						if (sCI_PriceAsgnCount.equalsIgnoreCase(dbPriceAsgnCount.trim()))
    						{
    							CF.FnTestCaseStatusReport("Pass", "Price Assignment Count - "+sCI_PriceAsgnCount+" value from excel is matching with DB "+dbPriceAsgnCount);    	
    						}
    						else 
    						{
    							CF.FnTestCaseStatusReport("Fail", "<<xx Price Assignment Count - "+sCI_PriceAsgnCount+" value from excel is not matching with DB "+dbPriceAsgnCount+" xx>>"); 
    						}   
    					}
    					
    					
    				
    					sStartingRow = sStartingRow + 1;
    				}
    				


    			} else {
    				System.out.println("Deal Commitment Data not available in db");
    			} 		
    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	
	
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnVerifyPriceAsgnDetails
    'Function Description : This function to verify Price Assignment Details of Price item which Don't Have Parameter from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet which has the Price Item SQI Details at person level.
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnVerifyPriceAsgnDetails(int iStartingRow, String sSheetName, String sWorkbook, String model_Id) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnVerifyPriceAsgnDetails===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
    			String Ci_PriceAsgn_Query,sPRICEITEM_CD,sSTART_DT,sEND_DT,sErrorMessage,sPRICE_ASSIGNMENT_LEVEL,sPA_OWNER_TYPE_FLG;
    			
                //sqi c1_model_sqi
    			sPRICEITEM_CD           =  CF.FnGetCellValue(iStartingRow,1, sSheetName, sWorkbook).toString().trim();
    			sSTART_DT				=  CF.FnGetCellValue(iStartingRow,4, sSheetName, sWorkbook).toString().trim();
    			sEND_DT					=  CF.FnGetCellValue(iStartingRow,5, sSheetName, sWorkbook).toString().trim();
    			sErrorMessage			=  CF.FnGetCellValue(iStartingRow,26, sSheetName, sWorkbook).toString().trim();


    			System.out.println(iStartingRow+"(--->> PRICEITEM_CD :- "+sPRICEITEM_CD+" <<---)");
    			System.out.println(iStartingRow+"(--->> sSTART_DT :- "+sSTART_DT+" <<---)");
    			System.out.println(iStartingRow+"(--->> sEND_DT :- "+sEND_DT+" <<---)");

//    			String UserdateName = new SimpleDateFormat("DD-MMM-YY").format(sSTART_DT);

    			String sUserDate = "NoValue";
    			if(!sSTART_DT.equalsIgnoreCase("NoValue")) {
    		     DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    		     Date date=df.parse(sSTART_DT);
    		     df=new SimpleDateFormat("dd-MMM-yyyy");
    			 sUserDate = df.format(date);
    			 System.out.println("sdate:--"+sUserDate);
    			}
    			if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    			{
    				
    			int sStartingRow = iStartingRow;
    			java.util.Iterator<Hashtable<String, Object>> itr;
    			
    			    			
    			System.out.println("@@@ price asgn details @@@@ :-"+sPRICEITEM_CD);

				String Ci_PriceAsgn_Query_Count = "SELECT COUNT(*) FROM CI_PRICEASGN WHERE OWNER_ID = (SELECT PARTY_UID FROM CI_PARTY WHERE PARTY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')) AND PRICE_STATUS_FLAG = 'PRPD' AND START_DT = '"+sUserDate+"' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";

				System.out.println("Ci_PriceAsgn_Query_Count:-"+Ci_PriceAsgn_Query_Count);
				itr = null;
    			ArrayList<Hashtable<String, Object>>  ci_priceasgnCountQueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(Ci_PriceAsgn_Query_Count);
    		    itr = ci_priceasgnCountQueryAL.iterator();
    		    
    			int dbPriceAsgnCount = 0;
    			
                for(int i=0;i<ci_priceasgnCountQueryAL.size();i++)
    			{
    					Hashtable<String, Object> tempRecord = (Hashtable<String, Object>)itr.next();
    					String dbPriceAsgnCountStr =(String)tempRecord.get("COUNT(*)");
    					dbPriceAsgnCount = Integer.valueOf(dbPriceAsgnCountStr);
                }
                
                System.out.println("dbPriceAsgnCount:-"+dbPriceAsgnCount);

                
				if(dbPriceAsgnCount > 0) {
					
					Ci_PriceAsgn_Query = "SELECT PRICEITEM_CD,START_DT,END_DT,PA_OWNER_TYPE_FLG FROM CI_PRICEASGN WHERE OWNER_ID = (SELECT PARTY_UID FROM CI_PARTY WHERE PARTY_ID = (SELECT PER_ID FROM C1_MODEL WHERE MODEL_ID = '"+model_Id+"')) AND PRICE_STATUS_FLAG = 'PRPD' AND START_DT = '"+sUserDate+"' AND PRICEITEM_CD = '"+sPRICEITEM_CD+"'";
	                
	    			ArrayList<Hashtable<String, Object>>  Ci_PriceAsgn_QueryAL =  (ArrayList<Hashtable<String, Object>>)fnGetAllValuefromDB(Ci_PriceAsgn_Query);
	    			System.out.println("Ci_PriceAsgn_QueryAL:-"+Ci_PriceAsgn_QueryAL);


	    				//loop2 Start
	    				itr = null;
	    				itr = Ci_PriceAsgn_QueryAL.iterator();
	    				for(int i=0;i<Ci_PriceAsgn_QueryAL.size();i++)
	    				{
	    					
	    					Hashtable<String, Object> temp = (Hashtable<String, Object>)itr.next();
	                                                 
	    					System.out.println("CI_PRICEASGN sQuery:-" +temp);
	    					String dbPRICEITEM_CD=((String) temp.get("PRICEITEM_CD")).trim();
	    					String dbSTART_DT=(String)temp.get("START_DT");
	    					dbSTART_DT = dbSTART_DT.replaceAll("\\s.*", "").trim();
	    					String dbEND_DT=(String)temp.get("END_DT");
	    					dbEND_DT = dbEND_DT.replaceAll("\\s.*", "").trim();

			
	    					if(!sPRICEITEM_CD.equalsIgnoreCase("NoValue"))
	    					{
	        					System.out.println("sPRICEITEM_CD:-"+sPRICEITEM_CD+" || dbPRICEITEM_CD :- "+dbPRICEITEM_CD+"");
	    						if (!sPRICEITEM_CD.equalsIgnoreCase(dbPRICEITEM_CD.trim()))
	    						{
	    							CF.FnTestCaseStatusReport("Fail", "sPRICEITEM_CD - "+sPRICEITEM_CD+" value from excel is not matching with DB"); 
	    						}
  
	    					}
	    					
	    					
	    					if(!sSTART_DT.equalsIgnoreCase("NoValue"))
	    					{
	        					System.out.println(dbPRICEITEM_CD+" sSTART_DT :- "+sSTART_DT+" || dbSTART_DT :- "+dbSTART_DT);
	    						if (!sSTART_DT.equalsIgnoreCase(dbSTART_DT.trim()))
	    						{
	    							CF.FnTestCaseStatusReport("Fail", "sSTART_DT - "+sSTART_DT+" value from excel is not matching with DB "+dbSTART_DT+""); 
	    						}
 
	    					}
	    					
	    					
	    					if(!sEND_DT.equalsIgnoreCase("NoValue"))
	    					{
	        					System.out.println("sEND_DT :- "+sEND_DT+" || dbEND_DT :- "+dbEND_DT);
	    						if (!sEND_DT.equalsIgnoreCase(dbEND_DT.trim()))
	    						{
	    							CF.FnTestCaseStatusReport("Fail", "sEND_DT - "+sEND_DT+" value from excel is not matching with DB "+dbEND_DT); 
	    						} 
	    					}
	    					
	    					
							CF.FnTestCaseStatusReport("Pass", "Verification of Price Assignment Details for "+sPRICEITEM_CD+" Performed Successfully");    	

	    					
	    					sStartingRow = sStartingRow + 1;
	    				}
					
				} else if(sErrorMessage.equals("No Price Assignment for Model")) {
					CF.FnTestCaseStatusReport("Pass", "Performed Price Assignment for Price Item :- "+sPRICEITEM_CD); 
				} else {
					CF.FnTestCaseStatusReport("Fail", "Failed to Perform Price Assignment Details Data Not Exists "+sPRICEITEM_CD); 
				}
				

    			
                //loop2 END
    			}

    			} else {
    				System.out.println("Price Assign Data not available in db");
    			} 		
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    

	/*##########################################################################################################################################################################################################################/
    'Function Name        : UpdateDealType
    'Function Description : This function to update deal type in DB Table 
    'Input Parameters     : 
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void UpdateDealType() throws Exception
    {
    	System.out.println("<<<===UpdateDealType===>>>");
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{


            	String IsDealTypeExists = 	(String) FnGetDBColumnValue("SELECT COUNT(*) FROM C1_DEAL_TYPE WHERE DEAL_TYPE_CD = 'DLAPR1'","COUNT(*)" , System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

                if(!IsDealTypeExists.equals("0")) {

    			FnUpdateValueInDb("Update C1_DEAL_TYPE SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnUpdateValueInDb("Update C1_DEAL_TYPE_ALG SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnUpdateValueInDb("Update C1_DEAL_TYPE_CHAR SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnUpdateValueInDb("Update C1_DEAL_TYPE_CST_AHCY SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnUpdateValueInDb("Update C1_DEAL_TYPE_CST_AHCY_CHAR SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
    			FnUpdateValueInDb("Update C1_DEAL_TYPE_L SET DEAL_TYPE_CD = 'COMTAPRL' WHERE DEAL_TYPE_CD = 'DLAPR1'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));
            
            	CF.FnTestCaseStatusReport("Pass", "Deal Type Updated Successfully");

                }

    				

    		}
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	/*##########################################################################################################################################################################################################################/
    'Function Name        : FnUpdateBillableChargeDates
    'Function Description : This function to verify Deal Proposed SQI & Pricing Details from DB Table 
    'Input Parameters     : iStartingRow     -> Starting Row of the excel sheet in "DD-MMM-YY" Format for StartDate and EndDate.
	'Written By	          : Rohit Thik
    '#########################################################################################################################################################################################################################################################################################################################*/
    public void FnUpdateBillableChargeDates(int iStartingRow, String sSheetName, String sWorkbook) throws Exception
    {
    	System.out.println(iStartingRow+"<<<===FnUpdateBillableChargeDates===>>>"+iStartingRow);
           
    	try
    	{
    		if (BaseTest.eFlgFound.equalsIgnoreCase("true"))
    		{
			String sBillableChargeStartDate = CF.FnGetCellValue(iStartingRow, 10, sSheetName, sWorkbook).toString().trim();
			String sBillableChargeEndDate = CF.FnGetCellValue(iStartingRow, 11, sSheetName, sWorkbook).toString().trim();
			String sBillableChargeId = CF.FnGetCellValue(iStartingRow, 14, sSheetName, sWorkbook).toString().trim();
			
			FnUpdateValueInDb("Update CI_BILL_CHG SET START_DT = '"+sBillableChargeStartDate+"', END_DT = '"+sBillableChargeEndDate+"' WHERE BILLABLE_CHG_ID = '"+sBillableChargeId+"'","COMMIT", System.getProperty("dbName"), System.getProperty("dbUserName"), System.getProperty("dbPassword"), System.getProperty("dbMachineIP"), System.getProperty("dbPort"));

    		//CF.FnTestCaseStatusReport("Pass", "Billable Charge Date Updated Successfully in Database table");    	

            } else {
    				System.out.println("Billable Charge Data not available in db");
    		} 
 		
    	}
    	catch(Exception e) 
    	{
    		System.out.println("Exception in Application Function ==> FileRecordTypeUploadFileRequestTableVerification");
    		e.printStackTrace();
    		BaseTest.eFlgFound = "false";
    		CF.FnTestCaseStatusReport("Fail","Application Function Exception occured ->\n"+CF.erromsg(e));
    	}
    }
    
    
	
	
	/////////////////////////NEW IWS END//////////////////////////

	
	
	
	
	
}	
	
	
	

